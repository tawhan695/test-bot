// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package linethrift

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ChatType int64
const (
  ChatType_GROUP ChatType = 0
  ChatType_ROOM ChatType = 1
  ChatType_PEER ChatType = 2
)

func (p ChatType) String() string {
  switch p {
  case ChatType_GROUP: return "GROUP"
  case ChatType_ROOM: return "ROOM"
  case ChatType_PEER: return "PEER"
  }
  return "<UNSET>"
}

func ChatTypeFromString(s string) (ChatType, error) {
  switch s {
  case "GROUP": return ChatType_GROUP, nil 
  case "ROOM": return ChatType_ROOM, nil 
  case "PEER": return ChatType_PEER, nil 
  }
  return ChatType(0), fmt.Errorf("not a valid ChatType string")
}


func ChatTypePtr(v ChatType) *ChatType { return &v }

func (p ChatType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatType) UnmarshalText(text []byte) error {
q, err := ChatTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatType(v)
return nil
}

func (p * ChatType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatAttribute int64
const (
  ChatAttribute_NAME ChatAttribute = 1
  ChatAttribute_PICTURE_STATUS ChatAttribute = 2
  ChatAttribute_PREVENTED_JOIN_BY_TICKET ChatAttribute = 4
  ChatAttribute_NOTIFICATION_SETTING ChatAttribute = 8
  ChatAttribute_INVITATION_TICKET ChatAttribute = 16
  ChatAttribute_FAVORITE_TIMESTAMP ChatAttribute = 32
  ChatAttribute_CHAT_TYPE ChatAttribute = 64
)

func (p ChatAttribute) String() string {
  switch p {
  case ChatAttribute_NAME: return "NAME"
  case ChatAttribute_PICTURE_STATUS: return "PICTURE_STATUS"
  case ChatAttribute_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ChatAttribute_NOTIFICATION_SETTING: return "NOTIFICATION_SETTING"
  case ChatAttribute_INVITATION_TICKET: return "INVITATION_TICKET"
  case ChatAttribute_FAVORITE_TIMESTAMP: return "FAVORITE_TIMESTAMP"
  case ChatAttribute_CHAT_TYPE: return "CHAT_TYPE"
  }
  return "<UNSET>"
}

func ChatAttributeFromString(s string) (ChatAttribute, error) {
  switch s {
  case "NAME": return ChatAttribute_NAME, nil 
  case "PICTURE_STATUS": return ChatAttribute_PICTURE_STATUS, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ChatAttribute_PREVENTED_JOIN_BY_TICKET, nil 
  case "NOTIFICATION_SETTING": return ChatAttribute_NOTIFICATION_SETTING, nil 
  case "INVITATION_TICKET": return ChatAttribute_INVITATION_TICKET, nil 
  case "FAVORITE_TIMESTAMP": return ChatAttribute_FAVORITE_TIMESTAMP, nil 
  case "CHAT_TYPE": return ChatAttribute_CHAT_TYPE, nil 
  }
  return ChatAttribute(0), fmt.Errorf("not a valid ChatAttribute string")
}


func ChatAttributePtr(v ChatAttribute) *ChatAttribute { return &v }

func (p ChatAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatAttribute) UnmarshalText(text []byte) error {
q, err := ChatAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatAttribute(v)
return nil
}

func (p * ChatAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GroupAttribute int64
const (
  GroupAttribute_NAME GroupAttribute = 1
  GroupAttribute_PICTURE_STATUS GroupAttribute = 2
  GroupAttribute_ALL GroupAttribute = 255
  GroupAttribute_PREVENTED_JOIN_BY_TICKET GroupAttribute = 4
  GroupAttribute_NOTIFICATION_SETTING GroupAttribute = 8
)

func (p GroupAttribute) String() string {
  switch p {
  case GroupAttribute_NAME: return "NAME"
  case GroupAttribute_PICTURE_STATUS: return "PICTURE_STATUS"
  case GroupAttribute_ALL: return "ALL"
  case GroupAttribute_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case GroupAttribute_NOTIFICATION_SETTING: return "NOTIFICATION_SETTING"
  }
  return "<UNSET>"
}

func GroupAttributeFromString(s string) (GroupAttribute, error) {
  switch s {
  case "NAME": return GroupAttribute_NAME, nil 
  case "PICTURE_STATUS": return GroupAttribute_PICTURE_STATUS, nil 
  case "ALL": return GroupAttribute_ALL, nil 
  case "PREVENTED_JOIN_BY_TICKET": return GroupAttribute_PREVENTED_JOIN_BY_TICKET, nil 
  case "NOTIFICATION_SETTING": return GroupAttribute_NOTIFICATION_SETTING, nil 
  }
  return GroupAttribute(0), fmt.Errorf("not a valid GroupAttribute string")
}


func GroupAttributePtr(v GroupAttribute) *GroupAttribute { return &v }

func (p GroupAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GroupAttribute) UnmarshalText(text []byte) error {
q, err := GroupAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GroupAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GroupAttribute(v)
return nil
}

func (p * GroupAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactSetting int64
const (
  ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE ContactSetting = 1
  ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactSetting = 2
  ContactSetting_CONTACT_SETTING_CONTACT_HIDE ContactSetting = 4
  ContactSetting_CONTACT_SETTING_FAVORITE ContactSetting = 8
  ContactSetting_CONTACT_SETTING_DELETE ContactSetting = 16
)

func (p ContactSetting) String() string {
  switch p {
  case ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE: return "CONTACT_SETTING_NOTIFICATION_DISABLE"
  case ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE: return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
  case ContactSetting_CONTACT_SETTING_CONTACT_HIDE: return "CONTACT_SETTING_CONTACT_HIDE"
  case ContactSetting_CONTACT_SETTING_FAVORITE: return "CONTACT_SETTING_FAVORITE"
  case ContactSetting_CONTACT_SETTING_DELETE: return "CONTACT_SETTING_DELETE"
  }
  return "<UNSET>"
}

func ContactSettingFromString(s string) (ContactSetting, error) {
  switch s {
  case "CONTACT_SETTING_NOTIFICATION_DISABLE": return ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE, nil 
  case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": return ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil 
  case "CONTACT_SETTING_CONTACT_HIDE": return ContactSetting_CONTACT_SETTING_CONTACT_HIDE, nil 
  case "CONTACT_SETTING_FAVORITE": return ContactSetting_CONTACT_SETTING_FAVORITE, nil 
  case "CONTACT_SETTING_DELETE": return ContactSetting_CONTACT_SETTING_DELETE, nil 
  }
  return ContactSetting(0), fmt.Errorf("not a valid ContactSetting string")
}


func ContactSettingPtr(v ContactSetting) *ContactSetting { return &v }

func (p ContactSetting) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactSetting) UnmarshalText(text []byte) error {
q, err := ContactSettingFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactSetting) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactSetting(v)
return nil
}

func (p * ContactSetting) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactType int64
const (
  ContactType_MID ContactType = 0
  ContactType_PHONE ContactType = 1
  ContactType_EMAIL ContactType = 2
  ContactType_USERID ContactType = 3
  ContactType_PROXIMITY ContactType = 4
  ContactType_GROUP ContactType = 5
  ContactType_USER ContactType = 6
  ContactType_QRCODE ContactType = 7
  ContactType_PROMOTION_BOT ContactType = 8
  ContactType_CONTACT_MESSAGE ContactType = 9
  ContactType_FRIEND_REQUEST ContactType = 10
  ContactType_BEACON ContactType = 11
  ContactType_REPAIR ContactType = 128
  ContactType_FACEBOOK ContactType = 2305
  ContactType_SINA ContactType = 2306
  ContactType_RENREN ContactType = 2307
  ContactType_FEIXIN ContactType = 2308
  ContactType_BBM ContactType = 2309
)

func (p ContactType) String() string {
  switch p {
  case ContactType_MID: return "MID"
  case ContactType_PHONE: return "PHONE"
  case ContactType_EMAIL: return "EMAIL"
  case ContactType_USERID: return "USERID"
  case ContactType_PROXIMITY: return "PROXIMITY"
  case ContactType_GROUP: return "GROUP"
  case ContactType_USER: return "USER"
  case ContactType_QRCODE: return "QRCODE"
  case ContactType_PROMOTION_BOT: return "PROMOTION_BOT"
  case ContactType_CONTACT_MESSAGE: return "CONTACT_MESSAGE"
  case ContactType_FRIEND_REQUEST: return "FRIEND_REQUEST"
  case ContactType_BEACON: return "BEACON"
  case ContactType_REPAIR: return "REPAIR"
  case ContactType_FACEBOOK: return "FACEBOOK"
  case ContactType_SINA: return "SINA"
  case ContactType_RENREN: return "RENREN"
  case ContactType_FEIXIN: return "FEIXIN"
  case ContactType_BBM: return "BBM"
  }
  return "<UNSET>"
}

func ContactTypeFromString(s string) (ContactType, error) {
  switch s {
  case "MID": return ContactType_MID, nil 
  case "PHONE": return ContactType_PHONE, nil 
  case "EMAIL": return ContactType_EMAIL, nil 
  case "USERID": return ContactType_USERID, nil 
  case "PROXIMITY": return ContactType_PROXIMITY, nil 
  case "GROUP": return ContactType_GROUP, nil 
  case "USER": return ContactType_USER, nil 
  case "QRCODE": return ContactType_QRCODE, nil 
  case "PROMOTION_BOT": return ContactType_PROMOTION_BOT, nil 
  case "CONTACT_MESSAGE": return ContactType_CONTACT_MESSAGE, nil 
  case "FRIEND_REQUEST": return ContactType_FRIEND_REQUEST, nil 
  case "BEACON": return ContactType_BEACON, nil 
  case "REPAIR": return ContactType_REPAIR, nil 
  case "FACEBOOK": return ContactType_FACEBOOK, nil 
  case "SINA": return ContactType_SINA, nil 
  case "RENREN": return ContactType_RENREN, nil 
  case "FEIXIN": return ContactType_FEIXIN, nil 
  case "BBM": return ContactType_BBM, nil 
  }
  return ContactType(0), fmt.Errorf("not a valid ContactType string")
}


func ContactTypePtr(v ContactType) *ContactType { return &v }

func (p ContactType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactType) UnmarshalText(text []byte) error {
q, err := ContactTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactType(v)
return nil
}

func (p * ContactType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactStatus int64
const (
  ContactStatus_UNSPECIFIED ContactStatus = 0
  ContactStatus_FRIEND ContactStatus = 1
  ContactStatus_FRIEND_BLOCKED ContactStatus = 2
  ContactStatus_RECOMMEND ContactStatus = 3
  ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
  ContactStatus_DELETED ContactStatus = 5
  ContactStatus_DELETED_BLOCKED ContactStatus = 6
)

func (p ContactStatus) String() string {
  switch p {
  case ContactStatus_UNSPECIFIED: return "UNSPECIFIED"
  case ContactStatus_FRIEND: return "FRIEND"
  case ContactStatus_FRIEND_BLOCKED: return "FRIEND_BLOCKED"
  case ContactStatus_RECOMMEND: return "RECOMMEND"
  case ContactStatus_RECOMMEND_BLOCKED: return "RECOMMEND_BLOCKED"
  case ContactStatus_DELETED: return "DELETED"
  case ContactStatus_DELETED_BLOCKED: return "DELETED_BLOCKED"
  }
  return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
  switch s {
  case "UNSPECIFIED": return ContactStatus_UNSPECIFIED, nil 
  case "FRIEND": return ContactStatus_FRIEND, nil 
  case "FRIEND_BLOCKED": return ContactStatus_FRIEND_BLOCKED, nil 
  case "RECOMMEND": return ContactStatus_RECOMMEND, nil 
  case "RECOMMEND_BLOCKED": return ContactStatus_RECOMMEND_BLOCKED, nil 
  case "DELETED": return ContactStatus_DELETED, nil 
  case "DELETED_BLOCKED": return ContactStatus_DELETED_BLOCKED, nil 
  }
  return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}


func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

func (p ContactStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactStatus) UnmarshalText(text []byte) error {
q, err := ContactStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactStatus(v)
return nil
}

func (p * ContactStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Relation int64
const (
  Relation_ONEWAY Relation = 0
  Relation_BOTH Relation = 1
  Relation_NOT_REGISTERED Relation = 2
)

func (p Relation) String() string {
  switch p {
  case Relation_ONEWAY: return "ONEWAY"
  case Relation_BOTH: return "BOTH"
  case Relation_NOT_REGISTERED: return "NOT_REGISTERED"
  }
  return "<UNSET>"
}

func RelationFromString(s string) (Relation, error) {
  switch s {
  case "ONEWAY": return Relation_ONEWAY, nil 
  case "BOTH": return Relation_BOTH, nil 
  case "NOT_REGISTERED": return Relation_NOT_REGISTERED, nil 
  }
  return Relation(0), fmt.Errorf("not a valid Relation string")
}


func RelationPtr(v Relation) *Relation { return &v }

func (p Relation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Relation) UnmarshalText(text []byte) error {
q, err := RelationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Relation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Relation(v)
return nil
}

func (p * Relation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestStatus int64
const (
  FriendRequestStatus_NONE FriendRequestStatus = 0
  FriendRequestStatus_AVAILABLE FriendRequestStatus = 1
  FriendRequestStatus_ALREADY_REQUESTED FriendRequestStatus = 2
  FriendRequestStatus_UNAVAILABLE FriendRequestStatus = 3
)

func (p FriendRequestStatus) String() string {
  switch p {
  case FriendRequestStatus_NONE: return "NONE"
  case FriendRequestStatus_AVAILABLE: return "AVAILABLE"
  case FriendRequestStatus_ALREADY_REQUESTED: return "ALREADY_REQUESTED"
  case FriendRequestStatus_UNAVAILABLE: return "UNAVAILABLE"
  }
  return "<UNSET>"
}

func FriendRequestStatusFromString(s string) (FriendRequestStatus, error) {
  switch s {
  case "NONE": return FriendRequestStatus_NONE, nil 
  case "AVAILABLE": return FriendRequestStatus_AVAILABLE, nil 
  case "ALREADY_REQUESTED": return FriendRequestStatus_ALREADY_REQUESTED, nil 
  case "UNAVAILABLE": return FriendRequestStatus_UNAVAILABLE, nil 
  }
  return FriendRequestStatus(0), fmt.Errorf("not a valid FriendRequestStatus string")
}


func FriendRequestStatusPtr(v FriendRequestStatus) *FriendRequestStatus { return &v }

func (p FriendRequestStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestStatus) UnmarshalText(text []byte) error {
q, err := FriendRequestStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestStatus(v)
return nil
}

func (p * FriendRequestStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MidType int64
const (
  MidType_USER MidType = 0
  MidType_ROOM MidType = 1
  MidType_GROUP MidType = 2
  MidType_SQUARE MidType = 3
  MidType_SQUARE_CHAT MidType = 4
  MidType_SQUARE_MEMBER MidType = 5
  MidType_BOT MidType = 6
)

func (p MidType) String() string {
  switch p {
  case MidType_USER: return "USER"
  case MidType_ROOM: return "ROOM"
  case MidType_GROUP: return "GROUP"
  case MidType_SQUARE: return "SQUARE"
  case MidType_SQUARE_CHAT: return "SQUARE_CHAT"
  case MidType_SQUARE_MEMBER: return "SQUARE_MEMBER"
  case MidType_BOT: return "BOT"
  }
  return "<UNSET>"
}

func MidTypeFromString(s string) (MidType, error) {
  switch s {
  case "USER": return MidType_USER, nil 
  case "ROOM": return MidType_ROOM, nil 
  case "GROUP": return MidType_GROUP, nil 
  case "SQUARE": return MidType_SQUARE, nil 
  case "SQUARE_CHAT": return MidType_SQUARE_CHAT, nil 
  case "SQUARE_MEMBER": return MidType_SQUARE_MEMBER, nil 
  case "BOT": return MidType_BOT, nil 
  }
  return MidType(0), fmt.Errorf("not a valid MidType string")
}


func MidTypePtr(v MidType) *MidType { return &v }

func (p MidType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MidType) UnmarshalText(text []byte) error {
q, err := MidTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MidType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MidType(v)
return nil
}

func (p * MidType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Provider int64
const (
  Provider_GOOGLE Provider = 0
  Provider_BAIDU Provider = 1
  Provider_FOURSQUARE Provider = 2
)

func (p Provider) String() string {
  switch p {
  case Provider_GOOGLE: return "GOOGLE"
  case Provider_BAIDU: return "BAIDU"
  case Provider_FOURSQUARE: return "FOURSQUARE"
  }
  return "<UNSET>"
}

func ProviderFromString(s string) (Provider, error) {
  switch s {
  case "GOOGLE": return Provider_GOOGLE, nil 
  case "BAIDU": return Provider_BAIDU, nil 
  case "FOURSQUARE": return Provider_FOURSQUARE, nil 
  }
  return Provider(0), fmt.Errorf("not a valid Provider string")
}


func ProviderPtr(v Provider) *Provider { return &v }

func (p Provider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Provider) UnmarshalText(text []byte) error {
q, err := ProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Provider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Provider(v)
return nil
}

func (p * Provider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContentType int64
const (
  ContentType_NONE ContentType = 0
  ContentType_IMAGE ContentType = 1
  ContentType_VIDEO ContentType = 2
  ContentType_AUDIO ContentType = 3
  ContentType_HTML ContentType = 4
  ContentType_PDF ContentType = 5
  ContentType_CALL ContentType = 6
  ContentType_STICKER ContentType = 7
  ContentType_PRESENCE ContentType = 8
  ContentType_GIFT ContentType = 9
  ContentType_GROUPBOARD ContentType = 10
  ContentType_APPLINK ContentType = 11
  ContentType_LINK ContentType = 12
  ContentType_CONTACT ContentType = 13
  ContentType_FILE ContentType = 14
  ContentType_LOCATION ContentType = 15
  ContentType_POSTNOTIFICATION ContentType = 16
  ContentType_RICH ContentType = 17
  ContentType_CHATEVENT ContentType = 18
  ContentType_MUSIC ContentType = 19
  ContentType_PAYMENT ContentType = 20
  ContentType_EXTIMAGE ContentType = 21
  ContentType_FLEX ContentType = 22
)

func (p ContentType) String() string {
  switch p {
  case ContentType_NONE: return "NONE"
  case ContentType_IMAGE: return "IMAGE"
  case ContentType_VIDEO: return "VIDEO"
  case ContentType_AUDIO: return "AUDIO"
  case ContentType_HTML: return "HTML"
  case ContentType_PDF: return "PDF"
  case ContentType_CALL: return "CALL"
  case ContentType_STICKER: return "STICKER"
  case ContentType_PRESENCE: return "PRESENCE"
  case ContentType_GIFT: return "GIFT"
  case ContentType_GROUPBOARD: return "GROUPBOARD"
  case ContentType_APPLINK: return "APPLINK"
  case ContentType_LINK: return "LINK"
  case ContentType_CONTACT: return "CONTACT"
  case ContentType_FILE: return "FILE"
  case ContentType_LOCATION: return "LOCATION"
  case ContentType_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case ContentType_RICH: return "RICH"
  case ContentType_CHATEVENT: return "CHATEVENT"
  case ContentType_MUSIC: return "MUSIC"
  case ContentType_PAYMENT: return "PAYMENT"
  case ContentType_EXTIMAGE: return "EXTIMAGE"
  case ContentType_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
  switch s {
  case "NONE": return ContentType_NONE, nil 
  case "IMAGE": return ContentType_IMAGE, nil 
  case "VIDEO": return ContentType_VIDEO, nil 
  case "AUDIO": return ContentType_AUDIO, nil 
  case "HTML": return ContentType_HTML, nil 
  case "PDF": return ContentType_PDF, nil 
  case "CALL": return ContentType_CALL, nil 
  case "STICKER": return ContentType_STICKER, nil 
  case "PRESENCE": return ContentType_PRESENCE, nil 
  case "GIFT": return ContentType_GIFT, nil 
  case "GROUPBOARD": return ContentType_GROUPBOARD, nil 
  case "APPLINK": return ContentType_APPLINK, nil 
  case "LINK": return ContentType_LINK, nil 
  case "CONTACT": return ContentType_CONTACT, nil 
  case "FILE": return ContentType_FILE, nil 
  case "LOCATION": return ContentType_LOCATION, nil 
  case "POSTNOTIFICATION": return ContentType_POSTNOTIFICATION, nil 
  case "RICH": return ContentType_RICH, nil 
  case "CHATEVENT": return ContentType_CHATEVENT, nil 
  case "MUSIC": return ContentType_MUSIC, nil 
  case "PAYMENT": return ContentType_PAYMENT, nil 
  case "EXTIMAGE": return ContentType_EXTIMAGE, nil 
  case "FLEX": return ContentType_FLEX, nil 
  }
  return ContentType(0), fmt.Errorf("not a valid ContentType string")
}


func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
q, err := ContentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContentType(v)
return nil
}

func (p * ContentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageRelationType int64
const (
  MessageRelationType_FORWARD MessageRelationType = 0
  MessageRelationType_AUTO_REPLY MessageRelationType = 1
  MessageRelationType_SUBORDINATE MessageRelationType = 2
  MessageRelationType_REPLY MessageRelationType = 3
)

func (p MessageRelationType) String() string {
  switch p {
  case MessageRelationType_FORWARD: return "FORWARD"
  case MessageRelationType_AUTO_REPLY: return "AUTO_REPLY"
  case MessageRelationType_SUBORDINATE: return "SUBORDINATE"
  case MessageRelationType_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func MessageRelationTypeFromString(s string) (MessageRelationType, error) {
  switch s {
  case "FORWARD": return MessageRelationType_FORWARD, nil 
  case "AUTO_REPLY": return MessageRelationType_AUTO_REPLY, nil 
  case "SUBORDINATE": return MessageRelationType_SUBORDINATE, nil 
  case "REPLY": return MessageRelationType_REPLY, nil 
  }
  return MessageRelationType(0), fmt.Errorf("not a valid MessageRelationType string")
}


func MessageRelationTypePtr(v MessageRelationType) *MessageRelationType { return &v }

func (p MessageRelationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageRelationType) UnmarshalText(text []byte) error {
q, err := MessageRelationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageRelationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageRelationType(v)
return nil
}

func (p * MessageRelationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RelatedMessageServiceCode int64
const (
  RelatedMessageServiceCode_UNKNOWN RelatedMessageServiceCode = 0
  RelatedMessageServiceCode_TALK RelatedMessageServiceCode = 1
  RelatedMessageServiceCode_SQUARE RelatedMessageServiceCode = 2
)

func (p RelatedMessageServiceCode) String() string {
  switch p {
  case RelatedMessageServiceCode_UNKNOWN: return "UNKNOWN"
  case RelatedMessageServiceCode_TALK: return "TALK"
  case RelatedMessageServiceCode_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func RelatedMessageServiceCodeFromString(s string) (RelatedMessageServiceCode, error) {
  switch s {
  case "UNKNOWN": return RelatedMessageServiceCode_UNKNOWN, nil 
  case "TALK": return RelatedMessageServiceCode_TALK, nil 
  case "SQUARE": return RelatedMessageServiceCode_SQUARE, nil 
  }
  return RelatedMessageServiceCode(0), fmt.Errorf("not a valid RelatedMessageServiceCode string")
}


func RelatedMessageServiceCodePtr(v RelatedMessageServiceCode) *RelatedMessageServiceCode { return &v }

func (p RelatedMessageServiceCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelatedMessageServiceCode) UnmarshalText(text []byte) error {
q, err := RelatedMessageServiceCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelatedMessageServiceCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelatedMessageServiceCode(v)
return nil
}

func (p * RelatedMessageServiceCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppExtensionType int64
const (
  AppExtensionType_SIRI AppExtensionType = 1
  AppExtensionType_GOOGLE_ASSISTANT AppExtensionType = 2
  AppExtensionType_OS_SHARE AppExtensionType = 3
)

func (p AppExtensionType) String() string {
  switch p {
  case AppExtensionType_SIRI: return "SIRI"
  case AppExtensionType_GOOGLE_ASSISTANT: return "GOOGLE_ASSISTANT"
  case AppExtensionType_OS_SHARE: return "OS_SHARE"
  }
  return "<UNSET>"
}

func AppExtensionTypeFromString(s string) (AppExtensionType, error) {
  switch s {
  case "SIRI": return AppExtensionType_SIRI, nil 
  case "GOOGLE_ASSISTANT": return AppExtensionType_GOOGLE_ASSISTANT, nil 
  case "OS_SHARE": return AppExtensionType_OS_SHARE, nil 
  }
  return AppExtensionType(0), fmt.Errorf("not a valid AppExtensionType string")
}


func AppExtensionTypePtr(v AppExtensionType) *AppExtensionType { return &v }

func (p AppExtensionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppExtensionType) UnmarshalText(text []byte) error {
q, err := AppExtensionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppExtensionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppExtensionType(v)
return nil
}

func (p * AppExtensionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatRoomAnnouncementType int64
const (
  ChatRoomAnnouncementType_MESSAGE ChatRoomAnnouncementType = 0
  ChatRoomAnnouncementType_NOTE ChatRoomAnnouncementType = 1
  ChatRoomAnnouncementType_CHANNEL ChatRoomAnnouncementType = 2
)

func (p ChatRoomAnnouncementType) String() string {
  switch p {
  case ChatRoomAnnouncementType_MESSAGE: return "MESSAGE"
  case ChatRoomAnnouncementType_NOTE: return "NOTE"
  case ChatRoomAnnouncementType_CHANNEL: return "CHANNEL"
  }
  return "<UNSET>"
}

func ChatRoomAnnouncementTypeFromString(s string) (ChatRoomAnnouncementType, error) {
  switch s {
  case "MESSAGE": return ChatRoomAnnouncementType_MESSAGE, nil 
  case "NOTE": return ChatRoomAnnouncementType_NOTE, nil 
  case "CHANNEL": return ChatRoomAnnouncementType_CHANNEL, nil 
  }
  return ChatRoomAnnouncementType(0), fmt.Errorf("not a valid ChatRoomAnnouncementType string")
}


func ChatRoomAnnouncementTypePtr(v ChatRoomAnnouncementType) *ChatRoomAnnouncementType { return &v }

func (p ChatRoomAnnouncementType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatRoomAnnouncementType) UnmarshalText(text []byte) error {
q, err := ChatRoomAnnouncementTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatRoomAnnouncementType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatRoomAnnouncementType(v)
return nil
}

func (p * ChatRoomAnnouncementType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DeletePermission int64
const (
  DeletePermission_ANYONE_IN_CHAT DeletePermission = 0
  DeletePermission_CREATOR_ONLY DeletePermission = 1
  DeletePermission_NO_ONE DeletePermission = 2
)

func (p DeletePermission) String() string {
  switch p {
  case DeletePermission_ANYONE_IN_CHAT: return "ANYONE_IN_CHAT"
  case DeletePermission_CREATOR_ONLY: return "CREATOR_ONLY"
  case DeletePermission_NO_ONE: return "NO_ONE"
  }
  return "<UNSET>"
}

func DeletePermissionFromString(s string) (DeletePermission, error) {
  switch s {
  case "ANYONE_IN_CHAT": return DeletePermission_ANYONE_IN_CHAT, nil 
  case "CREATOR_ONLY": return DeletePermission_CREATOR_ONLY, nil 
  case "NO_ONE": return DeletePermission_NO_ONE, nil 
  }
  return DeletePermission(0), fmt.Errorf("not a valid DeletePermission string")
}


func DeletePermissionPtr(v DeletePermission) *DeletePermission { return &v }

func (p DeletePermission) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DeletePermission) UnmarshalText(text []byte) error {
q, err := DeletePermissionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DeletePermission) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DeletePermission(v)
return nil
}

func (p * DeletePermission) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OperationType int64
const (
  OperationType_END_OF_OPERATION OperationType = 0
  OperationType_UPDATE_PROFILE OperationType = 1
  OperationType_NOTIFIED_UPDATE_PROFILE OperationType = 2
  OperationType_REGISTER_USERID OperationType = 3
  OperationType_ADD_CONTACT OperationType = 4
  OperationType_NOTIFIED_ADD_CONTACT OperationType = 5
  OperationType_BLOCK_CONTACT OperationType = 6
  OperationType_UNBLOCK_CONTACT OperationType = 7
  OperationType_NOTIFIED_RECOMMEND_CONTACT OperationType = 8
  OperationType_CREATE_GROUP OperationType = 9
  OperationType_UPDATE_GROUP OperationType = 10
  OperationType_NOTIFIED_UPDATE_GROUP OperationType = 11
  OperationType_INVITE_INTO_GROUP OperationType = 12
  OperationType_NOTIFIED_INVITE_INTO_GROUP OperationType = 13
  OperationType_LEAVE_GROUP OperationType = 14
  OperationType_NOTIFIED_LEAVE_GROUP OperationType = 15
  OperationType_ACCEPT_GROUP_INVITATION OperationType = 16
  OperationType_NOTIFIED_ACCEPT_GROUP_INVITATION OperationType = 17
  OperationType_KICKOUT_FROM_GROUP OperationType = 18
  OperationType_NOTIFIED_KICKOUT_FROM_GROUP OperationType = 19
  OperationType_CREATE_ROOM OperationType = 20
  OperationType_INVITE_INTO_ROOM OperationType = 21
  OperationType_NOTIFIED_INVITE_INTO_ROOM OperationType = 22
  OperationType_LEAVE_ROOM OperationType = 23
  OperationType_NOTIFIED_LEAVE_ROOM OperationType = 24
  OperationType_SEND_MESSAGE OperationType = 25
  OperationType_RECEIVE_MESSAGE OperationType = 26
  OperationType_SEND_MESSAGE_RECEIPT OperationType = 27
  OperationType_RECEIVE_MESSAGE_RECEIPT OperationType = 28
  OperationType_SEND_CONTENT_RECEIPT OperationType = 29
  OperationType_RECEIVE_ANNOUNCEMENT OperationType = 30
  OperationType_CANCEL_INVITATION_GROUP OperationType = 31
  OperationType_NOTIFIED_CANCEL_INVITATION_GROUP OperationType = 32
  OperationType_NOTIFIED_UNREGISTER_USER OperationType = 33
  OperationType_REJECT_GROUP_INVITATION OperationType = 34
  OperationType_NOTIFIED_REJECT_GROUP_INVITATION OperationType = 35
  OperationType_UPDATE_SETTINGS OperationType = 36
  OperationType_NOTIFIED_REGISTER_USER OperationType = 37
  OperationType_INVITE_VIA_EMAIL OperationType = 38
  OperationType_NOTIFIED_REQUEST_RECOVERY OperationType = 39
  OperationType_SEND_CHAT_CHECKED OperationType = 40
  OperationType_SEND_CHAT_REMOVED OperationType = 41
  OperationType_NOTIFIED_FORCE_SYNC OperationType = 42
  OperationType_SEND_CONTENT OperationType = 43
  OperationType_SEND_MESSAGE_MYHOME OperationType = 44
  OperationType_NOTIFIED_UPDATE_CONTENT_PREVIEW OperationType = 45
  OperationType_REMOVE_ALL_MESSAGES OperationType = 46
  OperationType_NOTIFIED_UPDATE_PURCHASES OperationType = 47
  OperationType_DUMMY OperationType = 48
  OperationType_UPDATE_CONTACT OperationType = 49
  OperationType_NOTIFIED_RECEIVED_CALL OperationType = 50
  OperationType_CANCEL_CALL OperationType = 51
  OperationType_NOTIFIED_REDIRECT OperationType = 52
  OperationType_NOTIFIED_CHANNEL_SYNC OperationType = 53
  OperationType_FAILED_SEND_MESSAGE OperationType = 54
  OperationType_NOTIFIED_READ_MESSAGE OperationType = 55
  OperationType_FAILED_EMAIL_CONFIRMATION OperationType = 56
  OperationType_NOTIFIED_CHAT_CONTENT OperationType = 58
  OperationType_NOTIFIED_PUSH_NOTICENTER_ITEM OperationType = 59
  OperationType_NOTIFIED_JOIN_CHAT OperationType = 60
  OperationType_NOTIFIED_LEAVE_CHAT OperationType = 61
  OperationType_NOTIFIED_TYPING OperationType = 62
  OperationType_FRIEND_REQUEST_ACCEPTED OperationType = 63
  OperationType_DESTROY_MESSAGE OperationType = 64
  OperationType_NOTIFIED_DESTROY_MESSAGE OperationType = 65
  OperationType_UPDATE_PUBLICKEYCHAIN OperationType = 66
  OperationType_NOTIFIED_UPDATE_PUBLICKEYCHAIN OperationType = 67
  OperationType_NOTIFIED_BLOCK_CONTACT OperationType = 68
  OperationType_NOTIFIED_UNBLOCK_CONTACT OperationType = 69
  OperationType_UPDATE_GROUPPREFERENCE OperationType = 70
  OperationType_NOTIFIED_PAYMENT_EVENT OperationType = 71
  OperationType_REGISTER_E2EE_PUBLICKEY OperationType = 72
  OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ OperationType = 73
  OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP OperationType = 74
  OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ OperationType = 75
  OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OperationType = 76
  OperationType_NOTIFIED_E2EE_KEY_UPDATE OperationType = 77
  OperationType_NOTIFIED_BUDDY_UPDATE_PROFILE OperationType = 78
  OperationType_NOTIFIED_UPDATE_LINEAT_TABS OperationType = 79
  OperationType_UPDATE_ROOM OperationType = 80
  OperationType_NOTIFIED_BEACON_DETECTED OperationType = 81
  OperationType_UPDATE_EXTENDED_PROFILE OperationType = 82
  OperationType_ADD_FOLLOW OperationType = 83
  OperationType_NOTIFIED_ADD_FOLLOW OperationType = 84
  OperationType_DELETE_FOLLOW OperationType = 85
  OperationType_NOTIFIED_DELETE_FOLLOW OperationType = 86
  OperationType_UPDATE_TIMELINE_SETTINGS OperationType = 87
  OperationType_NOTIFIED_FRIEND_REQUEST OperationType = 88
  OperationType_UPDATE_RINGBACK_TONE OperationType = 89
  OperationType_NOTIFIED_POSTBACK OperationType = 90
  OperationType_RECEIVE_READ_WATERMARK OperationType = 91
  OperationType_NOTIFIED_MESSAGE_DELIVERED OperationType = 92
  OperationType_NOTIFIED_UPDATE_CHAT_BAR OperationType = 93
  OperationType_NOTIFIED_CHATAPP_INSTALLED OperationType = 94
  OperationType_NOTIFIED_CHATAPP_UPDATED OperationType = 95
  OperationType_NOTIFIED_CHATAPP_NEW_MARK OperationType = 96
  OperationType_NOTIFIED_CHATAPP_DELETED OperationType = 97
  OperationType_NOTIFIED_CHATAPP_SYNC OperationType = 98
  OperationType_NOTIFIED_UPDATE_MESSAGE OperationType = 99
  OperationType_UPDATE_CHATROOMBGM OperationType = 100
  OperationType_NOTIFIED_UPDATE_CHATROOMBGM OperationType = 101
  OperationType_UPDATE_RINGTONE OperationType = 102
  OperationType_UPDATE_USER_SETTINGS OperationType = 118
  OperationType_NOTIFIED_UPDATE_STATUS_BAR OperationType = 119
  OperationType_CREATE_CHAT OperationType = 120
  OperationType_UPDATE_CHAT OperationType = 121
  OperationType_NOTIFIED_UPDATE_CHAT OperationType = 122
  OperationType_INVITE_INTO_CHAT OperationType = 123
  OperationType_NOTIFIED_INVITE_INTO_CHAT OperationType = 124
  OperationType_CANCEL_CHAT_INVITATION OperationType = 125
  OperationType_DELETE_SELF_FROM_CHAT OperationType = 127
  OperationType_NOTIFIED_DELETE_SELF_FROM_CHAT OperationType = 128
  OperationType_NOTIFIED_ACCEPT_CHAT_INVITATION OperationType = 130
  OperationType_DELETE_OTHER_FROM_CHAT OperationType = 132
  OperationType_NOTIFIED_DELETE_OTHER_FROM_CHAT OperationType = 133
  OperationType_NOTIFIED_CONTACT_CALENDAR_EVENT OperationType = 134
  OperationType_UPDATE_THINGS_OPERATIONS OperationType = 136
)

func (p OperationType) String() string {
  switch p {
  case OperationType_END_OF_OPERATION: return "END_OF_OPERATION"
  case OperationType_UPDATE_PROFILE: return "UPDATE_PROFILE"
  case OperationType_NOTIFIED_UPDATE_PROFILE: return "NOTIFIED_UPDATE_PROFILE"
  case OperationType_REGISTER_USERID: return "REGISTER_USERID"
  case OperationType_ADD_CONTACT: return "ADD_CONTACT"
  case OperationType_NOTIFIED_ADD_CONTACT: return "NOTIFIED_ADD_CONTACT"
  case OperationType_BLOCK_CONTACT: return "BLOCK_CONTACT"
  case OperationType_UNBLOCK_CONTACT: return "UNBLOCK_CONTACT"
  case OperationType_NOTIFIED_RECOMMEND_CONTACT: return "NOTIFIED_RECOMMEND_CONTACT"
  case OperationType_CREATE_GROUP: return "CREATE_GROUP"
  case OperationType_UPDATE_GROUP: return "UPDATE_GROUP"
  case OperationType_NOTIFIED_UPDATE_GROUP: return "NOTIFIED_UPDATE_GROUP"
  case OperationType_INVITE_INTO_GROUP: return "INVITE_INTO_GROUP"
  case OperationType_NOTIFIED_INVITE_INTO_GROUP: return "NOTIFIED_INVITE_INTO_GROUP"
  case OperationType_LEAVE_GROUP: return "LEAVE_GROUP"
  case OperationType_NOTIFIED_LEAVE_GROUP: return "NOTIFIED_LEAVE_GROUP"
  case OperationType_ACCEPT_GROUP_INVITATION: return "ACCEPT_GROUP_INVITATION"
  case OperationType_NOTIFIED_ACCEPT_GROUP_INVITATION: return "NOTIFIED_ACCEPT_GROUP_INVITATION"
  case OperationType_KICKOUT_FROM_GROUP: return "KICKOUT_FROM_GROUP"
  case OperationType_NOTIFIED_KICKOUT_FROM_GROUP: return "NOTIFIED_KICKOUT_FROM_GROUP"
  case OperationType_CREATE_ROOM: return "CREATE_ROOM"
  case OperationType_INVITE_INTO_ROOM: return "INVITE_INTO_ROOM"
  case OperationType_NOTIFIED_INVITE_INTO_ROOM: return "NOTIFIED_INVITE_INTO_ROOM"
  case OperationType_LEAVE_ROOM: return "LEAVE_ROOM"
  case OperationType_NOTIFIED_LEAVE_ROOM: return "NOTIFIED_LEAVE_ROOM"
  case OperationType_SEND_MESSAGE: return "SEND_MESSAGE"
  case OperationType_RECEIVE_MESSAGE: return "RECEIVE_MESSAGE"
  case OperationType_SEND_MESSAGE_RECEIPT: return "SEND_MESSAGE_RECEIPT"
  case OperationType_RECEIVE_MESSAGE_RECEIPT: return "RECEIVE_MESSAGE_RECEIPT"
  case OperationType_SEND_CONTENT_RECEIPT: return "SEND_CONTENT_RECEIPT"
  case OperationType_RECEIVE_ANNOUNCEMENT: return "RECEIVE_ANNOUNCEMENT"
  case OperationType_CANCEL_INVITATION_GROUP: return "CANCEL_INVITATION_GROUP"
  case OperationType_NOTIFIED_CANCEL_INVITATION_GROUP: return "NOTIFIED_CANCEL_INVITATION_GROUP"
  case OperationType_NOTIFIED_UNREGISTER_USER: return "NOTIFIED_UNREGISTER_USER"
  case OperationType_REJECT_GROUP_INVITATION: return "REJECT_GROUP_INVITATION"
  case OperationType_NOTIFIED_REJECT_GROUP_INVITATION: return "NOTIFIED_REJECT_GROUP_INVITATION"
  case OperationType_UPDATE_SETTINGS: return "UPDATE_SETTINGS"
  case OperationType_NOTIFIED_REGISTER_USER: return "NOTIFIED_REGISTER_USER"
  case OperationType_INVITE_VIA_EMAIL: return "INVITE_VIA_EMAIL"
  case OperationType_NOTIFIED_REQUEST_RECOVERY: return "NOTIFIED_REQUEST_RECOVERY"
  case OperationType_SEND_CHAT_CHECKED: return "SEND_CHAT_CHECKED"
  case OperationType_SEND_CHAT_REMOVED: return "SEND_CHAT_REMOVED"
  case OperationType_NOTIFIED_FORCE_SYNC: return "NOTIFIED_FORCE_SYNC"
  case OperationType_SEND_CONTENT: return "SEND_CONTENT"
  case OperationType_SEND_MESSAGE_MYHOME: return "SEND_MESSAGE_MYHOME"
  case OperationType_NOTIFIED_UPDATE_CONTENT_PREVIEW: return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  case OperationType_REMOVE_ALL_MESSAGES: return "REMOVE_ALL_MESSAGES"
  case OperationType_NOTIFIED_UPDATE_PURCHASES: return "NOTIFIED_UPDATE_PURCHASES"
  case OperationType_DUMMY: return "DUMMY"
  case OperationType_UPDATE_CONTACT: return "UPDATE_CONTACT"
  case OperationType_NOTIFIED_RECEIVED_CALL: return "NOTIFIED_RECEIVED_CALL"
  case OperationType_CANCEL_CALL: return "CANCEL_CALL"
  case OperationType_NOTIFIED_REDIRECT: return "NOTIFIED_REDIRECT"
  case OperationType_NOTIFIED_CHANNEL_SYNC: return "NOTIFIED_CHANNEL_SYNC"
  case OperationType_FAILED_SEND_MESSAGE: return "FAILED_SEND_MESSAGE"
  case OperationType_NOTIFIED_READ_MESSAGE: return "NOTIFIED_READ_MESSAGE"
  case OperationType_FAILED_EMAIL_CONFIRMATION: return "FAILED_EMAIL_CONFIRMATION"
  case OperationType_NOTIFIED_CHAT_CONTENT: return "NOTIFIED_CHAT_CONTENT"
  case OperationType_NOTIFIED_PUSH_NOTICENTER_ITEM: return "NOTIFIED_PUSH_NOTICENTER_ITEM"
  case OperationType_NOTIFIED_JOIN_CHAT: return "NOTIFIED_JOIN_CHAT"
  case OperationType_NOTIFIED_LEAVE_CHAT: return "NOTIFIED_LEAVE_CHAT"
  case OperationType_NOTIFIED_TYPING: return "NOTIFIED_TYPING"
  case OperationType_FRIEND_REQUEST_ACCEPTED: return "FRIEND_REQUEST_ACCEPTED"
  case OperationType_DESTROY_MESSAGE: return "DESTROY_MESSAGE"
  case OperationType_NOTIFIED_DESTROY_MESSAGE: return "NOTIFIED_DESTROY_MESSAGE"
  case OperationType_UPDATE_PUBLICKEYCHAIN: return "UPDATE_PUBLICKEYCHAIN"
  case OperationType_NOTIFIED_UPDATE_PUBLICKEYCHAIN: return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  case OperationType_NOTIFIED_BLOCK_CONTACT: return "NOTIFIED_BLOCK_CONTACT"
  case OperationType_NOTIFIED_UNBLOCK_CONTACT: return "NOTIFIED_UNBLOCK_CONTACT"
  case OperationType_UPDATE_GROUPPREFERENCE: return "UPDATE_GROUPPREFERENCE"
  case OperationType_NOTIFIED_PAYMENT_EVENT: return "NOTIFIED_PAYMENT_EVENT"
  case OperationType_REGISTER_E2EE_PUBLICKEY: return "REGISTER_E2EE_PUBLICKEY"
  case OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ: return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  case OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP: return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  case OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ: return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  case OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP: return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  case OperationType_NOTIFIED_E2EE_KEY_UPDATE: return "NOTIFIED_E2EE_KEY_UPDATE"
  case OperationType_NOTIFIED_BUDDY_UPDATE_PROFILE: return "NOTIFIED_BUDDY_UPDATE_PROFILE"
  case OperationType_NOTIFIED_UPDATE_LINEAT_TABS: return "NOTIFIED_UPDATE_LINEAT_TABS"
  case OperationType_UPDATE_ROOM: return "UPDATE_ROOM"
  case OperationType_NOTIFIED_BEACON_DETECTED: return "NOTIFIED_BEACON_DETECTED"
  case OperationType_UPDATE_EXTENDED_PROFILE: return "UPDATE_EXTENDED_PROFILE"
  case OperationType_ADD_FOLLOW: return "ADD_FOLLOW"
  case OperationType_NOTIFIED_ADD_FOLLOW: return "NOTIFIED_ADD_FOLLOW"
  case OperationType_DELETE_FOLLOW: return "DELETE_FOLLOW"
  case OperationType_NOTIFIED_DELETE_FOLLOW: return "NOTIFIED_DELETE_FOLLOW"
  case OperationType_UPDATE_TIMELINE_SETTINGS: return "UPDATE_TIMELINE_SETTINGS"
  case OperationType_NOTIFIED_FRIEND_REQUEST: return "NOTIFIED_FRIEND_REQUEST"
  case OperationType_UPDATE_RINGBACK_TONE: return "UPDATE_RINGBACK_TONE"
  case OperationType_NOTIFIED_POSTBACK: return "NOTIFIED_POSTBACK"
  case OperationType_RECEIVE_READ_WATERMARK: return "RECEIVE_READ_WATERMARK"
  case OperationType_NOTIFIED_MESSAGE_DELIVERED: return "NOTIFIED_MESSAGE_DELIVERED"
  case OperationType_NOTIFIED_UPDATE_CHAT_BAR: return "NOTIFIED_UPDATE_CHAT_BAR"
  case OperationType_NOTIFIED_CHATAPP_INSTALLED: return "NOTIFIED_CHATAPP_INSTALLED"
  case OperationType_NOTIFIED_CHATAPP_UPDATED: return "NOTIFIED_CHATAPP_UPDATED"
  case OperationType_NOTIFIED_CHATAPP_NEW_MARK: return "NOTIFIED_CHATAPP_NEW_MARK"
  case OperationType_NOTIFIED_CHATAPP_DELETED: return "NOTIFIED_CHATAPP_DELETED"
  case OperationType_NOTIFIED_CHATAPP_SYNC: return "NOTIFIED_CHATAPP_SYNC"
  case OperationType_NOTIFIED_UPDATE_MESSAGE: return "NOTIFIED_UPDATE_MESSAGE"
  case OperationType_UPDATE_CHATROOMBGM: return "UPDATE_CHATROOMBGM"
  case OperationType_NOTIFIED_UPDATE_CHATROOMBGM: return "NOTIFIED_UPDATE_CHATROOMBGM"
  case OperationType_UPDATE_RINGTONE: return "UPDATE_RINGTONE"
  case OperationType_UPDATE_USER_SETTINGS: return "UPDATE_USER_SETTINGS"
  case OperationType_NOTIFIED_UPDATE_STATUS_BAR: return "NOTIFIED_UPDATE_STATUS_BAR"
  case OperationType_CREATE_CHAT: return "CREATE_CHAT"
  case OperationType_UPDATE_CHAT: return "UPDATE_CHAT"
  case OperationType_NOTIFIED_UPDATE_CHAT: return "NOTIFIED_UPDATE_CHAT"
  case OperationType_INVITE_INTO_CHAT: return "INVITE_INTO_CHAT"
  case OperationType_NOTIFIED_INVITE_INTO_CHAT: return "NOTIFIED_INVITE_INTO_CHAT"
  case OperationType_CANCEL_CHAT_INVITATION: return "CANCEL_CHAT_INVITATION"
  case OperationType_DELETE_SELF_FROM_CHAT: return "DELETE_SELF_FROM_CHAT"
  case OperationType_NOTIFIED_DELETE_SELF_FROM_CHAT: return "NOTIFIED_DELETE_SELF_FROM_CHAT"
  case OperationType_NOTIFIED_ACCEPT_CHAT_INVITATION: return "NOTIFIED_ACCEPT_CHAT_INVITATION"
  case OperationType_DELETE_OTHER_FROM_CHAT: return "DELETE_OTHER_FROM_CHAT"
  case OperationType_NOTIFIED_DELETE_OTHER_FROM_CHAT: return "NOTIFIED_DELETE_OTHER_FROM_CHAT"
  case OperationType_NOTIFIED_CONTACT_CALENDAR_EVENT: return "NOTIFIED_CONTACT_CALENDAR_EVENT"
  case OperationType_UPDATE_THINGS_OPERATIONS: return "UPDATE_THINGS_OPERATIONS"
  }
  return "<UNSET>"
}

func OperationTypeFromString(s string) (OperationType, error) {
  switch s {
  case "END_OF_OPERATION": return OperationType_END_OF_OPERATION, nil 
  case "UPDATE_PROFILE": return OperationType_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_PROFILE": return OperationType_NOTIFIED_UPDATE_PROFILE, nil 
  case "REGISTER_USERID": return OperationType_REGISTER_USERID, nil 
  case "ADD_CONTACT": return OperationType_ADD_CONTACT, nil 
  case "NOTIFIED_ADD_CONTACT": return OperationType_NOTIFIED_ADD_CONTACT, nil 
  case "BLOCK_CONTACT": return OperationType_BLOCK_CONTACT, nil 
  case "UNBLOCK_CONTACT": return OperationType_UNBLOCK_CONTACT, nil 
  case "NOTIFIED_RECOMMEND_CONTACT": return OperationType_NOTIFIED_RECOMMEND_CONTACT, nil 
  case "CREATE_GROUP": return OperationType_CREATE_GROUP, nil 
  case "UPDATE_GROUP": return OperationType_UPDATE_GROUP, nil 
  case "NOTIFIED_UPDATE_GROUP": return OperationType_NOTIFIED_UPDATE_GROUP, nil 
  case "INVITE_INTO_GROUP": return OperationType_INVITE_INTO_GROUP, nil 
  case "NOTIFIED_INVITE_INTO_GROUP": return OperationType_NOTIFIED_INVITE_INTO_GROUP, nil 
  case "LEAVE_GROUP": return OperationType_LEAVE_GROUP, nil 
  case "NOTIFIED_LEAVE_GROUP": return OperationType_NOTIFIED_LEAVE_GROUP, nil 
  case "ACCEPT_GROUP_INVITATION": return OperationType_ACCEPT_GROUP_INVITATION, nil 
  case "NOTIFIED_ACCEPT_GROUP_INVITATION": return OperationType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil 
  case "KICKOUT_FROM_GROUP": return OperationType_KICKOUT_FROM_GROUP, nil 
  case "NOTIFIED_KICKOUT_FROM_GROUP": return OperationType_NOTIFIED_KICKOUT_FROM_GROUP, nil 
  case "CREATE_ROOM": return OperationType_CREATE_ROOM, nil 
  case "INVITE_INTO_ROOM": return OperationType_INVITE_INTO_ROOM, nil 
  case "NOTIFIED_INVITE_INTO_ROOM": return OperationType_NOTIFIED_INVITE_INTO_ROOM, nil 
  case "LEAVE_ROOM": return OperationType_LEAVE_ROOM, nil 
  case "NOTIFIED_LEAVE_ROOM": return OperationType_NOTIFIED_LEAVE_ROOM, nil 
  case "SEND_MESSAGE": return OperationType_SEND_MESSAGE, nil 
  case "RECEIVE_MESSAGE": return OperationType_RECEIVE_MESSAGE, nil 
  case "SEND_MESSAGE_RECEIPT": return OperationType_SEND_MESSAGE_RECEIPT, nil 
  case "RECEIVE_MESSAGE_RECEIPT": return OperationType_RECEIVE_MESSAGE_RECEIPT, nil 
  case "SEND_CONTENT_RECEIPT": return OperationType_SEND_CONTENT_RECEIPT, nil 
  case "RECEIVE_ANNOUNCEMENT": return OperationType_RECEIVE_ANNOUNCEMENT, nil 
  case "CANCEL_INVITATION_GROUP": return OperationType_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_CANCEL_INVITATION_GROUP": return OperationType_NOTIFIED_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_UNREGISTER_USER": return OperationType_NOTIFIED_UNREGISTER_USER, nil 
  case "REJECT_GROUP_INVITATION": return OperationType_REJECT_GROUP_INVITATION, nil 
  case "NOTIFIED_REJECT_GROUP_INVITATION": return OperationType_NOTIFIED_REJECT_GROUP_INVITATION, nil 
  case "UPDATE_SETTINGS": return OperationType_UPDATE_SETTINGS, nil 
  case "NOTIFIED_REGISTER_USER": return OperationType_NOTIFIED_REGISTER_USER, nil 
  case "INVITE_VIA_EMAIL": return OperationType_INVITE_VIA_EMAIL, nil 
  case "NOTIFIED_REQUEST_RECOVERY": return OperationType_NOTIFIED_REQUEST_RECOVERY, nil 
  case "SEND_CHAT_CHECKED": return OperationType_SEND_CHAT_CHECKED, nil 
  case "SEND_CHAT_REMOVED": return OperationType_SEND_CHAT_REMOVED, nil 
  case "NOTIFIED_FORCE_SYNC": return OperationType_NOTIFIED_FORCE_SYNC, nil 
  case "SEND_CONTENT": return OperationType_SEND_CONTENT, nil 
  case "SEND_MESSAGE_MYHOME": return OperationType_SEND_MESSAGE_MYHOME, nil 
  case "NOTIFIED_UPDATE_CONTENT_PREVIEW": return OperationType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil 
  case "REMOVE_ALL_MESSAGES": return OperationType_REMOVE_ALL_MESSAGES, nil 
  case "NOTIFIED_UPDATE_PURCHASES": return OperationType_NOTIFIED_UPDATE_PURCHASES, nil 
  case "DUMMY": return OperationType_DUMMY, nil 
  case "UPDATE_CONTACT": return OperationType_UPDATE_CONTACT, nil 
  case "NOTIFIED_RECEIVED_CALL": return OperationType_NOTIFIED_RECEIVED_CALL, nil 
  case "CANCEL_CALL": return OperationType_CANCEL_CALL, nil 
  case "NOTIFIED_REDIRECT": return OperationType_NOTIFIED_REDIRECT, nil 
  case "NOTIFIED_CHANNEL_SYNC": return OperationType_NOTIFIED_CHANNEL_SYNC, nil 
  case "FAILED_SEND_MESSAGE": return OperationType_FAILED_SEND_MESSAGE, nil 
  case "NOTIFIED_READ_MESSAGE": return OperationType_NOTIFIED_READ_MESSAGE, nil 
  case "FAILED_EMAIL_CONFIRMATION": return OperationType_FAILED_EMAIL_CONFIRMATION, nil 
  case "NOTIFIED_CHAT_CONTENT": return OperationType_NOTIFIED_CHAT_CONTENT, nil 
  case "NOTIFIED_PUSH_NOTICENTER_ITEM": return OperationType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil 
  case "NOTIFIED_JOIN_CHAT": return OperationType_NOTIFIED_JOIN_CHAT, nil 
  case "NOTIFIED_LEAVE_CHAT": return OperationType_NOTIFIED_LEAVE_CHAT, nil 
  case "NOTIFIED_TYPING": return OperationType_NOTIFIED_TYPING, nil 
  case "FRIEND_REQUEST_ACCEPTED": return OperationType_FRIEND_REQUEST_ACCEPTED, nil 
  case "DESTROY_MESSAGE": return OperationType_DESTROY_MESSAGE, nil 
  case "NOTIFIED_DESTROY_MESSAGE": return OperationType_NOTIFIED_DESTROY_MESSAGE, nil 
  case "UPDATE_PUBLICKEYCHAIN": return OperationType_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_UPDATE_PUBLICKEYCHAIN": return OperationType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_BLOCK_CONTACT": return OperationType_NOTIFIED_BLOCK_CONTACT, nil 
  case "NOTIFIED_UNBLOCK_CONTACT": return OperationType_NOTIFIED_UNBLOCK_CONTACT, nil 
  case "UPDATE_GROUPPREFERENCE": return OperationType_UPDATE_GROUPPREFERENCE, nil 
  case "NOTIFIED_PAYMENT_EVENT": return OperationType_NOTIFIED_PAYMENT_EVENT, nil 
  case "REGISTER_E2EE_PUBLICKEY": return OperationType_REGISTER_E2EE_PUBLICKEY, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": return OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": return OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": return OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": return OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil 
  case "NOTIFIED_E2EE_KEY_UPDATE": return OperationType_NOTIFIED_E2EE_KEY_UPDATE, nil 
  case "NOTIFIED_BUDDY_UPDATE_PROFILE": return OperationType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_LINEAT_TABS": return OperationType_NOTIFIED_UPDATE_LINEAT_TABS, nil 
  case "UPDATE_ROOM": return OperationType_UPDATE_ROOM, nil 
  case "NOTIFIED_BEACON_DETECTED": return OperationType_NOTIFIED_BEACON_DETECTED, nil 
  case "UPDATE_EXTENDED_PROFILE": return OperationType_UPDATE_EXTENDED_PROFILE, nil 
  case "ADD_FOLLOW": return OperationType_ADD_FOLLOW, nil 
  case "NOTIFIED_ADD_FOLLOW": return OperationType_NOTIFIED_ADD_FOLLOW, nil 
  case "DELETE_FOLLOW": return OperationType_DELETE_FOLLOW, nil 
  case "NOTIFIED_DELETE_FOLLOW": return OperationType_NOTIFIED_DELETE_FOLLOW, nil 
  case "UPDATE_TIMELINE_SETTINGS": return OperationType_UPDATE_TIMELINE_SETTINGS, nil 
  case "NOTIFIED_FRIEND_REQUEST": return OperationType_NOTIFIED_FRIEND_REQUEST, nil 
  case "UPDATE_RINGBACK_TONE": return OperationType_UPDATE_RINGBACK_TONE, nil 
  case "NOTIFIED_POSTBACK": return OperationType_NOTIFIED_POSTBACK, nil 
  case "RECEIVE_READ_WATERMARK": return OperationType_RECEIVE_READ_WATERMARK, nil 
  case "NOTIFIED_MESSAGE_DELIVERED": return OperationType_NOTIFIED_MESSAGE_DELIVERED, nil 
  case "NOTIFIED_UPDATE_CHAT_BAR": return OperationType_NOTIFIED_UPDATE_CHAT_BAR, nil 
  case "NOTIFIED_CHATAPP_INSTALLED": return OperationType_NOTIFIED_CHATAPP_INSTALLED, nil 
  case "NOTIFIED_CHATAPP_UPDATED": return OperationType_NOTIFIED_CHATAPP_UPDATED, nil 
  case "NOTIFIED_CHATAPP_NEW_MARK": return OperationType_NOTIFIED_CHATAPP_NEW_MARK, nil 
  case "NOTIFIED_CHATAPP_DELETED": return OperationType_NOTIFIED_CHATAPP_DELETED, nil 
  case "NOTIFIED_CHATAPP_SYNC": return OperationType_NOTIFIED_CHATAPP_SYNC, nil 
  case "NOTIFIED_UPDATE_MESSAGE": return OperationType_NOTIFIED_UPDATE_MESSAGE, nil 
  case "UPDATE_CHATROOMBGM": return OperationType_UPDATE_CHATROOMBGM, nil 
  case "NOTIFIED_UPDATE_CHATROOMBGM": return OperationType_NOTIFIED_UPDATE_CHATROOMBGM, nil 
  case "UPDATE_RINGTONE": return OperationType_UPDATE_RINGTONE, nil 
  case "UPDATE_USER_SETTINGS": return OperationType_UPDATE_USER_SETTINGS, nil 
  case "NOTIFIED_UPDATE_STATUS_BAR": return OperationType_NOTIFIED_UPDATE_STATUS_BAR, nil 
  case "CREATE_CHAT": return OperationType_CREATE_CHAT, nil 
  case "UPDATE_CHAT": return OperationType_UPDATE_CHAT, nil 
  case "NOTIFIED_UPDATE_CHAT": return OperationType_NOTIFIED_UPDATE_CHAT, nil 
  case "INVITE_INTO_CHAT": return OperationType_INVITE_INTO_CHAT, nil 
  case "NOTIFIED_INVITE_INTO_CHAT": return OperationType_NOTIFIED_INVITE_INTO_CHAT, nil 
  case "CANCEL_CHAT_INVITATION": return OperationType_CANCEL_CHAT_INVITATION, nil 
  case "DELETE_SELF_FROM_CHAT": return OperationType_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_SELF_FROM_CHAT": return OperationType_NOTIFIED_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_ACCEPT_CHAT_INVITATION": return OperationType_NOTIFIED_ACCEPT_CHAT_INVITATION, nil 
  case "DELETE_OTHER_FROM_CHAT": return OperationType_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_OTHER_FROM_CHAT": return OperationType_NOTIFIED_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_CONTACT_CALENDAR_EVENT": return OperationType_NOTIFIED_CONTACT_CALENDAR_EVENT, nil 
  case "UPDATE_THINGS_OPERATIONS": return OperationType_UPDATE_THINGS_OPERATIONS, nil 
  }
  return OperationType(0), fmt.Errorf("not a valid OperationType string")
}


func OperationTypePtr(v OperationType) *OperationType { return &v }

func (p OperationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OperationType) UnmarshalText(text []byte) error {
q, err := OperationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OperationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OperationType(v)
return nil
}

func (p * OperationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OperationStatus int64
const (
  OperationStatus_NORMAL OperationStatus = 0
  OperationStatus_ALERT_DISABLED OperationStatus = 1
  OperationStatus_ALWAYS OperationStatus = 2
)

func (p OperationStatus) String() string {
  switch p {
  case OperationStatus_NORMAL: return "NORMAL"
  case OperationStatus_ALERT_DISABLED: return "ALERT_DISABLED"
  case OperationStatus_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func OperationStatusFromString(s string) (OperationStatus, error) {
  switch s {
  case "NORMAL": return OperationStatus_NORMAL, nil 
  case "ALERT_DISABLED": return OperationStatus_ALERT_DISABLED, nil 
  case "ALWAYS": return OperationStatus_ALWAYS, nil 
  }
  return OperationStatus(0), fmt.Errorf("not a valid OperationStatus string")
}


func OperationStatusPtr(v OperationStatus) *OperationStatus { return &v }

func (p OperationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OperationStatus) UnmarshalText(text []byte) error {
q, err := OperationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OperationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OperationStatus(v)
return nil
}

func (p * OperationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C60759oi int64
const (
  C60759oi_FACEBOOK C60759oi = 1
  C60759oi_SINA C60759oi = 2
  C60759oi_RENREN C60759oi = 3
  C60759oi_FEIXIN C60759oi = 4
  C60759oi_BBM C60759oi = 5
  C60759oi_APPLE C60759oi = 6
)

func (p C60759oi) String() string {
  switch p {
  case C60759oi_FACEBOOK: return "FACEBOOK"
  case C60759oi_SINA: return "SINA"
  case C60759oi_RENREN: return "RENREN"
  case C60759oi_FEIXIN: return "FEIXIN"
  case C60759oi_BBM: return "BBM"
  case C60759oi_APPLE: return "APPLE"
  }
  return "<UNSET>"
}

func C60759oiFromString(s string) (C60759oi, error) {
  switch s {
  case "FACEBOOK": return C60759oi_FACEBOOK, nil 
  case "SINA": return C60759oi_SINA, nil 
  case "RENREN": return C60759oi_RENREN, nil 
  case "FEIXIN": return C60759oi_FEIXIN, nil 
  case "BBM": return C60759oi_BBM, nil 
  case "APPLE": return C60759oi_APPLE, nil 
  }
  return C60759oi(0), fmt.Errorf("not a valid C60759oi string")
}


func C60759oiPtr(v C60759oi) *C60759oi { return &v }

func (p C60759oi) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C60759oi) UnmarshalText(text []byte) error {
q, err := C60759oiFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C60759oi) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C60759oi(v)
return nil
}

func (p * C60759oi) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationCheckType int64
const (
  AccountMigrationCheckType_SKIP AccountMigrationCheckType = 0
  AccountMigrationCheckType_PINCODE AccountMigrationCheckType = 1
  AccountMigrationCheckType_SECURITY_CENTER AccountMigrationCheckType = 2
)

func (p AccountMigrationCheckType) String() string {
  switch p {
  case AccountMigrationCheckType_SKIP: return "SKIP"
  case AccountMigrationCheckType_PINCODE: return "PINCODE"
  case AccountMigrationCheckType_SECURITY_CENTER: return "SECURITY_CENTER"
  }
  return "<UNSET>"
}

func AccountMigrationCheckTypeFromString(s string) (AccountMigrationCheckType, error) {
  switch s {
  case "SKIP": return AccountMigrationCheckType_SKIP, nil 
  case "PINCODE": return AccountMigrationCheckType_PINCODE, nil 
  case "SECURITY_CENTER": return AccountMigrationCheckType_SECURITY_CENTER, nil 
  }
  return AccountMigrationCheckType(0), fmt.Errorf("not a valid AccountMigrationCheckType string")
}


func AccountMigrationCheckTypePtr(v AccountMigrationCheckType) *AccountMigrationCheckType { return &v }

func (p AccountMigrationCheckType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationCheckType) UnmarshalText(text []byte) error {
q, err := AccountMigrationCheckTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationCheckType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationCheckType(v)
return nil
}

func (p * AccountMigrationCheckType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type YearPrivacyLevelType int64
const (
  YearPrivacyLevelType_PUBLIC YearPrivacyLevelType = 0
  YearPrivacyLevelType_PRIVATE YearPrivacyLevelType = 1
)

func (p YearPrivacyLevelType) String() string {
  switch p {
  case YearPrivacyLevelType_PUBLIC: return "PUBLIC"
  case YearPrivacyLevelType_PRIVATE: return "PRIVATE"
  }
  return "<UNSET>"
}

func YearPrivacyLevelTypeFromString(s string) (YearPrivacyLevelType, error) {
  switch s {
  case "PUBLIC": return YearPrivacyLevelType_PUBLIC, nil 
  case "PRIVATE": return YearPrivacyLevelType_PRIVATE, nil 
  }
  return YearPrivacyLevelType(0), fmt.Errorf("not a valid YearPrivacyLevelType string")
}


func YearPrivacyLevelTypePtr(v YearPrivacyLevelType) *YearPrivacyLevelType { return &v }

func (p YearPrivacyLevelType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *YearPrivacyLevelType) UnmarshalText(text []byte) error {
q, err := YearPrivacyLevelTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *YearPrivacyLevelType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = YearPrivacyLevelType(v)
return nil
}

func (p * YearPrivacyLevelType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacySharePersonalInfoToFriends int64
const (
  PrivacySharePersonalInfoToFriends_NEVER_SHOW PrivacySharePersonalInfoToFriends = 0
  PrivacySharePersonalInfoToFriends_ONE_WAY PrivacySharePersonalInfoToFriends = 1
  PrivacySharePersonalInfoToFriends_MUTUAL PrivacySharePersonalInfoToFriends = 2
)

func (p PrivacySharePersonalInfoToFriends) String() string {
  switch p {
  case PrivacySharePersonalInfoToFriends_NEVER_SHOW: return "NEVER_SHOW"
  case PrivacySharePersonalInfoToFriends_ONE_WAY: return "ONE_WAY"
  case PrivacySharePersonalInfoToFriends_MUTUAL: return "MUTUAL"
  }
  return "<UNSET>"
}

func PrivacySharePersonalInfoToFriendsFromString(s string) (PrivacySharePersonalInfoToFriends, error) {
  switch s {
  case "NEVER_SHOW": return PrivacySharePersonalInfoToFriends_NEVER_SHOW, nil 
  case "ONE_WAY": return PrivacySharePersonalInfoToFriends_ONE_WAY, nil 
  case "MUTUAL": return PrivacySharePersonalInfoToFriends_MUTUAL, nil 
  }
  return PrivacySharePersonalInfoToFriends(0), fmt.Errorf("not a valid PrivacySharePersonalInfoToFriends string")
}


func PrivacySharePersonalInfoToFriendsPtr(v PrivacySharePersonalInfoToFriends) *PrivacySharePersonalInfoToFriends { return &v }

func (p PrivacySharePersonalInfoToFriends) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacySharePersonalInfoToFriends) UnmarshalText(text []byte) error {
q, err := PrivacySharePersonalInfoToFriendsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacySharePersonalInfoToFriends) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacySharePersonalInfoToFriends(v)
return nil
}

func (p * PrivacySharePersonalInfoToFriends) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyAgeResult_ int64
const (
  PrivacyAgeResult__OVER PrivacyAgeResult_ = 1
  PrivacyAgeResult__UNDER PrivacyAgeResult_ = 2
  PrivacyAgeResult__UNDEFINED PrivacyAgeResult_ = 3
)

func (p PrivacyAgeResult_) String() string {
  switch p {
  case PrivacyAgeResult__OVER: return "OVER"
  case PrivacyAgeResult__UNDER: return "UNDER"
  case PrivacyAgeResult__UNDEFINED: return "UNDEFINED"
  }
  return "<UNSET>"
}

func PrivacyAgeResult_FromString(s string) (PrivacyAgeResult_, error) {
  switch s {
  case "OVER": return PrivacyAgeResult__OVER, nil 
  case "UNDER": return PrivacyAgeResult__UNDER, nil 
  case "UNDEFINED": return PrivacyAgeResult__UNDEFINED, nil 
  }
  return PrivacyAgeResult_(0), fmt.Errorf("not a valid PrivacyAgeResult_ string")
}


func PrivacyAgeResult_Ptr(v PrivacyAgeResult_) *PrivacyAgeResult_ { return &v }

func (p PrivacyAgeResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyAgeResult_) UnmarshalText(text []byte) error {
q, err := PrivacyAgeResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyAgeResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyAgeResult_(v)
return nil
}

func (p * PrivacyAgeResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IdentityProvider int64
const (
  IdentityProvider_UNKNOWN IdentityProvider = 0
  IdentityProvider_LINE IdentityProvider = 1
  IdentityProvider_NAVER_KR IdentityProvider = 2
  IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
  switch p {
  case IdentityProvider_UNKNOWN: return "UNKNOWN"
  case IdentityProvider_LINE: return "LINE"
  case IdentityProvider_NAVER_KR: return "NAVER_KR"
  case IdentityProvider_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
  switch s {
  case "UNKNOWN": return IdentityProvider_UNKNOWN, nil 
  case "LINE": return IdentityProvider_LINE, nil 
  case "NAVER_KR": return IdentityProvider_NAVER_KR, nil 
  case "LINE_PHONE": return IdentityProvider_LINE_PHONE, nil 
  }
  return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}


func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
q, err := IdentityProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityProvider(v)
return nil
}

func (p * IdentityProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EmailConfirmationStatus int64
const (
  EmailConfirmationStatus_NOT_SPECIFIED EmailConfirmationStatus = 0
  EmailConfirmationStatus_NOT_YET EmailConfirmationStatus = 1
  EmailConfirmationStatus_DONE EmailConfirmationStatus = 3
  EmailConfirmationStatus_NEED_ENFORCED_INPUT EmailConfirmationStatus = 4
)

func (p EmailConfirmationStatus) String() string {
  switch p {
  case EmailConfirmationStatus_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case EmailConfirmationStatus_NOT_YET: return "NOT_YET"
  case EmailConfirmationStatus_DONE: return "DONE"
  case EmailConfirmationStatus_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
  switch s {
  case "NOT_SPECIFIED": return EmailConfirmationStatus_NOT_SPECIFIED, nil 
  case "NOT_YET": return EmailConfirmationStatus_NOT_YET, nil 
  case "DONE": return EmailConfirmationStatus_DONE, nil 
  case "NEED_ENFORCED_INPUT": return EmailConfirmationStatus_NEED_ENFORCED_INPUT, nil 
  }
  return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}


func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

func (p EmailConfirmationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EmailConfirmationStatus) UnmarshalText(text []byte) error {
q, err := EmailConfirmationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EmailConfirmationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EmailConfirmationStatus(v)
return nil
}

func (p * EmailConfirmationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationPincodeType int64
const (
  AccountMigrationPincodeType_NOT_APPLICABLE AccountMigrationPincodeType = 0
  AccountMigrationPincodeType_NOT_SET AccountMigrationPincodeType = 1
  AccountMigrationPincodeType_SET AccountMigrationPincodeType = 2
  AccountMigrationPincodeType_NEED_ENFORCED_INPUT AccountMigrationPincodeType = 3
)

func (p AccountMigrationPincodeType) String() string {
  switch p {
  case AccountMigrationPincodeType_NOT_APPLICABLE: return "NOT_APPLICABLE"
  case AccountMigrationPincodeType_NOT_SET: return "NOT_SET"
  case AccountMigrationPincodeType_SET: return "SET"
  case AccountMigrationPincodeType_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func AccountMigrationPincodeTypeFromString(s string) (AccountMigrationPincodeType, error) {
  switch s {
  case "NOT_APPLICABLE": return AccountMigrationPincodeType_NOT_APPLICABLE, nil 
  case "NOT_SET": return AccountMigrationPincodeType_NOT_SET, nil 
  case "SET": return AccountMigrationPincodeType_SET, nil 
  case "NEED_ENFORCED_INPUT": return AccountMigrationPincodeType_NEED_ENFORCED_INPUT, nil 
  }
  return AccountMigrationPincodeType(0), fmt.Errorf("not a valid AccountMigrationPincodeType string")
}


func AccountMigrationPincodeTypePtr(v AccountMigrationPincodeType) *AccountMigrationPincodeType { return &v }

func (p AccountMigrationPincodeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationPincodeType) UnmarshalText(text []byte) error {
q, err := AccountMigrationPincodeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationPincodeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationPincodeType(v)
return nil
}

func (p * AccountMigrationPincodeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C62606zb int64
const (
  C62606zb_PROMOTION_FRIENDS_INVITE C62606zb = 1
  C62606zb_CAPABILITY_SERVER_SIDE_SMS C62606zb = 2
  C62606zb_LINE_CLIENT_ANALYTICS_CONFIGURATION C62606zb = 3
)

func (p C62606zb) String() string {
  switch p {
  case C62606zb_PROMOTION_FRIENDS_INVITE: return "PROMOTION_FRIENDS_INVITE"
  case C62606zb_CAPABILITY_SERVER_SIDE_SMS: return "CAPABILITY_SERVER_SIDE_SMS"
  case C62606zb_LINE_CLIENT_ANALYTICS_CONFIGURATION: return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  }
  return "<UNSET>"
}

func C62606zbFromString(s string) (C62606zb, error) {
  switch s {
  case "PROMOTION_FRIENDS_INVITE": return C62606zb_PROMOTION_FRIENDS_INVITE, nil 
  case "CAPABILITY_SERVER_SIDE_SMS": return C62606zb_CAPABILITY_SERVER_SIDE_SMS, nil 
  case "LINE_CLIENT_ANALYTICS_CONFIGURATION": return C62606zb_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil 
  }
  return C62606zb(0), fmt.Errorf("not a valid C62606zb string")
}


func C62606zbPtr(v C62606zb) *C62606zb { return &v }

func (p C62606zb) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C62606zb) UnmarshalText(text []byte) error {
q, err := C62606zbFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C62606zb) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C62606zb(v)
return nil
}

func (p * C62606zb) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyAllowProfileHistory int64
const (
  PrivacyAllowProfileHistory_OWNER PrivacyAllowProfileHistory = 0
  PrivacyAllowProfileHistory_FRIEND PrivacyAllowProfileHistory = 1
)

func (p PrivacyAllowProfileHistory) String() string {
  switch p {
  case PrivacyAllowProfileHistory_OWNER: return "OWNER"
  case PrivacyAllowProfileHistory_FRIEND: return "FRIEND"
  }
  return "<UNSET>"
}

func PrivacyAllowProfileHistoryFromString(s string) (PrivacyAllowProfileHistory, error) {
  switch s {
  case "OWNER": return PrivacyAllowProfileHistory_OWNER, nil 
  case "FRIEND": return PrivacyAllowProfileHistory_FRIEND, nil 
  }
  return PrivacyAllowProfileHistory(0), fmt.Errorf("not a valid PrivacyAllowProfileHistory string")
}


func PrivacyAllowProfileHistoryPtr(v PrivacyAllowProfileHistory) *PrivacyAllowProfileHistory { return &v }

func (p PrivacyAllowProfileHistory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyAllowProfileHistory) UnmarshalText(text []byte) error {
q, err := PrivacyAllowProfileHistoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyAllowProfileHistory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyAllowProfileHistory(v)
return nil
}

func (p * PrivacyAllowProfileHistory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyStatusMessageHistory int64
const (
  PrivacyStatusMessageHistory_NONE PrivacyStatusMessageHistory = 1
  PrivacyStatusMessageHistory_ALL PrivacyStatusMessageHistory = 2
)

func (p PrivacyStatusMessageHistory) String() string {
  switch p {
  case PrivacyStatusMessageHistory_NONE: return "NONE"
  case PrivacyStatusMessageHistory_ALL: return "ALL"
  }
  return "<UNSET>"
}

func PrivacyStatusMessageHistoryFromString(s string) (PrivacyStatusMessageHistory, error) {
  switch s {
  case "NONE": return PrivacyStatusMessageHistory_NONE, nil 
  case "ALL": return PrivacyStatusMessageHistory_ALL, nil 
  }
  return PrivacyStatusMessageHistory(0), fmt.Errorf("not a valid PrivacyStatusMessageHistory string")
}


func PrivacyStatusMessageHistoryPtr(v PrivacyStatusMessageHistory) *PrivacyStatusMessageHistory { return &v }

func (p PrivacyStatusMessageHistory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyStatusMessageHistory) UnmarshalText(text []byte) error {
q, err := PrivacyStatusMessageHistoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyStatusMessageHistory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyStatusMessageHistory(v)
return nil
}

func (p * PrivacyStatusMessageHistory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59265fa int64
const (
  C59265fa_LOW C59265fa = 0
)

func (p C59265fa) String() string {
  switch p {
  case C59265fa_LOW: return "LOW"
  }
  return "<UNSET>"
}

func C59265faFromString(s string) (C59265fa, error) {
  switch s {
  case "LOW": return C59265fa_LOW, nil 
  }
  return C59265fa(0), fmt.Errorf("not a valid C59265fa string")
}


func C59265faPtr(v C59265fa) *C59265fa { return &v }

func (p C59265fa) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59265fa) UnmarshalText(text []byte) error {
q, err := C59265faFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59265fa) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59265fa(v)
return nil
}

func (p * C59265fa) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SettingsAttributeEx int64
const (
  SettingsAttributeEx_NOTIFICATION_ENABLE SettingsAttributeEx = 0
  SettingsAttributeEx_NOTIFICATION_MUTE_EXPIRATION SettingsAttributeEx = 1
  SettingsAttributeEx_NOTIFICATION_NEW_MESSAGE SettingsAttributeEx = 2
  SettingsAttributeEx_NOTIFICATION_GROUP_INVITATION SettingsAttributeEx = 3
  SettingsAttributeEx_NOTIFICATION_SHOW_MESSAGE SettingsAttributeEx = 4
  SettingsAttributeEx_NOTIFICATION_INCOMING_CALL SettingsAttributeEx = 5
  SettingsAttributeEx_NOTIFICATION_SOUND_MESSAGE SettingsAttributeEx = 8
  SettingsAttributeEx_NOTIFICATION_SOUND_GROUP SettingsAttributeEx = 9
  SettingsAttributeEx_NOTIFICATION_DISABLED_WITH_SUB SettingsAttributeEx = 16
  SettingsAttributeEx_NOTIFICATION_PAYMENT SettingsAttributeEx = 17
  SettingsAttributeEx_NOTIFICATION_MENTION SettingsAttributeEx = 40
  SettingsAttributeEx_NOTIFICATION_THUMBNAIL SettingsAttributeEx = 45
  SettingsAttributeEx_PRIVACY_SYNC_CONTACTS SettingsAttributeEx = 6
  SettingsAttributeEx_PRIVACY_SEARCH_BY_PHONE_NUMBER SettingsAttributeEx = 7
  SettingsAttributeEx_PRIVACY_SEARCH_BY_USERID SettingsAttributeEx = 13
  SettingsAttributeEx_PRIVACY_SEARCH_BY_EMAIL SettingsAttributeEx = 14
  SettingsAttributeEx_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS SettingsAttributeEx = 51
  SettingsAttributeEx_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN SettingsAttributeEx = 21
  SettingsAttributeEx_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME SettingsAttributeEx = 23
  SettingsAttributeEx_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME SettingsAttributeEx = 35
  SettingsAttributeEx_PRIVACY_PROFILE_HISTORY SettingsAttributeEx = 57
  SettingsAttributeEx_PRIVACY_STATUS_MESSAGE_HISTORY SettingsAttributeEx = 54
  SettingsAttributeEx_PRIVACY_ALLOW_FRIEND_REQUEST SettingsAttributeEx = 30
  SettingsAttributeEx_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingsAttributeEx = 25
  SettingsAttributeEx_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL SettingsAttributeEx = 26
  SettingsAttributeEx_PRIVACY_AGREE_USE_PAIDCALL SettingsAttributeEx = 27
  SettingsAttributeEx_PRIVACY_AGE_RESULT SettingsAttributeEx = 60
  SettingsAttributeEx_PRIVACY_AGE_RESULT_RECEIVED SettingsAttributeEx = 61
  SettingsAttributeEx_PRIVACY_ALLOW_FOLLOW SettingsAttributeEx = 63
  SettingsAttributeEx_PRIVACY_SHOW_FOLLOW_LIST SettingsAttributeEx = 64
  SettingsAttributeEx_CONTACT_MY_TICKET SettingsAttributeEx = 10
  SettingsAttributeEx_IDENTITY_PROVIDER SettingsAttributeEx = 11
  SettingsAttributeEx_IDENTITY_IDENTIFIER SettingsAttributeEx = 12
  SettingsAttributeEx_SNS_ACCOUNT SettingsAttributeEx = 19
  SettingsAttributeEx_PHONE_REGISTRATION SettingsAttributeEx = 20
  SettingsAttributeEx_PREFERENCE_LOCALE SettingsAttributeEx = 15
  SettingsAttributeEx_CUSTOM_MODE SettingsAttributeEx = 22
  SettingsAttributeEx_EMAIL_CONFIRMATION_STATUS SettingsAttributeEx = 24
  SettingsAttributeEx_ACCOUNT_MIGRATION_PINCODE SettingsAttributeEx = 28
  SettingsAttributeEx_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE SettingsAttributeEx = 29
  SettingsAttributeEx_SECURITY_CENTER_SETTINGS SettingsAttributeEx = 18
  SettingsAttributeEx_E2EE_ENABLE SettingsAttributeEx = 33
  SettingsAttributeEx_HITOKOTO_BACKUP_REQUESTED SettingsAttributeEx = 34
  SettingsAttributeEx_CONTACT_ALLOW_FOLLOWING SettingsAttributeEx = 36
  SettingsAttributeEx_PRIVACY_ALLOW_NEARBY SettingsAttributeEx = 37
  SettingsAttributeEx_AGREEMENT_NEARBY SettingsAttributeEx = 38
  SettingsAttributeEx_AGREEMENT_SQUARE SettingsAttributeEx = 39
  SettingsAttributeEx_ALLOW_UNREGISTRATION_SECONDARY_DEVICE SettingsAttributeEx = 41
  SettingsAttributeEx_AGREEMENT_BOT_USE SettingsAttributeEx = 42
  SettingsAttributeEx_AGREEMENT_SHAKE_FUNCTION SettingsAttributeEx = 43
  SettingsAttributeEx_AGREEMENT_MOBILE_CONTACT_NAME SettingsAttributeEx = 44
  SettingsAttributeEx_AGREEMENT_SOUND_TO_TEXT SettingsAttributeEx = 46
  SettingsAttributeEx_AGREEMENT_PRIVACY_POLICY_VERSION SettingsAttributeEx = 47
  SettingsAttributeEx_AGREEMENT_AD_BY_WEB_ACCESS SettingsAttributeEx = 48
  SettingsAttributeEx_AGREEMENT_PHONE_NUMBER_MATCHING SettingsAttributeEx = 49
  SettingsAttributeEx_AGREEMENT_COMMUNICATION_INFO SettingsAttributeEx = 50
  SettingsAttributeEx_AGREEMENT_THINGS_WIRELESS_COMMUNICATION SettingsAttributeEx = 52
  SettingsAttributeEx_AGREEMENT_GDPR SettingsAttributeEx = 53
  SettingsAttributeEx_AGREEMENT_PROVIDE_LOCATION SettingsAttributeEx = 55
  SettingsAttributeEx_AGREEMENT_BEACON SettingsAttributeEx = 56
  SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST SettingsAttributeEx = 58
  SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION SettingsAttributeEx = 59
  SettingsAttributeEx_AGREEMENT_OCR_IMAGE_COLLECTION SettingsAttributeEx = 62
)

func (p SettingsAttributeEx) String() string {
  switch p {
  case SettingsAttributeEx_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case SettingsAttributeEx_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case SettingsAttributeEx_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case SettingsAttributeEx_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case SettingsAttributeEx_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case SettingsAttributeEx_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case SettingsAttributeEx_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case SettingsAttributeEx_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case SettingsAttributeEx_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case SettingsAttributeEx_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case SettingsAttributeEx_NOTIFICATION_MENTION: return "NOTIFICATION_MENTION"
  case SettingsAttributeEx_NOTIFICATION_THUMBNAIL: return "NOTIFICATION_THUMBNAIL"
  case SettingsAttributeEx_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case SettingsAttributeEx_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case SettingsAttributeEx_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case SettingsAttributeEx_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case SettingsAttributeEx_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS: return "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
  case SettingsAttributeEx_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case SettingsAttributeEx_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case SettingsAttributeEx_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  case SettingsAttributeEx_PRIVACY_PROFILE_HISTORY: return "PRIVACY_PROFILE_HISTORY"
  case SettingsAttributeEx_PRIVACY_STATUS_MESSAGE_HISTORY: return "PRIVACY_STATUS_MESSAGE_HISTORY"
  case SettingsAttributeEx_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case SettingsAttributeEx_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  case SettingsAttributeEx_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case SettingsAttributeEx_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case SettingsAttributeEx_PRIVACY_AGE_RESULT: return "PRIVACY_AGE_RESULT"
  case SettingsAttributeEx_PRIVACY_AGE_RESULT_RECEIVED: return "PRIVACY_AGE_RESULT_RECEIVED"
  case SettingsAttributeEx_PRIVACY_ALLOW_FOLLOW: return "PRIVACY_ALLOW_FOLLOW"
  case SettingsAttributeEx_PRIVACY_SHOW_FOLLOW_LIST: return "PRIVACY_SHOW_FOLLOW_LIST"
  case SettingsAttributeEx_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case SettingsAttributeEx_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case SettingsAttributeEx_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case SettingsAttributeEx_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case SettingsAttributeEx_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case SettingsAttributeEx_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case SettingsAttributeEx_CUSTOM_MODE: return "CUSTOM_MODE"
  case SettingsAttributeEx_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case SettingsAttributeEx_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributeEx_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributeEx_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  case SettingsAttributeEx_E2EE_ENABLE: return "E2EE_ENABLE"
  case SettingsAttributeEx_HITOKOTO_BACKUP_REQUESTED: return "HITOKOTO_BACKUP_REQUESTED"
  case SettingsAttributeEx_CONTACT_ALLOW_FOLLOWING: return "CONTACT_ALLOW_FOLLOWING"
  case SettingsAttributeEx_PRIVACY_ALLOW_NEARBY: return "PRIVACY_ALLOW_NEARBY"
  case SettingsAttributeEx_AGREEMENT_NEARBY: return "AGREEMENT_NEARBY"
  case SettingsAttributeEx_AGREEMENT_SQUARE: return "AGREEMENT_SQUARE"
  case SettingsAttributeEx_ALLOW_UNREGISTRATION_SECONDARY_DEVICE: return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  case SettingsAttributeEx_AGREEMENT_BOT_USE: return "AGREEMENT_BOT_USE"
  case SettingsAttributeEx_AGREEMENT_SHAKE_FUNCTION: return "AGREEMENT_SHAKE_FUNCTION"
  case SettingsAttributeEx_AGREEMENT_MOBILE_CONTACT_NAME: return "AGREEMENT_MOBILE_CONTACT_NAME"
  case SettingsAttributeEx_AGREEMENT_SOUND_TO_TEXT: return "AGREEMENT_SOUND_TO_TEXT"
  case SettingsAttributeEx_AGREEMENT_PRIVACY_POLICY_VERSION: return "AGREEMENT_PRIVACY_POLICY_VERSION"
  case SettingsAttributeEx_AGREEMENT_AD_BY_WEB_ACCESS: return "AGREEMENT_AD_BY_WEB_ACCESS"
  case SettingsAttributeEx_AGREEMENT_PHONE_NUMBER_MATCHING: return "AGREEMENT_PHONE_NUMBER_MATCHING"
  case SettingsAttributeEx_AGREEMENT_COMMUNICATION_INFO: return "AGREEMENT_COMMUNICATION_INFO"
  case SettingsAttributeEx_AGREEMENT_THINGS_WIRELESS_COMMUNICATION: return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  case SettingsAttributeEx_AGREEMENT_GDPR: return "AGREEMENT_GDPR"
  case SettingsAttributeEx_AGREEMENT_PROVIDE_LOCATION: return "AGREEMENT_PROVIDE_LOCATION"
  case SettingsAttributeEx_AGREEMENT_BEACON: return "AGREEMENT_BEACON"
  case SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST: return "AGREEMENT_CONTENTS_SUGGEST"
  case SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION: return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  case SettingsAttributeEx_AGREEMENT_OCR_IMAGE_COLLECTION: return "AGREEMENT_OCR_IMAGE_COLLECTION"
  }
  return "<UNSET>"
}

func SettingsAttributeExFromString(s string) (SettingsAttributeEx, error) {
  switch s {
  case "NOTIFICATION_ENABLE": return SettingsAttributeEx_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return SettingsAttributeEx_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return SettingsAttributeEx_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return SettingsAttributeEx_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return SettingsAttributeEx_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return SettingsAttributeEx_NOTIFICATION_INCOMING_CALL, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return SettingsAttributeEx_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return SettingsAttributeEx_NOTIFICATION_SOUND_GROUP, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return SettingsAttributeEx_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return SettingsAttributeEx_NOTIFICATION_PAYMENT, nil 
  case "NOTIFICATION_MENTION": return SettingsAttributeEx_NOTIFICATION_MENTION, nil 
  case "NOTIFICATION_THUMBNAIL": return SettingsAttributeEx_NOTIFICATION_THUMBNAIL, nil 
  case "PRIVACY_SYNC_CONTACTS": return SettingsAttributeEx_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return SettingsAttributeEx_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return SettingsAttributeEx_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return SettingsAttributeEx_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": return SettingsAttributeEx_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return SettingsAttributeEx_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return SettingsAttributeEx_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": return SettingsAttributeEx_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_HISTORY": return SettingsAttributeEx_PRIVACY_PROFILE_HISTORY, nil 
  case "PRIVACY_STATUS_MESSAGE_HISTORY": return SettingsAttributeEx_PRIVACY_STATUS_MESSAGE_HISTORY, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return SettingsAttributeEx_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": return SettingsAttributeEx_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return SettingsAttributeEx_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return SettingsAttributeEx_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "PRIVACY_AGE_RESULT": return SettingsAttributeEx_PRIVACY_AGE_RESULT, nil 
  case "PRIVACY_AGE_RESULT_RECEIVED": return SettingsAttributeEx_PRIVACY_AGE_RESULT_RECEIVED, nil 
  case "PRIVACY_ALLOW_FOLLOW": return SettingsAttributeEx_PRIVACY_ALLOW_FOLLOW, nil 
  case "PRIVACY_SHOW_FOLLOW_LIST": return SettingsAttributeEx_PRIVACY_SHOW_FOLLOW_LIST, nil 
  case "CONTACT_MY_TICKET": return SettingsAttributeEx_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return SettingsAttributeEx_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return SettingsAttributeEx_IDENTITY_IDENTIFIER, nil 
  case "SNS_ACCOUNT": return SettingsAttributeEx_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return SettingsAttributeEx_PHONE_REGISTRATION, nil 
  case "PREFERENCE_LOCALE": return SettingsAttributeEx_PREFERENCE_LOCALE, nil 
  case "CUSTOM_MODE": return SettingsAttributeEx_CUSTOM_MODE, nil 
  case "EMAIL_CONFIRMATION_STATUS": return SettingsAttributeEx_EMAIL_CONFIRMATION_STATUS, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return SettingsAttributeEx_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return SettingsAttributeEx_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "SECURITY_CENTER_SETTINGS": return SettingsAttributeEx_SECURITY_CENTER_SETTINGS, nil 
  case "E2EE_ENABLE": return SettingsAttributeEx_E2EE_ENABLE, nil 
  case "HITOKOTO_BACKUP_REQUESTED": return SettingsAttributeEx_HITOKOTO_BACKUP_REQUESTED, nil 
  case "CONTACT_ALLOW_FOLLOWING": return SettingsAttributeEx_CONTACT_ALLOW_FOLLOWING, nil 
  case "PRIVACY_ALLOW_NEARBY": return SettingsAttributeEx_PRIVACY_ALLOW_NEARBY, nil 
  case "AGREEMENT_NEARBY": return SettingsAttributeEx_AGREEMENT_NEARBY, nil 
  case "AGREEMENT_SQUARE": return SettingsAttributeEx_AGREEMENT_SQUARE, nil 
  case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": return SettingsAttributeEx_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil 
  case "AGREEMENT_BOT_USE": return SettingsAttributeEx_AGREEMENT_BOT_USE, nil 
  case "AGREEMENT_SHAKE_FUNCTION": return SettingsAttributeEx_AGREEMENT_SHAKE_FUNCTION, nil 
  case "AGREEMENT_MOBILE_CONTACT_NAME": return SettingsAttributeEx_AGREEMENT_MOBILE_CONTACT_NAME, nil 
  case "AGREEMENT_SOUND_TO_TEXT": return SettingsAttributeEx_AGREEMENT_SOUND_TO_TEXT, nil 
  case "AGREEMENT_PRIVACY_POLICY_VERSION": return SettingsAttributeEx_AGREEMENT_PRIVACY_POLICY_VERSION, nil 
  case "AGREEMENT_AD_BY_WEB_ACCESS": return SettingsAttributeEx_AGREEMENT_AD_BY_WEB_ACCESS, nil 
  case "AGREEMENT_PHONE_NUMBER_MATCHING": return SettingsAttributeEx_AGREEMENT_PHONE_NUMBER_MATCHING, nil 
  case "AGREEMENT_COMMUNICATION_INFO": return SettingsAttributeEx_AGREEMENT_COMMUNICATION_INFO, nil 
  case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": return SettingsAttributeEx_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil 
  case "AGREEMENT_GDPR": return SettingsAttributeEx_AGREEMENT_GDPR, nil 
  case "AGREEMENT_PROVIDE_LOCATION": return SettingsAttributeEx_AGREEMENT_PROVIDE_LOCATION, nil 
  case "AGREEMENT_BEACON": return SettingsAttributeEx_AGREEMENT_BEACON, nil 
  case "AGREEMENT_CONTENTS_SUGGEST": return SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST, nil 
  case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": return SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil 
  case "AGREEMENT_OCR_IMAGE_COLLECTION": return SettingsAttributeEx_AGREEMENT_OCR_IMAGE_COLLECTION, nil 
  }
  return SettingsAttributeEx(0), fmt.Errorf("not a valid SettingsAttributeEx string")
}


func SettingsAttributeExPtr(v SettingsAttributeEx) *SettingsAttributeEx { return &v }

func (p SettingsAttributeEx) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingsAttributeEx) UnmarshalText(text []byte) error {
q, err := SettingsAttributeExFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingsAttributeEx) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingsAttributeEx(v)
return nil
}

func (p * SettingsAttributeEx) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncReason int64
const (
  SyncReason_UNSPECIFIED SyncReason = 0
  SyncReason_UNKNOWN SyncReason = 1
  SyncReason_INITIALIZATION SyncReason = 2
  SyncReason_OPERATION SyncReason = 3
  SyncReason_FULL_SYNC SyncReason = 4
  SyncReason_AUTO_REPAIR SyncReason = 5
  SyncReason_MANUAL_REPAIR SyncReason = 6
  SyncReason_INTERNAL SyncReason = 7
)

func (p SyncReason) String() string {
  switch p {
  case SyncReason_UNSPECIFIED: return "UNSPECIFIED"
  case SyncReason_UNKNOWN: return "UNKNOWN"
  case SyncReason_INITIALIZATION: return "INITIALIZATION"
  case SyncReason_OPERATION: return "OPERATION"
  case SyncReason_FULL_SYNC: return "FULL_SYNC"
  case SyncReason_AUTO_REPAIR: return "AUTO_REPAIR"
  case SyncReason_MANUAL_REPAIR: return "MANUAL_REPAIR"
  case SyncReason_INTERNAL: return "INTERNAL"
  }
  return "<UNSET>"
}

func SyncReasonFromString(s string) (SyncReason, error) {
  switch s {
  case "UNSPECIFIED": return SyncReason_UNSPECIFIED, nil 
  case "UNKNOWN": return SyncReason_UNKNOWN, nil 
  case "INITIALIZATION": return SyncReason_INITIALIZATION, nil 
  case "OPERATION": return SyncReason_OPERATION, nil 
  case "FULL_SYNC": return SyncReason_FULL_SYNC, nil 
  case "AUTO_REPAIR": return SyncReason_AUTO_REPAIR, nil 
  case "MANUAL_REPAIR": return SyncReason_MANUAL_REPAIR, nil 
  case "INTERNAL": return SyncReason_INTERNAL, nil 
  }
  return SyncReason(0), fmt.Errorf("not a valid SyncReason string")
}


func SyncReasonPtr(v SyncReason) *SyncReason { return &v }

func (p SyncReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncReason) UnmarshalText(text []byte) error {
q, err := SyncReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncReason(v)
return nil
}

func (p * SyncReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Direction int64
const (
  Direction_INCOMING Direction = 1
  Direction_OUTGOING Direction = 2
)

func (p Direction) String() string {
  switch p {
  case Direction_INCOMING: return "INCOMING"
  case Direction_OUTGOING: return "OUTGOING"
  }
  return "<UNSET>"
}

func DirectionFromString(s string) (Direction, error) {
  switch s {
  case "INCOMING": return Direction_INCOMING, nil 
  case "OUTGOING": return Direction_OUTGOING, nil 
  }
  return Direction(0), fmt.Errorf("not a valid Direction string")
}


func DirectionPtr(v Direction) *Direction { return &v }

func (p Direction) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Direction) UnmarshalText(text []byte) error {
q, err := DirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Direction) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Direction(v)
return nil
}

func (p * Direction) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestMethod int64
const (
  FriendRequestMethod_TIMELINE FriendRequestMethod = 1
  FriendRequestMethod_NEARBY FriendRequestMethod = 2
  FriendRequestMethod_SQUARE FriendRequestMethod = 3
)

func (p FriendRequestMethod) String() string {
  switch p {
  case FriendRequestMethod_TIMELINE: return "TIMELINE"
  case FriendRequestMethod_NEARBY: return "NEARBY"
  case FriendRequestMethod_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func FriendRequestMethodFromString(s string) (FriendRequestMethod, error) {
  switch s {
  case "TIMELINE": return FriendRequestMethod_TIMELINE, nil 
  case "NEARBY": return FriendRequestMethod_NEARBY, nil 
  case "SQUARE": return FriendRequestMethod_SQUARE, nil 
  }
  return FriendRequestMethod(0), fmt.Errorf("not a valid FriendRequestMethod string")
}


func FriendRequestMethodPtr(v FriendRequestMethod) *FriendRequestMethod { return &v }

func (p FriendRequestMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestMethod) UnmarshalText(text []byte) error {
q, err := FriendRequestMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestMethod(v)
return nil
}

func (p * FriendRequestMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C61914vb int64
const (
  C61914vb_NONE C61914vb = 0
  C61914vb_IMAGE C61914vb = 1
  C61914vb_VIDEO C61914vb = 2
  C61914vb_AUDIO C61914vb = 3
  C61914vb_HTML C61914vb = 4
  C61914vb_PDF C61914vb = 5
  C61914vb_CALL C61914vb = 6
  C61914vb_STICKER C61914vb = 7
  C61914vb_PRESENCE C61914vb = 8
  C61914vb_GIFT C61914vb = 9
  C61914vb_GROUPBOARD C61914vb = 10
  C61914vb_APPLINK C61914vb = 11
  C61914vb_LINK C61914vb = 12
  C61914vb_CONTACT C61914vb = 13
  C61914vb_FILE C61914vb = 14
  C61914vb_LOCATION C61914vb = 15
  C61914vb_POSTNOTIFICATION C61914vb = 16
  C61914vb_RICH C61914vb = 17
  C61914vb_CHATEVENT C61914vb = 18
  C61914vb_MUSIC C61914vb = 19
  C61914vb_PAYMENT C61914vb = 20
  C61914vb_EXTIMAGE C61914vb = 21
  C61914vb_FLEX C61914vb = 22
)

func (p C61914vb) String() string {
  switch p {
  case C61914vb_NONE: return "NONE"
  case C61914vb_IMAGE: return "IMAGE"
  case C61914vb_VIDEO: return "VIDEO"
  case C61914vb_AUDIO: return "AUDIO"
  case C61914vb_HTML: return "HTML"
  case C61914vb_PDF: return "PDF"
  case C61914vb_CALL: return "CALL"
  case C61914vb_STICKER: return "STICKER"
  case C61914vb_PRESENCE: return "PRESENCE"
  case C61914vb_GIFT: return "GIFT"
  case C61914vb_GROUPBOARD: return "GROUPBOARD"
  case C61914vb_APPLINK: return "APPLINK"
  case C61914vb_LINK: return "LINK"
  case C61914vb_CONTACT: return "CONTACT"
  case C61914vb_FILE: return "FILE"
  case C61914vb_LOCATION: return "LOCATION"
  case C61914vb_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case C61914vb_RICH: return "RICH"
  case C61914vb_CHATEVENT: return "CHATEVENT"
  case C61914vb_MUSIC: return "MUSIC"
  case C61914vb_PAYMENT: return "PAYMENT"
  case C61914vb_EXTIMAGE: return "EXTIMAGE"
  case C61914vb_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func C61914vbFromString(s string) (C61914vb, error) {
  switch s {
  case "NONE": return C61914vb_NONE, nil 
  case "IMAGE": return C61914vb_IMAGE, nil 
  case "VIDEO": return C61914vb_VIDEO, nil 
  case "AUDIO": return C61914vb_AUDIO, nil 
  case "HTML": return C61914vb_HTML, nil 
  case "PDF": return C61914vb_PDF, nil 
  case "CALL": return C61914vb_CALL, nil 
  case "STICKER": return C61914vb_STICKER, nil 
  case "PRESENCE": return C61914vb_PRESENCE, nil 
  case "GIFT": return C61914vb_GIFT, nil 
  case "GROUPBOARD": return C61914vb_GROUPBOARD, nil 
  case "APPLINK": return C61914vb_APPLINK, nil 
  case "LINK": return C61914vb_LINK, nil 
  case "CONTACT": return C61914vb_CONTACT, nil 
  case "FILE": return C61914vb_FILE, nil 
  case "LOCATION": return C61914vb_LOCATION, nil 
  case "POSTNOTIFICATION": return C61914vb_POSTNOTIFICATION, nil 
  case "RICH": return C61914vb_RICH, nil 
  case "CHATEVENT": return C61914vb_CHATEVENT, nil 
  case "MUSIC": return C61914vb_MUSIC, nil 
  case "PAYMENT": return C61914vb_PAYMENT, nil 
  case "EXTIMAGE": return C61914vb_EXTIMAGE, nil 
  case "FLEX": return C61914vb_FLEX, nil 
  }
  return C61914vb(0), fmt.Errorf("not a valid C61914vb string")
}


func C61914vbPtr(v C61914vb) *C61914vb { return &v }

func (p C61914vb) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C61914vb) UnmarshalText(text []byte) error {
q, err := C61914vbFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C61914vb) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C61914vb(v)
return nil
}

func (p * C61914vb) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdatedAttribute int64
const (
  UpdatedAttribute_NAME UpdatedAttribute = 1
  UpdatedAttribute_PICTURE_STATUS UpdatedAttribute = 2
  UpdatedAttribute_PREVENTED_JOIN_BY_TICKET UpdatedAttribute = 4
  UpdatedAttribute_NOTIFICATION_SETTING UpdatedAttribute = 8
  UpdatedAttribute_INVITATION_TICKET UpdatedAttribute = 16
  UpdatedAttribute_FAVORITE_TIMESTAMP UpdatedAttribute = 32
  UpdatedAttribute_CHAT_TYPE UpdatedAttribute = 64
)

func (p UpdatedAttribute) String() string {
  switch p {
  case UpdatedAttribute_NAME: return "NAME"
  case UpdatedAttribute_PICTURE_STATUS: return "PICTURE_STATUS"
  case UpdatedAttribute_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case UpdatedAttribute_NOTIFICATION_SETTING: return "NOTIFICATION_SETTING"
  case UpdatedAttribute_INVITATION_TICKET: return "INVITATION_TICKET"
  case UpdatedAttribute_FAVORITE_TIMESTAMP: return "FAVORITE_TIMESTAMP"
  case UpdatedAttribute_CHAT_TYPE: return "CHAT_TYPE"
  }
  return "<UNSET>"
}

func UpdatedAttributeFromString(s string) (UpdatedAttribute, error) {
  switch s {
  case "NAME": return UpdatedAttribute_NAME, nil 
  case "PICTURE_STATUS": return UpdatedAttribute_PICTURE_STATUS, nil 
  case "PREVENTED_JOIN_BY_TICKET": return UpdatedAttribute_PREVENTED_JOIN_BY_TICKET, nil 
  case "NOTIFICATION_SETTING": return UpdatedAttribute_NOTIFICATION_SETTING, nil 
  case "INVITATION_TICKET": return UpdatedAttribute_INVITATION_TICKET, nil 
  case "FAVORITE_TIMESTAMP": return UpdatedAttribute_FAVORITE_TIMESTAMP, nil 
  case "CHAT_TYPE": return UpdatedAttribute_CHAT_TYPE, nil 
  }
  return UpdatedAttribute(0), fmt.Errorf("not a valid UpdatedAttribute string")
}


func UpdatedAttributePtr(v UpdatedAttribute) *UpdatedAttribute { return &v }

func (p UpdatedAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdatedAttribute) UnmarshalText(text []byte) error {
q, err := UpdatedAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdatedAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdatedAttribute(v)
return nil
}

func (p * UpdatedAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Carrier int64
const (
  Carrier_NOT_SPECIFIED Carrier = 0
  Carrier_JP_DOCOMO Carrier = 1
  Carrier_JP_AU Carrier = 2
  Carrier_JP_SOFTBANK Carrier = 3
  Carrier_JP_DOCOMO_LINE Carrier = 4
  Carrier_JP_SOFTBANK_LINE Carrier = 5
  Carrier_JP_AU_LINE Carrier = 6
  Carrier_KR_SKT Carrier = 17
  Carrier_KR_KT Carrier = 18
  Carrier_KR_LGT Carrier = 19
)

func (p Carrier) String() string {
  switch p {
  case Carrier_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case Carrier_JP_DOCOMO: return "JP_DOCOMO"
  case Carrier_JP_AU: return "JP_AU"
  case Carrier_JP_SOFTBANK: return "JP_SOFTBANK"
  case Carrier_JP_DOCOMO_LINE: return "JP_DOCOMO_LINE"
  case Carrier_JP_SOFTBANK_LINE: return "JP_SOFTBANK_LINE"
  case Carrier_JP_AU_LINE: return "JP_AU_LINE"
  case Carrier_KR_SKT: return "KR_SKT"
  case Carrier_KR_KT: return "KR_KT"
  case Carrier_KR_LGT: return "KR_LGT"
  }
  return "<UNSET>"
}

func CarrierFromString(s string) (Carrier, error) {
  switch s {
  case "NOT_SPECIFIED": return Carrier_NOT_SPECIFIED, nil 
  case "JP_DOCOMO": return Carrier_JP_DOCOMO, nil 
  case "JP_AU": return Carrier_JP_AU, nil 
  case "JP_SOFTBANK": return Carrier_JP_SOFTBANK, nil 
  case "JP_DOCOMO_LINE": return Carrier_JP_DOCOMO_LINE, nil 
  case "JP_SOFTBANK_LINE": return Carrier_JP_SOFTBANK_LINE, nil 
  case "JP_AU_LINE": return Carrier_JP_AU_LINE, nil 
  case "KR_SKT": return Carrier_KR_SKT, nil 
  case "KR_KT": return Carrier_KR_KT, nil 
  case "KR_LGT": return Carrier_KR_LGT, nil 
  }
  return Carrier(0), fmt.Errorf("not a valid Carrier string")
}


func CarrierPtr(v Carrier) *Carrier { return &v }

func (p Carrier) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Carrier) UnmarshalText(text []byte) error {
q, err := CarrierFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Carrier) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Carrier(v)
return nil
}

func (p * Carrier) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ApplicationType int64
const (
  ApplicationType_IOS ApplicationType = 16
  ApplicationType_IOS_RC ApplicationType = 17
  ApplicationType_IOS_BETA ApplicationType = 18
  ApplicationType_IOS_ALPHA ApplicationType = 19
  ApplicationType_ANDROID ApplicationType = 32
  ApplicationType_ANDROID_RC ApplicationType = 33
  ApplicationType_ANDROID_BETA ApplicationType = 34
  ApplicationType_ANDROID_ALPHA ApplicationType = 35
  ApplicationType_WAP ApplicationType = 48
  ApplicationType_WAP_RC ApplicationType = 49
  ApplicationType_WAP_BETA ApplicationType = 50
  ApplicationType_WAP_ALPHA ApplicationType = 51
  ApplicationType_BOT ApplicationType = 64
  ApplicationType_BOT_RC ApplicationType = 65
  ApplicationType_BOT_BETA ApplicationType = 66
  ApplicationType_BOT_ALPHA ApplicationType = 67
  ApplicationType_WEB ApplicationType = 80
  ApplicationType_WEB_RC ApplicationType = 81
  ApplicationType_WEB_BETA ApplicationType = 82
  ApplicationType_WEB_ALPHA ApplicationType = 83
  ApplicationType_DESKTOPWIN ApplicationType = 96
  ApplicationType_DESKTOPWIN_RC ApplicationType = 97
  ApplicationType_DESKTOPWIN_BETA ApplicationType = 98
  ApplicationType_DESKTOPWIN_ALPHA ApplicationType = 99
  ApplicationType_DESKTOPMAC ApplicationType = 112
  ApplicationType_DESKTOPMAC_RC ApplicationType = 113
  ApplicationType_DESKTOPMAC_BETA ApplicationType = 114
  ApplicationType_DESKTOPMAC_ALPHA ApplicationType = 115
  ApplicationType_CHANNELGW ApplicationType = 128
  ApplicationType_CHANNELGW_BETA ApplicationType = 130
  ApplicationType_CHANNELCP ApplicationType = 144
  ApplicationType_CHANNELCP_RC ApplicationType = 145
  ApplicationType_CHANNELCP_BETA ApplicationType = 146
  ApplicationType_CHANNELCP_ALPHA ApplicationType = 147
  ApplicationType_WINPHONE ApplicationType = 160
  ApplicationType_WINPHONE_BETA ApplicationType = 162
  ApplicationType_BLACKBERRY_RC ApplicationType = 177
  ApplicationType_BLACKBERRY_BETA ApplicationType = 178
  ApplicationType_WINMETRO ApplicationType = 192
  ApplicationType_WINMETRO_RC ApplicationType = 193
  ApplicationType_WINMETRO_BETA ApplicationType = 194
  ApplicationType_WINMETRO_ALPHA ApplicationType = 195
  ApplicationType_S40 ApplicationType = 208
  ApplicationType_S40_RC ApplicationType = 209
  ApplicationType_S40_BETA ApplicationType = 210
  ApplicationType_S40_ALPHA ApplicationType = 211
  ApplicationType_CHRONO_BETA ApplicationType = 226
  ApplicationType_CHRONO_ALPHA ApplicationType = 227
  ApplicationType_TIZEN ApplicationType = 256
  ApplicationType_TIZEN_RC ApplicationType = 257
  ApplicationType_TIZEN_BETA ApplicationType = 258
  ApplicationType_TIZEN_ALPHA ApplicationType = 259
  ApplicationType_VIRTUAL ApplicationType = 272
  ApplicationType_FIREFOXOS ApplicationType = 288
  ApplicationType_FIREFOXOS_RC ApplicationType = 289
  ApplicationType_FIREFOXOS_BETA ApplicationType = 290
  ApplicationType_FIREFOXOS_ALPHA ApplicationType = 291
  ApplicationType_IOSIPAD ApplicationType = 304
  ApplicationType_IOSIPAD_RC ApplicationType = 305
  ApplicationType_IOSIPAD_BETA ApplicationType = 306
  ApplicationType_BIZIOS ApplicationType = 320
  ApplicationType_BIZIOS_RC ApplicationType = 321
  ApplicationType_BIZIOS_BETA ApplicationType = 322
  ApplicationType_BIZIOS_ALPHA ApplicationType = 323
  ApplicationType_BIZANDROID ApplicationType = 336
  ApplicationType_BIZANDROID_RC ApplicationType = 337
  ApplicationType_BIZANDROID_BETA ApplicationType = 338
  ApplicationType_BIZANDROID_ALPHA ApplicationType = 339
  ApplicationType_BIZBOT ApplicationType = 352
  ApplicationType_BIZBOT_RC ApplicationType = 353
  ApplicationType_BIZBOT_BETA ApplicationType = 354
  ApplicationType_BIZBOT_ALPHA ApplicationType = 355
  ApplicationType_CHROMEOS_RC ApplicationType = 369
  ApplicationType_CHROMEOS_BETA ApplicationType = 370
  ApplicationType_CHROMEOS_ALPHA ApplicationType = 371
  ApplicationType_ANDROIDLITE ApplicationType = 384
  ApplicationType_ANDROIDLITE_RC ApplicationType = 385
  ApplicationType_ANDROIDLITE_BETA ApplicationType = 386
  ApplicationType_ANDROIDLITE_ALPHA ApplicationType = 387
  ApplicationType_WIN10_RC ApplicationType = 401
  ApplicationType_BIZWEB ApplicationType = 416
  ApplicationType_BIZWEB_RC ApplicationType = 417
  ApplicationType_BIZWEB_BETA ApplicationType = 418
  ApplicationType_BIZWEB_ALPHA ApplicationType = 419
  ApplicationType_DUMMYPRIMARY ApplicationType = 432
  ApplicationType_DUMMYPRIMARY_RC ApplicationType = 433
  ApplicationType_DUMMYPRIMARY_BETA ApplicationType = 434
  ApplicationType_DUMMYPRIMARY_ALPHA ApplicationType = 435
  ApplicationType_SQUARE ApplicationType = 448
  ApplicationType_SQUARE_RC ApplicationType = 449
  ApplicationType_SQUARE_BETA ApplicationType = 450
  ApplicationType_INTERNAL ApplicationType = 464
  ApplicationType_INTERNAL_RC ApplicationType = 465
  ApplicationType_INTERNAL_BETA ApplicationType = 466
  ApplicationType_INTERNAL_ALPHA ApplicationType = 467
  ApplicationType_CLOVAFRIENDS_RC ApplicationType = 481
  ApplicationType_CLOVAFRIENDS_BETA ApplicationType = 482
  ApplicationType_CLOVAFRIENDS_ALPHA ApplicationType = 483
  ApplicationType_WATCHOS ApplicationType = 496
  ApplicationType_WATCHOS_RC ApplicationType = 497
  ApplicationType_WATCHOS_BETA ApplicationType = 498
  ApplicationType_WATCHOS_ALPHA ApplicationType = 499
)

func (p ApplicationType) String() string {
  switch p {
  case ApplicationType_IOS: return "IOS"
  case ApplicationType_IOS_RC: return "IOS_RC"
  case ApplicationType_IOS_BETA: return "IOS_BETA"
  case ApplicationType_IOS_ALPHA: return "IOS_ALPHA"
  case ApplicationType_ANDROID: return "ANDROID"
  case ApplicationType_ANDROID_RC: return "ANDROID_RC"
  case ApplicationType_ANDROID_BETA: return "ANDROID_BETA"
  case ApplicationType_ANDROID_ALPHA: return "ANDROID_ALPHA"
  case ApplicationType_WAP: return "WAP"
  case ApplicationType_WAP_RC: return "WAP_RC"
  case ApplicationType_WAP_BETA: return "WAP_BETA"
  case ApplicationType_WAP_ALPHA: return "WAP_ALPHA"
  case ApplicationType_BOT: return "BOT"
  case ApplicationType_BOT_RC: return "BOT_RC"
  case ApplicationType_BOT_BETA: return "BOT_BETA"
  case ApplicationType_BOT_ALPHA: return "BOT_ALPHA"
  case ApplicationType_WEB: return "WEB"
  case ApplicationType_WEB_RC: return "WEB_RC"
  case ApplicationType_WEB_BETA: return "WEB_BETA"
  case ApplicationType_WEB_ALPHA: return "WEB_ALPHA"
  case ApplicationType_DESKTOPWIN: return "DESKTOPWIN"
  case ApplicationType_DESKTOPWIN_RC: return "DESKTOPWIN_RC"
  case ApplicationType_DESKTOPWIN_BETA: return "DESKTOPWIN_BETA"
  case ApplicationType_DESKTOPWIN_ALPHA: return "DESKTOPWIN_ALPHA"
  case ApplicationType_DESKTOPMAC: return "DESKTOPMAC"
  case ApplicationType_DESKTOPMAC_RC: return "DESKTOPMAC_RC"
  case ApplicationType_DESKTOPMAC_BETA: return "DESKTOPMAC_BETA"
  case ApplicationType_DESKTOPMAC_ALPHA: return "DESKTOPMAC_ALPHA"
  case ApplicationType_CHANNELGW: return "CHANNELGW"
  case ApplicationType_CHANNELGW_BETA: return "CHANNELGW_BETA"
  case ApplicationType_CHANNELCP: return "CHANNELCP"
  case ApplicationType_CHANNELCP_RC: return "CHANNELCP_RC"
  case ApplicationType_CHANNELCP_BETA: return "CHANNELCP_BETA"
  case ApplicationType_CHANNELCP_ALPHA: return "CHANNELCP_ALPHA"
  case ApplicationType_WINPHONE: return "WINPHONE"
  case ApplicationType_WINPHONE_BETA: return "WINPHONE_BETA"
  case ApplicationType_BLACKBERRY_RC: return "BLACKBERRY_RC"
  case ApplicationType_BLACKBERRY_BETA: return "BLACKBERRY_BETA"
  case ApplicationType_WINMETRO: return "WINMETRO"
  case ApplicationType_WINMETRO_RC: return "WINMETRO_RC"
  case ApplicationType_WINMETRO_BETA: return "WINMETRO_BETA"
  case ApplicationType_WINMETRO_ALPHA: return "WINMETRO_ALPHA"
  case ApplicationType_S40: return "S40"
  case ApplicationType_S40_RC: return "S40_RC"
  case ApplicationType_S40_BETA: return "S40_BETA"
  case ApplicationType_S40_ALPHA: return "S40_ALPHA"
  case ApplicationType_CHRONO_BETA: return "CHRONO_BETA"
  case ApplicationType_CHRONO_ALPHA: return "CHRONO_ALPHA"
  case ApplicationType_TIZEN: return "TIZEN"
  case ApplicationType_TIZEN_RC: return "TIZEN_RC"
  case ApplicationType_TIZEN_BETA: return "TIZEN_BETA"
  case ApplicationType_TIZEN_ALPHA: return "TIZEN_ALPHA"
  case ApplicationType_VIRTUAL: return "VIRTUAL"
  case ApplicationType_FIREFOXOS: return "FIREFOXOS"
  case ApplicationType_FIREFOXOS_RC: return "FIREFOXOS_RC"
  case ApplicationType_FIREFOXOS_BETA: return "FIREFOXOS_BETA"
  case ApplicationType_FIREFOXOS_ALPHA: return "FIREFOXOS_ALPHA"
  case ApplicationType_IOSIPAD: return "IOSIPAD"
  case ApplicationType_IOSIPAD_RC: return "IOSIPAD_RC"
  case ApplicationType_IOSIPAD_BETA: return "IOSIPAD_BETA"
  case ApplicationType_BIZIOS: return "BIZIOS"
  case ApplicationType_BIZIOS_RC: return "BIZIOS_RC"
  case ApplicationType_BIZIOS_BETA: return "BIZIOS_BETA"
  case ApplicationType_BIZIOS_ALPHA: return "BIZIOS_ALPHA"
  case ApplicationType_BIZANDROID: return "BIZANDROID"
  case ApplicationType_BIZANDROID_RC: return "BIZANDROID_RC"
  case ApplicationType_BIZANDROID_BETA: return "BIZANDROID_BETA"
  case ApplicationType_BIZANDROID_ALPHA: return "BIZANDROID_ALPHA"
  case ApplicationType_BIZBOT: return "BIZBOT"
  case ApplicationType_BIZBOT_RC: return "BIZBOT_RC"
  case ApplicationType_BIZBOT_BETA: return "BIZBOT_BETA"
  case ApplicationType_BIZBOT_ALPHA: return "BIZBOT_ALPHA"
  case ApplicationType_CHROMEOS_RC: return "CHROMEOS_RC"
  case ApplicationType_CHROMEOS_BETA: return "CHROMEOS_BETA"
  case ApplicationType_CHROMEOS_ALPHA: return "CHROMEOS_ALPHA"
  case ApplicationType_ANDROIDLITE: return "ANDROIDLITE"
  case ApplicationType_ANDROIDLITE_RC: return "ANDROIDLITE_RC"
  case ApplicationType_ANDROIDLITE_BETA: return "ANDROIDLITE_BETA"
  case ApplicationType_ANDROIDLITE_ALPHA: return "ANDROIDLITE_ALPHA"
  case ApplicationType_WIN10_RC: return "WIN10_RC"
  case ApplicationType_BIZWEB: return "BIZWEB"
  case ApplicationType_BIZWEB_RC: return "BIZWEB_RC"
  case ApplicationType_BIZWEB_BETA: return "BIZWEB_BETA"
  case ApplicationType_BIZWEB_ALPHA: return "BIZWEB_ALPHA"
  case ApplicationType_DUMMYPRIMARY: return "DUMMYPRIMARY"
  case ApplicationType_DUMMYPRIMARY_RC: return "DUMMYPRIMARY_RC"
  case ApplicationType_DUMMYPRIMARY_BETA: return "DUMMYPRIMARY_BETA"
  case ApplicationType_DUMMYPRIMARY_ALPHA: return "DUMMYPRIMARY_ALPHA"
  case ApplicationType_SQUARE: return "SQUARE"
  case ApplicationType_SQUARE_RC: return "SQUARE_RC"
  case ApplicationType_SQUARE_BETA: return "SQUARE_BETA"
  case ApplicationType_INTERNAL: return "INTERNAL"
  case ApplicationType_INTERNAL_RC: return "INTERNAL_RC"
  case ApplicationType_INTERNAL_BETA: return "INTERNAL_BETA"
  case ApplicationType_INTERNAL_ALPHA: return "INTERNAL_ALPHA"
  case ApplicationType_CLOVAFRIENDS_RC: return "CLOVAFRIENDS_RC"
  case ApplicationType_CLOVAFRIENDS_BETA: return "CLOVAFRIENDS_BETA"
  case ApplicationType_CLOVAFRIENDS_ALPHA: return "CLOVAFRIENDS_ALPHA"
  case ApplicationType_WATCHOS: return "WATCHOS"
  case ApplicationType_WATCHOS_RC: return "WATCHOS_RC"
  case ApplicationType_WATCHOS_BETA: return "WATCHOS_BETA"
  case ApplicationType_WATCHOS_ALPHA: return "WATCHOS_ALPHA"
  }
  return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
  switch s {
  case "IOS": return ApplicationType_IOS, nil 
  case "IOS_RC": return ApplicationType_IOS_RC, nil 
  case "IOS_BETA": return ApplicationType_IOS_BETA, nil 
  case "IOS_ALPHA": return ApplicationType_IOS_ALPHA, nil 
  case "ANDROID": return ApplicationType_ANDROID, nil 
  case "ANDROID_RC": return ApplicationType_ANDROID_RC, nil 
  case "ANDROID_BETA": return ApplicationType_ANDROID_BETA, nil 
  case "ANDROID_ALPHA": return ApplicationType_ANDROID_ALPHA, nil 
  case "WAP": return ApplicationType_WAP, nil 
  case "WAP_RC": return ApplicationType_WAP_RC, nil 
  case "WAP_BETA": return ApplicationType_WAP_BETA, nil 
  case "WAP_ALPHA": return ApplicationType_WAP_ALPHA, nil 
  case "BOT": return ApplicationType_BOT, nil 
  case "BOT_RC": return ApplicationType_BOT_RC, nil 
  case "BOT_BETA": return ApplicationType_BOT_BETA, nil 
  case "BOT_ALPHA": return ApplicationType_BOT_ALPHA, nil 
  case "WEB": return ApplicationType_WEB, nil 
  case "WEB_RC": return ApplicationType_WEB_RC, nil 
  case "WEB_BETA": return ApplicationType_WEB_BETA, nil 
  case "WEB_ALPHA": return ApplicationType_WEB_ALPHA, nil 
  case "DESKTOPWIN": return ApplicationType_DESKTOPWIN, nil 
  case "DESKTOPWIN_RC": return ApplicationType_DESKTOPWIN_RC, nil 
  case "DESKTOPWIN_BETA": return ApplicationType_DESKTOPWIN_BETA, nil 
  case "DESKTOPWIN_ALPHA": return ApplicationType_DESKTOPWIN_ALPHA, nil 
  case "DESKTOPMAC": return ApplicationType_DESKTOPMAC, nil 
  case "DESKTOPMAC_RC": return ApplicationType_DESKTOPMAC_RC, nil 
  case "DESKTOPMAC_BETA": return ApplicationType_DESKTOPMAC_BETA, nil 
  case "DESKTOPMAC_ALPHA": return ApplicationType_DESKTOPMAC_ALPHA, nil 
  case "CHANNELGW": return ApplicationType_CHANNELGW, nil 
  case "CHANNELGW_BETA": return ApplicationType_CHANNELGW_BETA, nil 
  case "CHANNELCP": return ApplicationType_CHANNELCP, nil 
  case "CHANNELCP_RC": return ApplicationType_CHANNELCP_RC, nil 
  case "CHANNELCP_BETA": return ApplicationType_CHANNELCP_BETA, nil 
  case "CHANNELCP_ALPHA": return ApplicationType_CHANNELCP_ALPHA, nil 
  case "WINPHONE": return ApplicationType_WINPHONE, nil 
  case "WINPHONE_BETA": return ApplicationType_WINPHONE_BETA, nil 
  case "BLACKBERRY_RC": return ApplicationType_BLACKBERRY_RC, nil 
  case "BLACKBERRY_BETA": return ApplicationType_BLACKBERRY_BETA, nil 
  case "WINMETRO": return ApplicationType_WINMETRO, nil 
  case "WINMETRO_RC": return ApplicationType_WINMETRO_RC, nil 
  case "WINMETRO_BETA": return ApplicationType_WINMETRO_BETA, nil 
  case "WINMETRO_ALPHA": return ApplicationType_WINMETRO_ALPHA, nil 
  case "S40": return ApplicationType_S40, nil 
  case "S40_RC": return ApplicationType_S40_RC, nil 
  case "S40_BETA": return ApplicationType_S40_BETA, nil 
  case "S40_ALPHA": return ApplicationType_S40_ALPHA, nil 
  case "CHRONO_BETA": return ApplicationType_CHRONO_BETA, nil 
  case "CHRONO_ALPHA": return ApplicationType_CHRONO_ALPHA, nil 
  case "TIZEN": return ApplicationType_TIZEN, nil 
  case "TIZEN_RC": return ApplicationType_TIZEN_RC, nil 
  case "TIZEN_BETA": return ApplicationType_TIZEN_BETA, nil 
  case "TIZEN_ALPHA": return ApplicationType_TIZEN_ALPHA, nil 
  case "VIRTUAL": return ApplicationType_VIRTUAL, nil 
  case "FIREFOXOS": return ApplicationType_FIREFOXOS, nil 
  case "FIREFOXOS_RC": return ApplicationType_FIREFOXOS_RC, nil 
  case "FIREFOXOS_BETA": return ApplicationType_FIREFOXOS_BETA, nil 
  case "FIREFOXOS_ALPHA": return ApplicationType_FIREFOXOS_ALPHA, nil 
  case "IOSIPAD": return ApplicationType_IOSIPAD, nil 
  case "IOSIPAD_RC": return ApplicationType_IOSIPAD_RC, nil 
  case "IOSIPAD_BETA": return ApplicationType_IOSIPAD_BETA, nil 
  case "BIZIOS": return ApplicationType_BIZIOS, nil 
  case "BIZIOS_RC": return ApplicationType_BIZIOS_RC, nil 
  case "BIZIOS_BETA": return ApplicationType_BIZIOS_BETA, nil 
  case "BIZIOS_ALPHA": return ApplicationType_BIZIOS_ALPHA, nil 
  case "BIZANDROID": return ApplicationType_BIZANDROID, nil 
  case "BIZANDROID_RC": return ApplicationType_BIZANDROID_RC, nil 
  case "BIZANDROID_BETA": return ApplicationType_BIZANDROID_BETA, nil 
  case "BIZANDROID_ALPHA": return ApplicationType_BIZANDROID_ALPHA, nil 
  case "BIZBOT": return ApplicationType_BIZBOT, nil 
  case "BIZBOT_RC": return ApplicationType_BIZBOT_RC, nil 
  case "BIZBOT_BETA": return ApplicationType_BIZBOT_BETA, nil 
  case "BIZBOT_ALPHA": return ApplicationType_BIZBOT_ALPHA, nil 
  case "CHROMEOS_RC": return ApplicationType_CHROMEOS_RC, nil 
  case "CHROMEOS_BETA": return ApplicationType_CHROMEOS_BETA, nil 
  case "CHROMEOS_ALPHA": return ApplicationType_CHROMEOS_ALPHA, nil 
  case "ANDROIDLITE": return ApplicationType_ANDROIDLITE, nil 
  case "ANDROIDLITE_RC": return ApplicationType_ANDROIDLITE_RC, nil 
  case "ANDROIDLITE_BETA": return ApplicationType_ANDROIDLITE_BETA, nil 
  case "ANDROIDLITE_ALPHA": return ApplicationType_ANDROIDLITE_ALPHA, nil 
  case "WIN10_RC": return ApplicationType_WIN10_RC, nil 
  case "BIZWEB": return ApplicationType_BIZWEB, nil 
  case "BIZWEB_RC": return ApplicationType_BIZWEB_RC, nil 
  case "BIZWEB_BETA": return ApplicationType_BIZWEB_BETA, nil 
  case "BIZWEB_ALPHA": return ApplicationType_BIZWEB_ALPHA, nil 
  case "DUMMYPRIMARY": return ApplicationType_DUMMYPRIMARY, nil 
  case "DUMMYPRIMARY_RC": return ApplicationType_DUMMYPRIMARY_RC, nil 
  case "DUMMYPRIMARY_BETA": return ApplicationType_DUMMYPRIMARY_BETA, nil 
  case "DUMMYPRIMARY_ALPHA": return ApplicationType_DUMMYPRIMARY_ALPHA, nil 
  case "SQUARE": return ApplicationType_SQUARE, nil 
  case "SQUARE_RC": return ApplicationType_SQUARE_RC, nil 
  case "SQUARE_BETA": return ApplicationType_SQUARE_BETA, nil 
  case "INTERNAL": return ApplicationType_INTERNAL, nil 
  case "INTERNAL_RC": return ApplicationType_INTERNAL_RC, nil 
  case "INTERNAL_BETA": return ApplicationType_INTERNAL_BETA, nil 
  case "INTERNAL_ALPHA": return ApplicationType_INTERNAL_ALPHA, nil 
  case "CLOVAFRIENDS_RC": return ApplicationType_CLOVAFRIENDS_RC, nil 
  case "CLOVAFRIENDS_BETA": return ApplicationType_CLOVAFRIENDS_BETA, nil 
  case "CLOVAFRIENDS_ALPHA": return ApplicationType_CLOVAFRIENDS_ALPHA, nil 
  case "WATCHOS": return ApplicationType_WATCHOS, nil 
  case "WATCHOS_RC": return ApplicationType_WATCHOS_RC, nil 
  case "WATCHOS_BETA": return ApplicationType_WATCHOS_BETA, nil 
  case "WATCHOS_ALPHA": return ApplicationType_WATCHOS_ALPHA, nil 
  }
  return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}


func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

func (p ApplicationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ApplicationType) UnmarshalText(text []byte) error {
q, err := ApplicationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ApplicationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ApplicationType(v)
return nil
}

func (p * ApplicationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationSessionDataMethod int64
const (
  VerificationSessionDataMethod_NO_AVAILABLE VerificationSessionDataMethod = 0
  VerificationSessionDataMethod_PIN_VIA_SMS VerificationSessionDataMethod = 1
  VerificationSessionDataMethod_CALLERID_INDIGO VerificationSessionDataMethod = 2
  VerificationSessionDataMethod_PIN_VIA_TTS VerificationSessionDataMethod = 4
  VerificationSessionDataMethod_SKIP VerificationSessionDataMethod = 10
)

func (p VerificationSessionDataMethod) String() string {
  switch p {
  case VerificationSessionDataMethod_NO_AVAILABLE: return "NO_AVAILABLE"
  case VerificationSessionDataMethod_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case VerificationSessionDataMethod_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case VerificationSessionDataMethod_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case VerificationSessionDataMethod_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func VerificationSessionDataMethodFromString(s string) (VerificationSessionDataMethod, error) {
  switch s {
  case "NO_AVAILABLE": return VerificationSessionDataMethod_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return VerificationSessionDataMethod_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return VerificationSessionDataMethod_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return VerificationSessionDataMethod_PIN_VIA_TTS, nil 
  case "SKIP": return VerificationSessionDataMethod_SKIP, nil 
  }
  return VerificationSessionDataMethod(0), fmt.Errorf("not a valid VerificationSessionDataMethod string")
}


func VerificationSessionDataMethodPtr(v VerificationSessionDataMethod) *VerificationSessionDataMethod { return &v }

func (p VerificationSessionDataMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationSessionDataMethod) UnmarshalText(text []byte) error {
q, err := VerificationSessionDataMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationSessionDataMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationSessionDataMethod(v)
return nil
}

func (p * VerificationSessionDataMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Y30 int64
const (
  Y30_NO_AVAILABLE Y30 = 0
  Y30_PIN_VIA_SMS Y30 = 1
  Y30_CALLERID_INDIGO Y30 = 2
  Y30_PIN_VIA_TTS Y30 = 4
  Y30_SKIP Y30 = 10
)

func (p Y30) String() string {
  switch p {
  case Y30_NO_AVAILABLE: return "NO_AVAILABLE"
  case Y30_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case Y30_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case Y30_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case Y30_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func Y30FromString(s string) (Y30, error) {
  switch s {
  case "NO_AVAILABLE": return Y30_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return Y30_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return Y30_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return Y30_PIN_VIA_TTS, nil 
  case "SKIP": return Y30_SKIP, nil 
  }
  return Y30(0), fmt.Errorf("not a valid Y30 string")
}


func Y30Ptr(v Y30) *Y30 { return &v }

func (p Y30) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Y30) UnmarshalText(text []byte) error {
q, err := Y30FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Y30) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Y30(v)
return nil
}

func (p * Y30) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationResult_ int64
const (
  VerificationResult__FAILED VerificationResult_ = 0
  VerificationResult__OK_NOT_REGISTERED_YET VerificationResult_ = 1
  VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE VerificationResult_ = 2
  VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
  switch p {
  case VerificationResult__FAILED: return "FAILED"
  case VerificationResult__OK_NOT_REGISTERED_YET: return "OK_NOT_REGISTERED_YET"
  case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE: return "OK_REGISTERED_WITH_SAME_DEVICE"
  case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE: return "OK_REGISTERED_WITH_ANOTHER_DEVICE"
  }
  return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
  switch s {
  case "FAILED": return VerificationResult__FAILED, nil 
  case "OK_NOT_REGISTERED_YET": return VerificationResult__OK_NOT_REGISTERED_YET, nil 
  case "OK_REGISTERED_WITH_SAME_DEVICE": return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil 
  case "OK_REGISTERED_WITH_ANOTHER_DEVICE": return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil 
  }
  return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}


func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

func (p VerificationResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationResult_) UnmarshalText(text []byte) error {
q, err := VerificationResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationResult_(v)
return nil
}

func (p * VerificationResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FeatureType int64
const (
  FeatureType_OBS_VIDEO FeatureType = 1
  FeatureType_OBS_GENERAL FeatureType = 2
  FeatureType_OBS_RINGBACK_TONE FeatureType = 3
)

func (p FeatureType) String() string {
  switch p {
  case FeatureType_OBS_VIDEO: return "OBS_VIDEO"
  case FeatureType_OBS_GENERAL: return "OBS_GENERAL"
  case FeatureType_OBS_RINGBACK_TONE: return "OBS_RINGBACK_TONE"
  }
  return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
  switch s {
  case "OBS_VIDEO": return FeatureType_OBS_VIDEO, nil 
  case "OBS_GENERAL": return FeatureType_OBS_GENERAL, nil 
  case "OBS_RINGBACK_TONE": return FeatureType_OBS_RINGBACK_TONE, nil 
  }
  return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}


func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

func (p FeatureType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FeatureType) UnmarshalText(text []byte) error {
q, err := FeatureTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FeatureType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FeatureType(v)
return nil
}

func (p * FeatureType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NetworkType int64
const (
  NetworkType_UNKNOWN NetworkType = 0
  NetworkType_WIFI NetworkType = 1
  NetworkType_CELLULAR_NETWORK NetworkType = 2
)

func (p NetworkType) String() string {
  switch p {
  case NetworkType_UNKNOWN: return "UNKNOWN"
  case NetworkType_WIFI: return "WIFI"
  case NetworkType_CELLULAR_NETWORK: return "CELLULAR_NETWORK"
  }
  return "<UNSET>"
}

func NetworkTypeFromString(s string) (NetworkType, error) {
  switch s {
  case "UNKNOWN": return NetworkType_UNKNOWN, nil 
  case "WIFI": return NetworkType_WIFI, nil 
  case "CELLULAR_NETWORK": return NetworkType_CELLULAR_NETWORK, nil 
  }
  return NetworkType(0), fmt.Errorf("not a valid NetworkType string")
}


func NetworkTypePtr(v NetworkType) *NetworkType { return &v }

func (p NetworkType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NetworkType) UnmarshalText(text []byte) error {
q, err := NetworkTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NetworkType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NetworkType(v)
return nil
}

func (p * NetworkType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TalkExceptionCode int64
const (
  TalkExceptionCode_ILLEGAL_ARGUMENT TalkExceptionCode = 0
  TalkExceptionCode_AUTHENTICATION_FAILED TalkExceptionCode = 1
  TalkExceptionCode_DB_FAILED TalkExceptionCode = 2
  TalkExceptionCode_INVALID_STATE TalkExceptionCode = 3
  TalkExceptionCode_EXCESSIVE_ACCESS TalkExceptionCode = 4
  TalkExceptionCode_NOT_FOUND TalkExceptionCode = 5
  TalkExceptionCode_INVALID_LENGTH TalkExceptionCode = 6
  TalkExceptionCode_NOT_AVAILABLE_USER TalkExceptionCode = 7
  TalkExceptionCode_NOT_AUTHORIZED_DEVICE TalkExceptionCode = 8
  TalkExceptionCode_INVALID_MID TalkExceptionCode = 9
  TalkExceptionCode_NOT_A_MEMBER TalkExceptionCode = 10
  TalkExceptionCode_INCOMPATIBLE_APP_VERSION TalkExceptionCode = 11
  TalkExceptionCode_NOT_READY TalkExceptionCode = 12
  TalkExceptionCode_NOT_AVAILABLE_SESSION TalkExceptionCode = 13
  TalkExceptionCode_NOT_AUTHORIZED_SESSION TalkExceptionCode = 14
  TalkExceptionCode_SYSTEM_ERROR TalkExceptionCode = 15
  TalkExceptionCode_NO_AVAILABLE_VERIFICATION_METHOD TalkExceptionCode = 16
  TalkExceptionCode_NOT_AUTHENTICATED TalkExceptionCode = 17
  TalkExceptionCode_INVALID_IDENTITY_CREDENTIAL TalkExceptionCode = 18
  TalkExceptionCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER TalkExceptionCode = 19
  TalkExceptionCode_INTERNAL_ERROR TalkExceptionCode = 20
  TalkExceptionCode_NO_SUCH_IDENTITY_IDENFIER TalkExceptionCode = 21
  TalkExceptionCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY TalkExceptionCode = 22
  TalkExceptionCode_ILLEGAL_IDENTITY_CREDENTIAL TalkExceptionCode = 23
  TalkExceptionCode_UNKNOWN_CHANNEL TalkExceptionCode = 24
  TalkExceptionCode_NO_SUCH_MESSAGE_BOX TalkExceptionCode = 25
  TalkExceptionCode_NOT_AVAILABLE_MESSAGE_BOX TalkExceptionCode = 26
  TalkExceptionCode_CHANNEL_DOES_NOT_MATCH TalkExceptionCode = 27
  TalkExceptionCode_NOT_YOUR_MESSAGE TalkExceptionCode = 28
  TalkExceptionCode_MESSAGE_DEFINED_ERROR TalkExceptionCode = 29
  TalkExceptionCode_USER_CANNOT_ACCEPT_PRESENTS TalkExceptionCode = 30
  TalkExceptionCode_USER_NOT_STICKER_OWNER TalkExceptionCode = 32
  TalkExceptionCode_MAINTENANCE_ERROR TalkExceptionCode = 33
  TalkExceptionCode_ACCOUNT_NOT_MATCHED TalkExceptionCode = 34
  TalkExceptionCode_ABUSE_BLOCK TalkExceptionCode = 35
  TalkExceptionCode_NOT_FRIEND TalkExceptionCode = 36
  TalkExceptionCode_NOT_ALLOWED_CALL TalkExceptionCode = 37
  TalkExceptionCode_BLOCK_FRIEND TalkExceptionCode = 38
  TalkExceptionCode_INCOMPATIBLE_VOIP_VERSION TalkExceptionCode = 39
  TalkExceptionCode_INVALID_SNS_ACCESS_TOKEN TalkExceptionCode = 40
  TalkExceptionCode_EXTERNAL_SERVICE_NOT_AVAILABLE TalkExceptionCode = 41
  TalkExceptionCode_NOT_ALLOWED_ADD_CONTACT TalkExceptionCode = 42
  TalkExceptionCode_NOT_CERTIFICATED TalkExceptionCode = 43
  TalkExceptionCode_NOT_ALLOWED_SECONDARY_DEVICE TalkExceptionCode = 44
  TalkExceptionCode_INVALID_PIN_CODE TalkExceptionCode = 45
  TalkExceptionCode_NOT_FOUND_IDENTITY_CREDENTIAL TalkExceptionCode = 46
  TalkExceptionCode_EXCEED_FILE_MAX_SIZE TalkExceptionCode = 47
  TalkExceptionCode_EXCEED_DAILY_QUOTA TalkExceptionCode = 48
  TalkExceptionCode_NOT_SUPPORT_SEND_FILE TalkExceptionCode = 49
  TalkExceptionCode_MUST_UPGRADE TalkExceptionCode = 50
  TalkExceptionCode_NOT_AVAILABLE_PIN_CODE_SESSION TalkExceptionCode = 51
  TalkExceptionCode_EXPIRED_REVISION TalkExceptionCode = 52
  TalkExceptionCode_NOT_YET_PHONE_NUMBER TalkExceptionCode = 54
  TalkExceptionCode_BAD_CALL_NUMBER TalkExceptionCode = 55
  TalkExceptionCode_UNAVAILABLE_CALL_NUMBER TalkExceptionCode = 56
  TalkExceptionCode_NOT_SUPPORT_CALL_SERVICE TalkExceptionCode = 57
  TalkExceptionCode_CONGESTION_CONTROL TalkExceptionCode = 58
  TalkExceptionCode_NO_BALANCE TalkExceptionCode = 59
  TalkExceptionCode_NOT_PERMITTED_CALLER_ID TalkExceptionCode = 60
  TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED TalkExceptionCode = 61
  TalkExceptionCode_CALLER_ID_VERIFICATION_REQUIRED TalkExceptionCode = 62
  TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED TalkExceptionCode = 63
  TalkExceptionCode_MESSAGE_NOT_FOUND TalkExceptionCode = 64
  TalkExceptionCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT TalkExceptionCode = 65
  TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED TalkExceptionCode = 66
  TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED TalkExceptionCode = 67
  TalkExceptionCode_INVALID_PASSWORD_FORMAT TalkExceptionCode = 69
  TalkExceptionCode_FEATURE_RESTRICTED TalkExceptionCode = 70
  TalkExceptionCode_MESSAGE_NOT_DESTRUCTIBLE TalkExceptionCode = 71
  TalkExceptionCode_PAID_CALL_REDEEM_FAILED TalkExceptionCode = 72
  TalkExceptionCode_PREVENTED_JOIN_BY_TICKET TalkExceptionCode = 73
  TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT TalkExceptionCode = 75
  TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY TalkExceptionCode = 76
  TalkExceptionCode_SECURITY_CENTER_NOT_VERIFIED TalkExceptionCode = 77
  TalkExceptionCode_SECURITY_CENTER_BLOCKED_BY_SETTING TalkExceptionCode = 78
  TalkExceptionCode_SECURITY_CENTER_BLOCKED TalkExceptionCode = 79
  TalkExceptionCode_TALK_PROXY_EXCEPTION TalkExceptionCode = 80
  TalkExceptionCode_E2EE_INVALID_PROTOCOL TalkExceptionCode = 81
  TalkExceptionCode_E2EE_RETRY_ENCRYPT TalkExceptionCode = 82
  TalkExceptionCode_E2EE_UPDATE_SENDER_KEY TalkExceptionCode = 83
  TalkExceptionCode_E2EE_UPDATE_RECEIVER_KEY TalkExceptionCode = 84
  TalkExceptionCode_E2EE_INVALID_ARGUMENT TalkExceptionCode = 85
  TalkExceptionCode_E2EE_INVALID_VERSION TalkExceptionCode = 86
  TalkExceptionCode_E2EE_SENDER_DISABLED TalkExceptionCode = 87
  TalkExceptionCode_E2EE_RECEIVER_DISABLED TalkExceptionCode = 88
  TalkExceptionCode_E2EE_SENDER_NOT_ALLOWED TalkExceptionCode = 89
  TalkExceptionCode_E2EE_RECEIVER_NOT_ALLOWED TalkExceptionCode = 90
  TalkExceptionCode_E2EE_RESEND_FAIL TalkExceptionCode = 91
  TalkExceptionCode_E2EE_RESEND_OK TalkExceptionCode = 92
  TalkExceptionCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA TalkExceptionCode = 93
  TalkExceptionCode_E2EE_UPDATE_PRIMARY_DEVICE TalkExceptionCode = 94
  TalkExceptionCode_SUCCESS TalkExceptionCode = 95
  TalkExceptionCode_CANCEL TalkExceptionCode = 96
  TalkExceptionCode_E2EE_PRIMARY_NOT_SUPPORT TalkExceptionCode = 97
  TalkExceptionCode_E2EE_RETRY_PLAIN TalkExceptionCode = 98
  TalkExceptionCode_E2EE_RECREATE_GROUP_KEY TalkExceptionCode = 99
  TalkExceptionCode_E2EE_GROUP_TOO_MANY_MEMBERS TalkExceptionCode = 100
  TalkExceptionCode_SERVER_BUSY TalkExceptionCode = 101
  TalkExceptionCode_NOT_ALLOWED_ADD_FOLLOW TalkExceptionCode = 102
  TalkExceptionCode_INCOMING_FRIEND_REQUEST_LIMIT TalkExceptionCode = 103
  TalkExceptionCode_OUTGOING_FRIEND_REQUEST_LIMIT TalkExceptionCode = 104
  TalkExceptionCode_OUTGOING_FRIEND_REQUEST_QUOTA TalkExceptionCode = 105
  TalkExceptionCode_DUPLICATED TalkExceptionCode = 106
  TalkExceptionCode_BANNED TalkExceptionCode = 107
  TalkExceptionCode_NOT_AN_INVITEE TalkExceptionCode = 108
  TalkExceptionCode_NOT_AN_OUTSIDER TalkExceptionCode = 109
  TalkExceptionCode_EMPTY_GROUP TalkExceptionCode = 111
  TalkExceptionCode_EXCEED_FOLLOW_LIMIT TalkExceptionCode = 112
  TalkExceptionCode_UNSUPPORTED_ACCOUNT_TYPE TalkExceptionCode = 113
  TalkExceptionCode_AGREEMENT_REQUIRED TalkExceptionCode = 114
)

func (p TalkExceptionCode) String() string {
  switch p {
  case TalkExceptionCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case TalkExceptionCode_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case TalkExceptionCode_DB_FAILED: return "DB_FAILED"
  case TalkExceptionCode_INVALID_STATE: return "INVALID_STATE"
  case TalkExceptionCode_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case TalkExceptionCode_NOT_FOUND: return "NOT_FOUND"
  case TalkExceptionCode_INVALID_LENGTH: return "INVALID_LENGTH"
  case TalkExceptionCode_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case TalkExceptionCode_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case TalkExceptionCode_INVALID_MID: return "INVALID_MID"
  case TalkExceptionCode_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case TalkExceptionCode_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case TalkExceptionCode_NOT_READY: return "NOT_READY"
  case TalkExceptionCode_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case TalkExceptionCode_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case TalkExceptionCode_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case TalkExceptionCode_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case TalkExceptionCode_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case TalkExceptionCode_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case TalkExceptionCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case TalkExceptionCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case TalkExceptionCode_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case TalkExceptionCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case TalkExceptionCode_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case TalkExceptionCode_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case TalkExceptionCode_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case TalkExceptionCode_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case TalkExceptionCode_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case TalkExceptionCode_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case TalkExceptionCode_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case TalkExceptionCode_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case TalkExceptionCode_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case TalkExceptionCode_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case TalkExceptionCode_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case TalkExceptionCode_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case TalkExceptionCode_NOT_FRIEND: return "NOT_FRIEND"
  case TalkExceptionCode_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case TalkExceptionCode_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case TalkExceptionCode_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case TalkExceptionCode_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case TalkExceptionCode_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case TalkExceptionCode_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case TalkExceptionCode_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case TalkExceptionCode_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case TalkExceptionCode_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case TalkExceptionCode_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case TalkExceptionCode_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case TalkExceptionCode_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case TalkExceptionCode_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case TalkExceptionCode_MUST_UPGRADE: return "MUST_UPGRADE"
  case TalkExceptionCode_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case TalkExceptionCode_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case TalkExceptionCode_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case TalkExceptionCode_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case TalkExceptionCode_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case TalkExceptionCode_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case TalkExceptionCode_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case TalkExceptionCode_NO_BALANCE: return "NO_BALANCE"
  case TalkExceptionCode_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case TalkExceptionCode_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case TalkExceptionCode_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case TalkExceptionCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case TalkExceptionCode_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case TalkExceptionCode_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case TalkExceptionCode_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case TalkExceptionCode_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case TalkExceptionCode_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  case TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case TalkExceptionCode_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case TalkExceptionCode_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case TalkExceptionCode_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case TalkExceptionCode_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case TalkExceptionCode_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case TalkExceptionCode_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case TalkExceptionCode_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case TalkExceptionCode_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case TalkExceptionCode_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case TalkExceptionCode_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case TalkExceptionCode_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case TalkExceptionCode_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case TalkExceptionCode_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case TalkExceptionCode_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case TalkExceptionCode_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case TalkExceptionCode_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case TalkExceptionCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case TalkExceptionCode_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case TalkExceptionCode_SUCCESS: return "SUCCESS"
  case TalkExceptionCode_CANCEL: return "CANCEL"
  case TalkExceptionCode_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case TalkExceptionCode_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case TalkExceptionCode_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case TalkExceptionCode_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case TalkExceptionCode_SERVER_BUSY: return "SERVER_BUSY"
  case TalkExceptionCode_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case TalkExceptionCode_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case TalkExceptionCode_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case TalkExceptionCode_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case TalkExceptionCode_DUPLICATED: return "DUPLICATED"
  case TalkExceptionCode_BANNED: return "BANNED"
  case TalkExceptionCode_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case TalkExceptionCode_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case TalkExceptionCode_EMPTY_GROUP: return "EMPTY_GROUP"
  case TalkExceptionCode_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  case TalkExceptionCode_UNSUPPORTED_ACCOUNT_TYPE: return "UNSUPPORTED_ACCOUNT_TYPE"
  case TalkExceptionCode_AGREEMENT_REQUIRED: return "AGREEMENT_REQUIRED"
  }
  return "<UNSET>"
}

func TalkExceptionCodeFromString(s string) (TalkExceptionCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return TalkExceptionCode_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return TalkExceptionCode_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return TalkExceptionCode_DB_FAILED, nil 
  case "INVALID_STATE": return TalkExceptionCode_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return TalkExceptionCode_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return TalkExceptionCode_NOT_FOUND, nil 
  case "INVALID_LENGTH": return TalkExceptionCode_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return TalkExceptionCode_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return TalkExceptionCode_NOT_AUTHORIZED_DEVICE, nil 
  case "INVALID_MID": return TalkExceptionCode_INVALID_MID, nil 
  case "NOT_A_MEMBER": return TalkExceptionCode_NOT_A_MEMBER, nil 
  case "INCOMPATIBLE_APP_VERSION": return TalkExceptionCode_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return TalkExceptionCode_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return TalkExceptionCode_NOT_AVAILABLE_SESSION, nil 
  case "NOT_AUTHORIZED_SESSION": return TalkExceptionCode_NOT_AUTHORIZED_SESSION, nil 
  case "SYSTEM_ERROR": return TalkExceptionCode_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return TalkExceptionCode_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return TalkExceptionCode_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return TalkExceptionCode_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return TalkExceptionCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return TalkExceptionCode_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return TalkExceptionCode_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return TalkExceptionCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return TalkExceptionCode_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return TalkExceptionCode_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return TalkExceptionCode_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return TalkExceptionCode_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return TalkExceptionCode_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return TalkExceptionCode_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return TalkExceptionCode_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return TalkExceptionCode_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return TalkExceptionCode_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return TalkExceptionCode_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return TalkExceptionCode_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return TalkExceptionCode_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return TalkExceptionCode_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return TalkExceptionCode_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return TalkExceptionCode_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return TalkExceptionCode_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return TalkExceptionCode_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return TalkExceptionCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return TalkExceptionCode_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return TalkExceptionCode_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return TalkExceptionCode_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return TalkExceptionCode_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return TalkExceptionCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return TalkExceptionCode_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return TalkExceptionCode_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return TalkExceptionCode_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return TalkExceptionCode_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return TalkExceptionCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return TalkExceptionCode_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return TalkExceptionCode_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return TalkExceptionCode_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return TalkExceptionCode_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return TalkExceptionCode_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return TalkExceptionCode_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return TalkExceptionCode_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return TalkExceptionCode_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return TalkExceptionCode_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return TalkExceptionCode_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return TalkExceptionCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return TalkExceptionCode_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return TalkExceptionCode_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return TalkExceptionCode_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return TalkExceptionCode_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return TalkExceptionCode_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": return TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return TalkExceptionCode_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return TalkExceptionCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return TalkExceptionCode_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return TalkExceptionCode_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return TalkExceptionCode_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return TalkExceptionCode_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return TalkExceptionCode_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return TalkExceptionCode_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return TalkExceptionCode_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return TalkExceptionCode_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return TalkExceptionCode_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return TalkExceptionCode_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return TalkExceptionCode_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return TalkExceptionCode_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return TalkExceptionCode_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return TalkExceptionCode_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return TalkExceptionCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return TalkExceptionCode_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return TalkExceptionCode_SUCCESS, nil 
  case "CANCEL": return TalkExceptionCode_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return TalkExceptionCode_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return TalkExceptionCode_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return TalkExceptionCode_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return TalkExceptionCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return TalkExceptionCode_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return TalkExceptionCode_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return TalkExceptionCode_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return TalkExceptionCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return TalkExceptionCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return TalkExceptionCode_DUPLICATED, nil 
  case "BANNED": return TalkExceptionCode_BANNED, nil 
  case "NOT_AN_INVITEE": return TalkExceptionCode_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return TalkExceptionCode_NOT_AN_OUTSIDER, nil 
  case "EMPTY_GROUP": return TalkExceptionCode_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return TalkExceptionCode_EXCEED_FOLLOW_LIMIT, nil 
  case "UNSUPPORTED_ACCOUNT_TYPE": return TalkExceptionCode_UNSUPPORTED_ACCOUNT_TYPE, nil 
  case "AGREEMENT_REQUIRED": return TalkExceptionCode_AGREEMENT_REQUIRED, nil 
  }
  return TalkExceptionCode(0), fmt.Errorf("not a valid TalkExceptionCode string")
}


func TalkExceptionCodePtr(v TalkExceptionCode) *TalkExceptionCode { return &v }

func (p TalkExceptionCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TalkExceptionCode) UnmarshalText(text []byte) error {
q, err := TalkExceptionCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TalkExceptionCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TalkExceptionCode(v)
return nil
}

func (p * TalkExceptionCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactModificationType int64
const (
  ContactModificationType_ADD ContactModificationType = 0
  ContactModificationType_REMOVE ContactModificationType = 1
  ContactModificationType_MODIFY ContactModificationType = 2
)

func (p ContactModificationType) String() string {
  switch p {
  case ContactModificationType_ADD: return "ADD"
  case ContactModificationType_REMOVE: return "REMOVE"
  case ContactModificationType_MODIFY: return "MODIFY"
  }
  return "<UNSET>"
}

func ContactModificationTypeFromString(s string) (ContactModificationType, error) {
  switch s {
  case "ADD": return ContactModificationType_ADD, nil 
  case "REMOVE": return ContactModificationType_REMOVE, nil 
  case "MODIFY": return ContactModificationType_MODIFY, nil 
  }
  return ContactModificationType(0), fmt.Errorf("not a valid ContactModificationType string")
}


func ContactModificationTypePtr(v ContactModificationType) *ContactModificationType { return &v }

func (p ContactModificationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactModificationType) UnmarshalText(text []byte) error {
q, err := ContactModificationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactModificationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactModificationType(v)
return nil
}

func (p * ContactModificationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdateNotificationTokenType int64
const (
  UpdateNotificationTokenType_APPLE_APNS UpdateNotificationTokenType = 1
  UpdateNotificationTokenType_GOOGLE_C2DM UpdateNotificationTokenType = 2
  UpdateNotificationTokenType_NHN_NNI UpdateNotificationTokenType = 3
  UpdateNotificationTokenType_SKT_AOM UpdateNotificationTokenType = 4
  UpdateNotificationTokenType_MS_MPNS UpdateNotificationTokenType = 5
  UpdateNotificationTokenType_RIM_BIS UpdateNotificationTokenType = 6
  UpdateNotificationTokenType_GOOGLE_GCM UpdateNotificationTokenType = 7
  UpdateNotificationTokenType_NOKIA_NNAPI UpdateNotificationTokenType = 8
  UpdateNotificationTokenType_TIZEN UpdateNotificationTokenType = 9
  UpdateNotificationTokenType_MOZILLA_SIMPLE UpdateNotificationTokenType = 10
  UpdateNotificationTokenType_LINE_BOT UpdateNotificationTokenType = 17
  UpdateNotificationTokenType_LINE_WAP UpdateNotificationTokenType = 18
  UpdateNotificationTokenType_APPLE_APNS_VOIP UpdateNotificationTokenType = 19
  UpdateNotificationTokenType_MS_WNS UpdateNotificationTokenType = 20
  UpdateNotificationTokenType_GOOGLE_FCM UpdateNotificationTokenType = 21
  UpdateNotificationTokenType_CLOVA UpdateNotificationTokenType = 22
  UpdateNotificationTokenType_CLOVA_VOIP UpdateNotificationTokenType = 23
  UpdateNotificationTokenType_HUAWEI_HCM UpdateNotificationTokenType = 24
)

func (p UpdateNotificationTokenType) String() string {
  switch p {
  case UpdateNotificationTokenType_APPLE_APNS: return "APPLE_APNS"
  case UpdateNotificationTokenType_GOOGLE_C2DM: return "GOOGLE_C2DM"
  case UpdateNotificationTokenType_NHN_NNI: return "NHN_NNI"
  case UpdateNotificationTokenType_SKT_AOM: return "SKT_AOM"
  case UpdateNotificationTokenType_MS_MPNS: return "MS_MPNS"
  case UpdateNotificationTokenType_RIM_BIS: return "RIM_BIS"
  case UpdateNotificationTokenType_GOOGLE_GCM: return "GOOGLE_GCM"
  case UpdateNotificationTokenType_NOKIA_NNAPI: return "NOKIA_NNAPI"
  case UpdateNotificationTokenType_TIZEN: return "TIZEN"
  case UpdateNotificationTokenType_MOZILLA_SIMPLE: return "MOZILLA_SIMPLE"
  case UpdateNotificationTokenType_LINE_BOT: return "LINE_BOT"
  case UpdateNotificationTokenType_LINE_WAP: return "LINE_WAP"
  case UpdateNotificationTokenType_APPLE_APNS_VOIP: return "APPLE_APNS_VOIP"
  case UpdateNotificationTokenType_MS_WNS: return "MS_WNS"
  case UpdateNotificationTokenType_GOOGLE_FCM: return "GOOGLE_FCM"
  case UpdateNotificationTokenType_CLOVA: return "CLOVA"
  case UpdateNotificationTokenType_CLOVA_VOIP: return "CLOVA_VOIP"
  case UpdateNotificationTokenType_HUAWEI_HCM: return "HUAWEI_HCM"
  }
  return "<UNSET>"
}

func UpdateNotificationTokenTypeFromString(s string) (UpdateNotificationTokenType, error) {
  switch s {
  case "APPLE_APNS": return UpdateNotificationTokenType_APPLE_APNS, nil 
  case "GOOGLE_C2DM": return UpdateNotificationTokenType_GOOGLE_C2DM, nil 
  case "NHN_NNI": return UpdateNotificationTokenType_NHN_NNI, nil 
  case "SKT_AOM": return UpdateNotificationTokenType_SKT_AOM, nil 
  case "MS_MPNS": return UpdateNotificationTokenType_MS_MPNS, nil 
  case "RIM_BIS": return UpdateNotificationTokenType_RIM_BIS, nil 
  case "GOOGLE_GCM": return UpdateNotificationTokenType_GOOGLE_GCM, nil 
  case "NOKIA_NNAPI": return UpdateNotificationTokenType_NOKIA_NNAPI, nil 
  case "TIZEN": return UpdateNotificationTokenType_TIZEN, nil 
  case "MOZILLA_SIMPLE": return UpdateNotificationTokenType_MOZILLA_SIMPLE, nil 
  case "LINE_BOT": return UpdateNotificationTokenType_LINE_BOT, nil 
  case "LINE_WAP": return UpdateNotificationTokenType_LINE_WAP, nil 
  case "APPLE_APNS_VOIP": return UpdateNotificationTokenType_APPLE_APNS_VOIP, nil 
  case "MS_WNS": return UpdateNotificationTokenType_MS_WNS, nil 
  case "GOOGLE_FCM": return UpdateNotificationTokenType_GOOGLE_FCM, nil 
  case "CLOVA": return UpdateNotificationTokenType_CLOVA, nil 
  case "CLOVA_VOIP": return UpdateNotificationTokenType_CLOVA_VOIP, nil 
  case "HUAWEI_HCM": return UpdateNotificationTokenType_HUAWEI_HCM, nil 
  }
  return UpdateNotificationTokenType(0), fmt.Errorf("not a valid UpdateNotificationTokenType string")
}


func UpdateNotificationTokenTypePtr(v UpdateNotificationTokenType) *UpdateNotificationTokenType { return &v }

func (p UpdateNotificationTokenType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdateNotificationTokenType) UnmarshalText(text []byte) error {
q, err := UpdateNotificationTokenTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdateNotificationTokenType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdateNotificationTokenType(v)
return nil
}

func (p * UpdateNotificationTokenType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProfileAttribute int64
const (
  ProfileAttribute_ALL ProfileAttribute = 511
  ProfileAttribute_EMAIL ProfileAttribute = 1
  ProfileAttribute_DISPLAY_NAME ProfileAttribute = 2
  ProfileAttribute_PHONETIC_NAME ProfileAttribute = 4
  ProfileAttribute_PICTURE ProfileAttribute = 8
  ProfileAttribute_STATUS_MESSAGE ProfileAttribute = 16
  ProfileAttribute_ALLOW_SEARCH_BY_USERID ProfileAttribute = 32
  ProfileAttribute_ALLOW_SEARCH_BY_EMAIL ProfileAttribute = 64
  ProfileAttribute_BUDDY_STATUS ProfileAttribute = 128
  ProfileAttribute_MUSIC_PROFILE ProfileAttribute = 256
  ProfileAttribute_AVATAR_PROFILE ProfileAttribute = 512
)

func (p ProfileAttribute) String() string {
  switch p {
  case ProfileAttribute_ALL: return "ALL"
  case ProfileAttribute_EMAIL: return "EMAIL"
  case ProfileAttribute_DISPLAY_NAME: return "DISPLAY_NAME"
  case ProfileAttribute_PHONETIC_NAME: return "PHONETIC_NAME"
  case ProfileAttribute_PICTURE: return "PICTURE"
  case ProfileAttribute_STATUS_MESSAGE: return "STATUS_MESSAGE"
  case ProfileAttribute_ALLOW_SEARCH_BY_USERID: return "ALLOW_SEARCH_BY_USERID"
  case ProfileAttribute_ALLOW_SEARCH_BY_EMAIL: return "ALLOW_SEARCH_BY_EMAIL"
  case ProfileAttribute_BUDDY_STATUS: return "BUDDY_STATUS"
  case ProfileAttribute_MUSIC_PROFILE: return "MUSIC_PROFILE"
  case ProfileAttribute_AVATAR_PROFILE: return "AVATAR_PROFILE"
  }
  return "<UNSET>"
}

func ProfileAttributeFromString(s string) (ProfileAttribute, error) {
  switch s {
  case "ALL": return ProfileAttribute_ALL, nil 
  case "EMAIL": return ProfileAttribute_EMAIL, nil 
  case "DISPLAY_NAME": return ProfileAttribute_DISPLAY_NAME, nil 
  case "PHONETIC_NAME": return ProfileAttribute_PHONETIC_NAME, nil 
  case "PICTURE": return ProfileAttribute_PICTURE, nil 
  case "STATUS_MESSAGE": return ProfileAttribute_STATUS_MESSAGE, nil 
  case "ALLOW_SEARCH_BY_USERID": return ProfileAttribute_ALLOW_SEARCH_BY_USERID, nil 
  case "ALLOW_SEARCH_BY_EMAIL": return ProfileAttribute_ALLOW_SEARCH_BY_EMAIL, nil 
  case "BUDDY_STATUS": return ProfileAttribute_BUDDY_STATUS, nil 
  case "MUSIC_PROFILE": return ProfileAttribute_MUSIC_PROFILE, nil 
  case "AVATAR_PROFILE": return ProfileAttribute_AVATAR_PROFILE, nil 
  }
  return ProfileAttribute(0), fmt.Errorf("not a valid ProfileAttribute string")
}


func ProfileAttributePtr(v ProfileAttribute) *ProfileAttribute { return &v }

func (p ProfileAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProfileAttribute) UnmarshalText(text []byte) error {
q, err := ProfileAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProfileAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProfileAttribute(v)
return nil
}

func (p * ProfileAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdateExtendedProfileAttributeAttr int64
const (
  UpdateExtendedProfileAttributeAttr_BIRTHDAY UpdateExtendedProfileAttributeAttr = 0
)

func (p UpdateExtendedProfileAttributeAttr) String() string {
  switch p {
  case UpdateExtendedProfileAttributeAttr_BIRTHDAY: return "BIRTHDAY"
  }
  return "<UNSET>"
}

func UpdateExtendedProfileAttributeAttrFromString(s string) (UpdateExtendedProfileAttributeAttr, error) {
  switch s {
  case "BIRTHDAY": return UpdateExtendedProfileAttributeAttr_BIRTHDAY, nil 
  }
  return UpdateExtendedProfileAttributeAttr(0), fmt.Errorf("not a valid UpdateExtendedProfileAttributeAttr string")
}


func UpdateExtendedProfileAttributeAttrPtr(v UpdateExtendedProfileAttributeAttr) *UpdateExtendedProfileAttributeAttr { return &v }

func (p UpdateExtendedProfileAttributeAttr) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdateExtendedProfileAttributeAttr) UnmarshalText(text []byte) error {
q, err := UpdateExtendedProfileAttributeAttrFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdateExtendedProfileAttributeAttr) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdateExtendedProfileAttributeAttr(v)
return nil
}

func (p * UpdateExtendedProfileAttributeAttr) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59122ec int64
const (
  C59122ec_BEACON_AGREEMENT C59122ec = 1
  C59122ec_BLUETOOTH C59122ec = 2
  C59122ec_SHAKE_AGREEMENT C59122ec = 3
  C59122ec_AUTO_SUGGEST C59122ec = 4
  C59122ec_CHATROOM_CAPTURE C59122ec = 5
  C59122ec_CHATROOM_MINIMIZEBROWSER C59122ec = 6
  C59122ec_CHATROOM_MOBILESAFARI C59122ec = 7
  C59122ec_VIDEO_HIGHTLIGHT_WIZARD C59122ec = 8
  C59122ec_CHAT_FOLDER C59122ec = 9
)

func (p C59122ec) String() string {
  switch p {
  case C59122ec_BEACON_AGREEMENT: return "BEACON_AGREEMENT"
  case C59122ec_BLUETOOTH: return "BLUETOOTH"
  case C59122ec_SHAKE_AGREEMENT: return "SHAKE_AGREEMENT"
  case C59122ec_AUTO_SUGGEST: return "AUTO_SUGGEST"
  case C59122ec_CHATROOM_CAPTURE: return "CHATROOM_CAPTURE"
  case C59122ec_CHATROOM_MINIMIZEBROWSER: return "CHATROOM_MINIMIZEBROWSER"
  case C59122ec_CHATROOM_MOBILESAFARI: return "CHATROOM_MOBILESAFARI"
  case C59122ec_VIDEO_HIGHTLIGHT_WIZARD: return "VIDEO_HIGHTLIGHT_WIZARD"
  case C59122ec_CHAT_FOLDER: return "CHAT_FOLDER"
  }
  return "<UNSET>"
}

func C59122ecFromString(s string) (C59122ec, error) {
  switch s {
  case "BEACON_AGREEMENT": return C59122ec_BEACON_AGREEMENT, nil 
  case "BLUETOOTH": return C59122ec_BLUETOOTH, nil 
  case "SHAKE_AGREEMENT": return C59122ec_SHAKE_AGREEMENT, nil 
  case "AUTO_SUGGEST": return C59122ec_AUTO_SUGGEST, nil 
  case "CHATROOM_CAPTURE": return C59122ec_CHATROOM_CAPTURE, nil 
  case "CHATROOM_MINIMIZEBROWSER": return C59122ec_CHATROOM_MINIMIZEBROWSER, nil 
  case "CHATROOM_MOBILESAFARI": return C59122ec_CHATROOM_MOBILESAFARI, nil 
  case "VIDEO_HIGHTLIGHT_WIZARD": return C59122ec_VIDEO_HIGHTLIGHT_WIZARD, nil 
  case "CHAT_FOLDER": return C59122ec_CHAT_FOLDER, nil 
  }
  return C59122ec(0), fmt.Errorf("not a valid C59122ec string")
}


func C59122ecPtr(v C59122ec) *C59122ec { return &v }

func (p C59122ec) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59122ec) UnmarshalText(text []byte) error {
q, err := C59122ecFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59122ec) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59122ec(v)
return nil
}

func (p * C59122ec) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59430gc int64
const (
  C59430gc_LOCATION_OS C59430gc = 1
  C59430gc_LOCATION_APP C59430gc = 2
  C59430gc_VIDEO_AUTO_PLAY C59430gc = 3
  C59430gc_HNI C59430gc = 4
  C59430gc_AUTO_SUGGEST_LANG C59430gc = 5
  C59430gc_CHAT_EFFECT_CACHED_CONTENT_LIST C59430gc = 6
)

func (p C59430gc) String() string {
  switch p {
  case C59430gc_LOCATION_OS: return "LOCATION_OS"
  case C59430gc_LOCATION_APP: return "LOCATION_APP"
  case C59430gc_VIDEO_AUTO_PLAY: return "VIDEO_AUTO_PLAY"
  case C59430gc_HNI: return "HNI"
  case C59430gc_AUTO_SUGGEST_LANG: return "AUTO_SUGGEST_LANG"
  case C59430gc_CHAT_EFFECT_CACHED_CONTENT_LIST: return "CHAT_EFFECT_CACHED_CONTENT_LIST"
  }
  return "<UNSET>"
}

func C59430gcFromString(s string) (C59430gc, error) {
  switch s {
  case "LOCATION_OS": return C59430gc_LOCATION_OS, nil 
  case "LOCATION_APP": return C59430gc_LOCATION_APP, nil 
  case "VIDEO_AUTO_PLAY": return C59430gc_VIDEO_AUTO_PLAY, nil 
  case "HNI": return C59430gc_HNI, nil 
  case "AUTO_SUGGEST_LANG": return C59430gc_AUTO_SUGGEST_LANG, nil 
  case "CHAT_EFFECT_CACHED_CONTENT_LIST": return C59430gc_CHAT_EFFECT_CACHED_CONTENT_LIST, nil 
  }
  return C59430gc(0), fmt.Errorf("not a valid C59430gc string")
}


func C59430gcPtr(v C59430gc) *C59430gc { return &v }

func (p C59430gc) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59430gc) UnmarshalText(text []byte) error {
q, err := C59430gcFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59430gc) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59430gc(v)
return nil
}

func (p * C59430gc) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59756ii int64
const (
  C59756ii_NOTIFICATION_ENABLE C59756ii = 0
  C59756ii_NOTIFICATION_MUTE_EXPIRATION C59756ii = 1
  C59756ii_NOTIFICATION_NEW_MESSAGE C59756ii = 2
  C59756ii_NOTIFICATION_GROUP_INVITATION C59756ii = 3
  C59756ii_NOTIFICATION_SHOW_MESSAGE C59756ii = 4
  C59756ii_NOTIFICATION_INCOMING_CALL C59756ii = 5
  C59756ii_PRIVACY_SYNC_CONTACTS C59756ii = 6
  C59756ii_PRIVACY_SEARCH_BY_PHONE_NUMBER C59756ii = 7
  C59756ii_NOTIFICATION_SOUND_MESSAGE C59756ii = 8
  C59756ii_NOTIFICATION_SOUND_GROUP C59756ii = 9
  C59756ii_CONTACT_MY_TICKET C59756ii = 10
  C59756ii_IDENTITY_PROVIDER C59756ii = 11
  C59756ii_IDENTITY_IDENTIFIER C59756ii = 12
  C59756ii_PRIVACY_SEARCH_BY_USERID C59756ii = 13
  C59756ii_PRIVACY_SEARCH_BY_EMAIL C59756ii = 14
  C59756ii_PREFERENCE_LOCALE C59756ii = 15
  C59756ii_NOTIFICATION_DISABLED_WITH_SUB C59756ii = 16
  C59756ii_NOTIFICATION_PAYMENT C59756ii = 17
  C59756ii_SECURITY_CENTER_SETTINGS C59756ii = 18
  C59756ii_SNS_ACCOUNT C59756ii = 19
  C59756ii_PHONE_REGISTRATION C59756ii = 20
  C59756ii_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN C59756ii = 21
  C59756ii_CUSTOM_MODE C59756ii = 22
  C59756ii_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME C59756ii = 23
  C59756ii_EMAIL_CONFIRMATION_STATUS C59756ii = 24
  C59756ii_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND C59756ii = 25
  C59756ii_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL C59756ii = 26
  C59756ii_PRIVACY_AGREE_USE_PAIDCALL C59756ii = 27
  C59756ii_ACCOUNT_MIGRATION_PINCODE C59756ii = 28
  C59756ii_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE C59756ii = 29
  C59756ii_PRIVACY_ALLOW_FRIEND_REQUEST C59756ii = 30
  C59756ii_E2EE_ENABLE C59756ii = 33
  C59756ii_HITOKOTO_BACKUP_REQUESTED C59756ii = 34
  C59756ii_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME C59756ii = 35
  C59756ii_CONTACT_ALLOW_FOLLOWING C59756ii = 36
  C59756ii_PRIVACY_ALLOW_NEARBY C59756ii = 37
  C59756ii_AGREEMENT_NEARBY C59756ii = 38
  C59756ii_AGREEMENT_SQUARE C59756ii = 39
  C59756ii_NOTIFICATION_MENTION C59756ii = 40
  C59756ii_ALLOW_UNREGISTRATION_SECONDARY_DEVICE C59756ii = 41
  C59756ii_AGREEMENT_BOT_USE C59756ii = 42
  C59756ii_AGREEMENT_SHAKE_FUNCTION C59756ii = 43
  C59756ii_AGREEMENT_MOBILE_CONTACT_NAME C59756ii = 44
  C59756ii_NOTIFICATION_THUMBNAIL C59756ii = 45
  C59756ii_AGREEMENT_SOUND_TO_TEXT C59756ii = 46
  C59756ii_AGREEMENT_PRIVACY_POLICY_VERSION C59756ii = 47
  C59756ii_AGREEMENT_AD_BY_WEB_ACCESS C59756ii = 48
  C59756ii_AGREEMENT_PHONE_NUMBER_MATCHING C59756ii = 49
  C59756ii_AGREEMENT_COMMUNICATION_INFO C59756ii = 50
  C59756ii_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS C59756ii = 51
  C59756ii_AGREEMENT_THINGS_WIRELESS_COMMUNICATION C59756ii = 52
  C59756ii_AGREEMENT_GDPR C59756ii = 53
  C59756ii_PRIVACY_STATUS_MESSAGE_HISTORY C59756ii = 54
  C59756ii_AGREEMENT_PROVIDE_LOCATION C59756ii = 55
  C59756ii_AGREEMENT_BEACON C59756ii = 56
  C59756ii_PRIVACY_PROFILE_HISTORY C59756ii = 57
  C59756ii_AGREEMENT_CONTENTS_SUGGEST C59756ii = 58
  C59756ii_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION C59756ii = 59
  C59756ii_PRIVACY_AGE_RESULT C59756ii = 60
  C59756ii_PRIVACY_AGE_RESULT_RECEIVED C59756ii = 61
  C59756ii_AGREEMENT_OCR_IMAGE_COLLECTION C59756ii = 62
  C59756ii_PRIVACY_ALLOW_FOLLOW C59756ii = 63
  C59756ii_PRIVACY_SHOW_FOLLOW_LIST C59756ii = 64
  C59756ii_NOTIFICATION_BADGE_TALK_ONLY C59756ii = 65
)

func (p C59756ii) String() string {
  switch p {
  case C59756ii_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case C59756ii_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case C59756ii_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case C59756ii_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case C59756ii_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case C59756ii_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case C59756ii_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case C59756ii_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case C59756ii_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case C59756ii_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case C59756ii_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case C59756ii_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case C59756ii_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case C59756ii_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case C59756ii_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case C59756ii_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case C59756ii_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case C59756ii_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case C59756ii_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  case C59756ii_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case C59756ii_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case C59756ii_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case C59756ii_CUSTOM_MODE: return "CUSTOM_MODE"
  case C59756ii_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case C59756ii_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case C59756ii_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  case C59756ii_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case C59756ii_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case C59756ii_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case C59756ii_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case C59756ii_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case C59756ii_E2EE_ENABLE: return "E2EE_ENABLE"
  case C59756ii_HITOKOTO_BACKUP_REQUESTED: return "HITOKOTO_BACKUP_REQUESTED"
  case C59756ii_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  case C59756ii_CONTACT_ALLOW_FOLLOWING: return "CONTACT_ALLOW_FOLLOWING"
  case C59756ii_PRIVACY_ALLOW_NEARBY: return "PRIVACY_ALLOW_NEARBY"
  case C59756ii_AGREEMENT_NEARBY: return "AGREEMENT_NEARBY"
  case C59756ii_AGREEMENT_SQUARE: return "AGREEMENT_SQUARE"
  case C59756ii_NOTIFICATION_MENTION: return "NOTIFICATION_MENTION"
  case C59756ii_ALLOW_UNREGISTRATION_SECONDARY_DEVICE: return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  case C59756ii_AGREEMENT_BOT_USE: return "AGREEMENT_BOT_USE"
  case C59756ii_AGREEMENT_SHAKE_FUNCTION: return "AGREEMENT_SHAKE_FUNCTION"
  case C59756ii_AGREEMENT_MOBILE_CONTACT_NAME: return "AGREEMENT_MOBILE_CONTACT_NAME"
  case C59756ii_NOTIFICATION_THUMBNAIL: return "NOTIFICATION_THUMBNAIL"
  case C59756ii_AGREEMENT_SOUND_TO_TEXT: return "AGREEMENT_SOUND_TO_TEXT"
  case C59756ii_AGREEMENT_PRIVACY_POLICY_VERSION: return "AGREEMENT_PRIVACY_POLICY_VERSION"
  case C59756ii_AGREEMENT_AD_BY_WEB_ACCESS: return "AGREEMENT_AD_BY_WEB_ACCESS"
  case C59756ii_AGREEMENT_PHONE_NUMBER_MATCHING: return "AGREEMENT_PHONE_NUMBER_MATCHING"
  case C59756ii_AGREEMENT_COMMUNICATION_INFO: return "AGREEMENT_COMMUNICATION_INFO"
  case C59756ii_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS: return "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
  case C59756ii_AGREEMENT_THINGS_WIRELESS_COMMUNICATION: return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  case C59756ii_AGREEMENT_GDPR: return "AGREEMENT_GDPR"
  case C59756ii_PRIVACY_STATUS_MESSAGE_HISTORY: return "PRIVACY_STATUS_MESSAGE_HISTORY"
  case C59756ii_AGREEMENT_PROVIDE_LOCATION: return "AGREEMENT_PROVIDE_LOCATION"
  case C59756ii_AGREEMENT_BEACON: return "AGREEMENT_BEACON"
  case C59756ii_PRIVACY_PROFILE_HISTORY: return "PRIVACY_PROFILE_HISTORY"
  case C59756ii_AGREEMENT_CONTENTS_SUGGEST: return "AGREEMENT_CONTENTS_SUGGEST"
  case C59756ii_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION: return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  case C59756ii_PRIVACY_AGE_RESULT: return "PRIVACY_AGE_RESULT"
  case C59756ii_PRIVACY_AGE_RESULT_RECEIVED: return "PRIVACY_AGE_RESULT_RECEIVED"
  case C59756ii_AGREEMENT_OCR_IMAGE_COLLECTION: return "AGREEMENT_OCR_IMAGE_COLLECTION"
  case C59756ii_PRIVACY_ALLOW_FOLLOW: return "PRIVACY_ALLOW_FOLLOW"
  case C59756ii_PRIVACY_SHOW_FOLLOW_LIST: return "PRIVACY_SHOW_FOLLOW_LIST"
  case C59756ii_NOTIFICATION_BADGE_TALK_ONLY: return "NOTIFICATION_BADGE_TALK_ONLY"
  }
  return "<UNSET>"
}

func C59756iiFromString(s string) (C59756ii, error) {
  switch s {
  case "NOTIFICATION_ENABLE": return C59756ii_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return C59756ii_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return C59756ii_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return C59756ii_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return C59756ii_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return C59756ii_NOTIFICATION_INCOMING_CALL, nil 
  case "PRIVACY_SYNC_CONTACTS": return C59756ii_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return C59756ii_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return C59756ii_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return C59756ii_NOTIFICATION_SOUND_GROUP, nil 
  case "CONTACT_MY_TICKET": return C59756ii_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return C59756ii_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return C59756ii_IDENTITY_IDENTIFIER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return C59756ii_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return C59756ii_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PREFERENCE_LOCALE": return C59756ii_PREFERENCE_LOCALE, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return C59756ii_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return C59756ii_NOTIFICATION_PAYMENT, nil 
  case "SECURITY_CENTER_SETTINGS": return C59756ii_SECURITY_CENTER_SETTINGS, nil 
  case "SNS_ACCOUNT": return C59756ii_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return C59756ii_PHONE_REGISTRATION, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return C59756ii_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "CUSTOM_MODE": return C59756ii_CUSTOM_MODE, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return C59756ii_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "EMAIL_CONFIRMATION_STATUS": return C59756ii_EMAIL_CONFIRMATION_STATUS, nil 
  case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": return C59756ii_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return C59756ii_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return C59756ii_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return C59756ii_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return C59756ii_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return C59756ii_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "E2EE_ENABLE": return C59756ii_E2EE_ENABLE, nil 
  case "HITOKOTO_BACKUP_REQUESTED": return C59756ii_HITOKOTO_BACKUP_REQUESTED, nil 
  case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": return C59756ii_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil 
  case "CONTACT_ALLOW_FOLLOWING": return C59756ii_CONTACT_ALLOW_FOLLOWING, nil 
  case "PRIVACY_ALLOW_NEARBY": return C59756ii_PRIVACY_ALLOW_NEARBY, nil 
  case "AGREEMENT_NEARBY": return C59756ii_AGREEMENT_NEARBY, nil 
  case "AGREEMENT_SQUARE": return C59756ii_AGREEMENT_SQUARE, nil 
  case "NOTIFICATION_MENTION": return C59756ii_NOTIFICATION_MENTION, nil 
  case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": return C59756ii_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil 
  case "AGREEMENT_BOT_USE": return C59756ii_AGREEMENT_BOT_USE, nil 
  case "AGREEMENT_SHAKE_FUNCTION": return C59756ii_AGREEMENT_SHAKE_FUNCTION, nil 
  case "AGREEMENT_MOBILE_CONTACT_NAME": return C59756ii_AGREEMENT_MOBILE_CONTACT_NAME, nil 
  case "NOTIFICATION_THUMBNAIL": return C59756ii_NOTIFICATION_THUMBNAIL, nil 
  case "AGREEMENT_SOUND_TO_TEXT": return C59756ii_AGREEMENT_SOUND_TO_TEXT, nil 
  case "AGREEMENT_PRIVACY_POLICY_VERSION": return C59756ii_AGREEMENT_PRIVACY_POLICY_VERSION, nil 
  case "AGREEMENT_AD_BY_WEB_ACCESS": return C59756ii_AGREEMENT_AD_BY_WEB_ACCESS, nil 
  case "AGREEMENT_PHONE_NUMBER_MATCHING": return C59756ii_AGREEMENT_PHONE_NUMBER_MATCHING, nil 
  case "AGREEMENT_COMMUNICATION_INFO": return C59756ii_AGREEMENT_COMMUNICATION_INFO, nil 
  case "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": return C59756ii_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS, nil 
  case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": return C59756ii_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil 
  case "AGREEMENT_GDPR": return C59756ii_AGREEMENT_GDPR, nil 
  case "PRIVACY_STATUS_MESSAGE_HISTORY": return C59756ii_PRIVACY_STATUS_MESSAGE_HISTORY, nil 
  case "AGREEMENT_PROVIDE_LOCATION": return C59756ii_AGREEMENT_PROVIDE_LOCATION, nil 
  case "AGREEMENT_BEACON": return C59756ii_AGREEMENT_BEACON, nil 
  case "PRIVACY_PROFILE_HISTORY": return C59756ii_PRIVACY_PROFILE_HISTORY, nil 
  case "AGREEMENT_CONTENTS_SUGGEST": return C59756ii_AGREEMENT_CONTENTS_SUGGEST, nil 
  case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": return C59756ii_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil 
  case "PRIVACY_AGE_RESULT": return C59756ii_PRIVACY_AGE_RESULT, nil 
  case "PRIVACY_AGE_RESULT_RECEIVED": return C59756ii_PRIVACY_AGE_RESULT_RECEIVED, nil 
  case "AGREEMENT_OCR_IMAGE_COLLECTION": return C59756ii_AGREEMENT_OCR_IMAGE_COLLECTION, nil 
  case "PRIVACY_ALLOW_FOLLOW": return C59756ii_PRIVACY_ALLOW_FOLLOW, nil 
  case "PRIVACY_SHOW_FOLLOW_LIST": return C59756ii_PRIVACY_SHOW_FOLLOW_LIST, nil 
  case "NOTIFICATION_BADGE_TALK_ONLY": return C59756ii_NOTIFICATION_BADGE_TALK_ONLY, nil 
  }
  return C59756ii(0), fmt.Errorf("not a valid C59756ii string")
}


func C59756iiPtr(v C59756ii) *C59756ii { return &v }

func (p C59756ii) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59756ii) UnmarshalText(text []byte) error {
q, err := C59756iiFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59756ii) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59756ii(v)
return nil
}

func (p * C59756ii) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BotType int64
const (
  BotType_RESERVED BotType = 0
  BotType_OFFICIAL BotType = 1
  BotType_LINE_AT_0 BotType = 2
  BotType_LINE_AT BotType = 3
)

func (p BotType) String() string {
  switch p {
  case BotType_RESERVED: return "RESERVED"
  case BotType_OFFICIAL: return "OFFICIAL"
  case BotType_LINE_AT_0: return "LINE_AT_0"
  case BotType_LINE_AT: return "LINE_AT"
  }
  return "<UNSET>"
}

func BotTypeFromString(s string) (BotType, error) {
  switch s {
  case "RESERVED": return BotType_RESERVED, nil 
  case "OFFICIAL": return BotType_OFFICIAL, nil 
  case "LINE_AT_0": return BotType_LINE_AT_0, nil 
  case "LINE_AT": return BotType_LINE_AT, nil 
  }
  return BotType(0), fmt.Errorf("not a valid BotType string")
}


func BotTypePtr(v BotType) *BotType { return &v }

func (p BotType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BotType) UnmarshalText(text []byte) error {
q, err := BotTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BotType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BotType(v)
return nil
}

func (p * BotType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OnAirLabel int64
const (
  OnAirLabel_ON_AIR OnAirLabel = 0
  OnAirLabel_LIVE OnAirLabel = 1
)

func (p OnAirLabel) String() string {
  switch p {
  case OnAirLabel_ON_AIR: return "ON_AIR"
  case OnAirLabel_LIVE: return "LIVE"
  }
  return "<UNSET>"
}

func OnAirLabelFromString(s string) (OnAirLabel, error) {
  switch s {
  case "ON_AIR": return OnAirLabel_ON_AIR, nil 
  case "LIVE": return OnAirLabel_LIVE, nil 
  }
  return OnAirLabel(0), fmt.Errorf("not a valid OnAirLabel string")
}


func OnAirLabelPtr(v OnAirLabel) *OnAirLabel { return &v }

func (p OnAirLabel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OnAirLabel) UnmarshalText(text []byte) error {
q, err := OnAirLabelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OnAirLabel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OnAirLabel(v)
return nil
}

func (p * OnAirLabel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BatteryMode int64
const (
  BatteryMode_NORMAL BatteryMode = 1
  BatteryMode_LOW_BATTERY BatteryMode = 2
)

func (p BatteryMode) String() string {
  switch p {
  case BatteryMode_NORMAL: return "NORMAL"
  case BatteryMode_LOW_BATTERY: return "LOW_BATTERY"
  }
  return "<UNSET>"
}

func BatteryModeFromString(s string) (BatteryMode, error) {
  switch s {
  case "NORMAL": return BatteryMode_NORMAL, nil 
  case "LOW_BATTERY": return BatteryMode_LOW_BATTERY, nil 
  }
  return BatteryMode(0), fmt.Errorf("not a valid BatteryMode string")
}


func BatteryModePtr(v BatteryMode) *BatteryMode { return &v }

func (p BatteryMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BatteryMode) UnmarshalText(text []byte) error {
q, err := BatteryModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BatteryMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BatteryMode(v)
return nil
}

func (p * BatteryMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C58964da int64
const (
  C58964da_BACKGROUND C58964da = 0
  C58964da_KEYWORD C58964da = 1
)

func (p C58964da) String() string {
  switch p {
  case C58964da_BACKGROUND: return "BACKGROUND"
  case C58964da_KEYWORD: return "KEYWORD"
  }
  return "<UNSET>"
}

func C58964daFromString(s string) (C58964da, error) {
  switch s {
  case "BACKGROUND": return C58964da_BACKGROUND, nil 
  case "KEYWORD": return C58964da_KEYWORD, nil 
  }
  return C58964da(0), fmt.Errorf("not a valid C58964da string")
}


func C58964daPtr(v C58964da) *C58964da { return &v }

func (p C58964da) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C58964da) UnmarshalText(text []byte) error {
q, err := C58964daFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C58964da) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C58964da(v)
return nil
}

func (p * C58964da) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncTriggerReason int64
const (
  SyncTriggerReason_OTHER SyncTriggerReason = 0
  SyncTriggerReason_REVISION_GAP_TOO_LARGE SyncTriggerReason = 1
  SyncTriggerReason_OPERATION_EXPIRED SyncTriggerReason = 2
)

func (p SyncTriggerReason) String() string {
  switch p {
  case SyncTriggerReason_OTHER: return "OTHER"
  case SyncTriggerReason_REVISION_GAP_TOO_LARGE: return "REVISION_GAP_TOO_LARGE"
  case SyncTriggerReason_OPERATION_EXPIRED: return "OPERATION_EXPIRED"
  }
  return "<UNSET>"
}

func SyncTriggerReasonFromString(s string) (SyncTriggerReason, error) {
  switch s {
  case "OTHER": return SyncTriggerReason_OTHER, nil 
  case "REVISION_GAP_TOO_LARGE": return SyncTriggerReason_REVISION_GAP_TOO_LARGE, nil 
  case "OPERATION_EXPIRED": return SyncTriggerReason_OPERATION_EXPIRED, nil 
  }
  return SyncTriggerReason(0), fmt.Errorf("not a valid SyncTriggerReason string")
}


func SyncTriggerReasonPtr(v SyncTriggerReason) *SyncTriggerReason { return &v }

func (p SyncTriggerReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncTriggerReason) UnmarshalText(text []byte) error {
q, err := SyncTriggerReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncTriggerReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncTriggerReason(v)
return nil
}

func (p * SyncTriggerReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Diff int64
const (
  Diff_ADDED Diff = 0
  Diff_UPDATED Diff = 1
  Diff_REMOVED Diff = 2
)

func (p Diff) String() string {
  switch p {
  case Diff_ADDED: return "ADDED"
  case Diff_UPDATED: return "UPDATED"
  case Diff_REMOVED: return "REMOVED"
  }
  return "<UNSET>"
}

func DiffFromString(s string) (Diff, error) {
  switch s {
  case "ADDED": return Diff_ADDED, nil 
  case "UPDATED": return Diff_UPDATED, nil 
  case "REMOVED": return Diff_REMOVED, nil 
  }
  return Diff(0), fmt.Errorf("not a valid Diff string")
}


func DiffPtr(v Diff) *Diff { return &v }

func (p Diff) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Diff) UnmarshalText(text []byte) error {
q, err := DiffFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Diff) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Diff(v)
return nil
}

func (p * Diff) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelErrorCode int64
const (
  ChannelErrorCode_ILLEGAL_ARGUMENT ChannelErrorCode = 0
  ChannelErrorCode_INTERNAL_ERROR ChannelErrorCode = 1
  ChannelErrorCode_CONNECTION_ERROR ChannelErrorCode = 2
  ChannelErrorCode_AUTHENTICATIONI_FAILED ChannelErrorCode = 3
  ChannelErrorCode_NEED_PERMISSION_APPROVAL ChannelErrorCode = 4
  ChannelErrorCode_COIN_NOT_USABLE ChannelErrorCode = 5
  ChannelErrorCode_WEBVIEW_NOT_ALLOWED ChannelErrorCode = 6
)

func (p ChannelErrorCode) String() string {
  switch p {
  case ChannelErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ChannelErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ChannelErrorCode_CONNECTION_ERROR: return "CONNECTION_ERROR"
  case ChannelErrorCode_AUTHENTICATIONI_FAILED: return "AUTHENTICATIONI_FAILED"
  case ChannelErrorCode_NEED_PERMISSION_APPROVAL: return "NEED_PERMISSION_APPROVAL"
  case ChannelErrorCode_COIN_NOT_USABLE: return "COIN_NOT_USABLE"
  case ChannelErrorCode_WEBVIEW_NOT_ALLOWED: return "WEBVIEW_NOT_ALLOWED"
  }
  return "<UNSET>"
}

func ChannelErrorCodeFromString(s string) (ChannelErrorCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ChannelErrorCode_ILLEGAL_ARGUMENT, nil 
  case "INTERNAL_ERROR": return ChannelErrorCode_INTERNAL_ERROR, nil 
  case "CONNECTION_ERROR": return ChannelErrorCode_CONNECTION_ERROR, nil 
  case "AUTHENTICATIONI_FAILED": return ChannelErrorCode_AUTHENTICATIONI_FAILED, nil 
  case "NEED_PERMISSION_APPROVAL": return ChannelErrorCode_NEED_PERMISSION_APPROVAL, nil 
  case "COIN_NOT_USABLE": return ChannelErrorCode_COIN_NOT_USABLE, nil 
  case "WEBVIEW_NOT_ALLOWED": return ChannelErrorCode_WEBVIEW_NOT_ALLOWED, nil 
  }
  return ChannelErrorCode(0), fmt.Errorf("not a valid ChannelErrorCode string")
}


func ChannelErrorCodePtr(v ChannelErrorCode) *ChannelErrorCode { return &v }

func (p ChannelErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelErrorCode) UnmarshalText(text []byte) error {
q, err := ChannelErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelErrorCode(v)
return nil
}

func (p * ChannelErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NotificationItemFetchMode int64
const (
  NotificationItemFetchMode_ALL NotificationItemFetchMode = 0
  NotificationItemFetchMode_APPEND NotificationItemFetchMode = 1
)

func (p NotificationItemFetchMode) String() string {
  switch p {
  case NotificationItemFetchMode_ALL: return "ALL"
  case NotificationItemFetchMode_APPEND: return "APPEND"
  }
  return "<UNSET>"
}

func NotificationItemFetchModeFromString(s string) (NotificationItemFetchMode, error) {
  switch s {
  case "ALL": return NotificationItemFetchMode_ALL, nil 
  case "APPEND": return NotificationItemFetchMode_APPEND, nil 
  }
  return NotificationItemFetchMode(0), fmt.Errorf("not a valid NotificationItemFetchMode string")
}


func NotificationItemFetchModePtr(v NotificationItemFetchMode) *NotificationItemFetchMode { return &v }

func (p NotificationItemFetchMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NotificationItemFetchMode) UnmarshalText(text []byte) error {
q, err := NotificationItemFetchModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NotificationItemFetchMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NotificationItemFetchMode(v)
return nil
}

func (p * NotificationItemFetchMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PublicType int64
const (
  PublicType_HIDDEN PublicType = 0
  PublicType_PUBLIC PublicType = 1000
)

func (p PublicType) String() string {
  switch p {
  case PublicType_HIDDEN: return "HIDDEN"
  case PublicType_PUBLIC: return "PUBLIC"
  }
  return "<UNSET>"
}

func PublicTypeFromString(s string) (PublicType, error) {
  switch s {
  case "HIDDEN": return PublicType_HIDDEN, nil 
  case "PUBLIC": return PublicType_PUBLIC, nil 
  }
  return PublicType(0), fmt.Errorf("not a valid PublicType string")
}


func PublicTypePtr(v PublicType) *PublicType { return &v }

func (p PublicType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PublicType) UnmarshalText(text []byte) error {
q, err := PublicTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PublicType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PublicType(v)
return nil
}

func (p * PublicType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelConfiguration int64
const (
  ChannelConfiguration_MESSAGE ChannelConfiguration = 0
  ChannelConfiguration_MESSAGE_NOTIFICATION ChannelConfiguration = 1
  ChannelConfiguration_NOTIFICATION_CENTER ChannelConfiguration = 2
)

func (p ChannelConfiguration) String() string {
  switch p {
  case ChannelConfiguration_MESSAGE: return "MESSAGE"
  case ChannelConfiguration_MESSAGE_NOTIFICATION: return "MESSAGE_NOTIFICATION"
  case ChannelConfiguration_NOTIFICATION_CENTER: return "NOTIFICATION_CENTER"
  }
  return "<UNSET>"
}

func ChannelConfigurationFromString(s string) (ChannelConfiguration, error) {
  switch s {
  case "MESSAGE": return ChannelConfiguration_MESSAGE, nil 
  case "MESSAGE_NOTIFICATION": return ChannelConfiguration_MESSAGE_NOTIFICATION, nil 
  case "NOTIFICATION_CENTER": return ChannelConfiguration_NOTIFICATION_CENTER, nil 
  }
  return ChannelConfiguration(0), fmt.Errorf("not a valid ChannelConfiguration string")
}


func ChannelConfigurationPtr(v ChannelConfiguration) *ChannelConfiguration { return &v }

func (p ChannelConfiguration) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelConfiguration) UnmarshalText(text []byte) error {
q, err := ChannelConfigurationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelConfiguration) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelConfiguration(v)
return nil
}

func (p * ChannelConfiguration) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelPermission int64
const (
  ChannelPermission_PROFILE ChannelPermission = 0
  ChannelPermission_FRIENDS ChannelPermission = 1
  ChannelPermission_GROUP ChannelPermission = 2
)

func (p ChannelPermission) String() string {
  switch p {
  case ChannelPermission_PROFILE: return "PROFILE"
  case ChannelPermission_FRIENDS: return "FRIENDS"
  case ChannelPermission_GROUP: return "GROUP"
  }
  return "<UNSET>"
}

func ChannelPermissionFromString(s string) (ChannelPermission, error) {
  switch s {
  case "PROFILE": return ChannelPermission_PROFILE, nil 
  case "FRIENDS": return ChannelPermission_FRIENDS, nil 
  case "GROUP": return ChannelPermission_GROUP, nil 
  }
  return ChannelPermission(0), fmt.Errorf("not a valid ChannelPermission string")
}


func ChannelPermissionPtr(v ChannelPermission) *ChannelPermission { return &v }

func (p ChannelPermission) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelPermission) UnmarshalText(text []byte) error {
q, err := ChannelPermissionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelPermission) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelPermission(v)
return nil
}

func (p * ChannelPermission) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelFeatureLicense int64
const (
  ChannelFeatureLicense_BLE_LCS_API_USABLE ChannelFeatureLicense = 26
  ChannelFeatureLicense_PROHIBIT_MINIMIZE_CHANNEL_BROWSER ChannelFeatureLicense = 27
  ChannelFeatureLicense_ALLOW_IOS_WEBKIT ChannelFeatureLicense = 28
)

func (p ChannelFeatureLicense) String() string {
  switch p {
  case ChannelFeatureLicense_BLE_LCS_API_USABLE: return "BLE_LCS_API_USABLE"
  case ChannelFeatureLicense_PROHIBIT_MINIMIZE_CHANNEL_BROWSER: return "PROHIBIT_MINIMIZE_CHANNEL_BROWSER"
  case ChannelFeatureLicense_ALLOW_IOS_WEBKIT: return "ALLOW_IOS_WEBKIT"
  }
  return "<UNSET>"
}

func ChannelFeatureLicenseFromString(s string) (ChannelFeatureLicense, error) {
  switch s {
  case "BLE_LCS_API_USABLE": return ChannelFeatureLicense_BLE_LCS_API_USABLE, nil 
  case "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": return ChannelFeatureLicense_PROHIBIT_MINIMIZE_CHANNEL_BROWSER, nil 
  case "ALLOW_IOS_WEBKIT": return ChannelFeatureLicense_ALLOW_IOS_WEBKIT, nil 
  }
  return ChannelFeatureLicense(0), fmt.Errorf("not a valid ChannelFeatureLicense string")
}


func ChannelFeatureLicensePtr(v ChannelFeatureLicense) *ChannelFeatureLicense { return &v }

func (p ChannelFeatureLicense) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelFeatureLicense) UnmarshalText(text []byte) error {
q, err := ChannelFeatureLicenseFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelFeatureLicense) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelFeatureLicense(v)
return nil
}

func (p * ChannelFeatureLicense) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Creator
//  - PreventedJoinByTicket
//  - InvitationTicket
//  - MemberMids
//  - InviteeMids
type GroupExtra struct {
  Creator string `thrift:"creator,1" db:"creator" json:"creator"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,2" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  InvitationTicket string `thrift:"invitationTicket,3" db:"invitationTicket" json:"invitationTicket"`
  MemberMids map[string]int64 `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  InviteeMids map[string]int64 `thrift:"inviteeMids,5" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroupExtra() *GroupExtra {
  return &GroupExtra{}
}


func (p *GroupExtra) GetCreator() string {
  return p.Creator
}

func (p *GroupExtra) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}

func (p *GroupExtra) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupExtra) GetMemberMids() map[string]int64 {
  return p.MemberMids
}

func (p *GroupExtra) GetInviteeMids() map[string]int64 {
  return p.InviteeMids
}
func (p *GroupExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupExtra)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *GroupExtra)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.MemberMids =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.MemberMids[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.InviteeMids =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.InviteeMids[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupExtra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creator: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creator: ", p), err) }
  return err
}

func (p *GroupExtra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preventedJoinByTicket", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitationTicket", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupExtra) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inviteeMids", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inviteeMids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.InviteeMids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inviteeMids: ", p), err) }
  return err
}

func (p *GroupExtra) Equals(other *GroupExtra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Creator != other.Creator { return false }
  if p.PreventedJoinByTicket != other.PreventedJoinByTicket { return false }
  if p.InvitationTicket != other.InvitationTicket { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for k, _tgt := range p.MemberMids {
    _src4 := other.MemberMids[k]
    if _tgt != _src4 { return false }
  }
  if len(p.InviteeMids) != len(other.InviteeMids) { return false }
  for k, _tgt := range p.InviteeMids {
    _src5 := other.InviteeMids[k]
    if _tgt != _src5 { return false }
  }
  return true
}

func (p *GroupExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupExtra(%+v)", *p)
}

type PeerExtra struct {
}

func NewPeerExtra() *PeerExtra {
  return &PeerExtra{}
}

func (p *PeerExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PeerExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PeerExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PeerExtra) Equals(other *PeerExtra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *PeerExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PeerExtra(%+v)", *p)
}

// Attributes:
//  - GroupExtra
//  - PeerExtra
type Extra struct {
  GroupExtra *GroupExtra `thrift:"groupExtra,1" db:"groupExtra" json:"groupExtra"`
  PeerExtra *PeerExtra `thrift:"peerExtra,2" db:"peerExtra" json:"peerExtra"`
}

func NewExtra() *Extra {
  return &Extra{}
}

var Extra_GroupExtra_DEFAULT *GroupExtra
func (p *Extra) GetGroupExtra() *GroupExtra {
  if !p.IsSetGroupExtra() {
    return Extra_GroupExtra_DEFAULT
  }
return p.GroupExtra
}
var Extra_PeerExtra_DEFAULT *PeerExtra
func (p *Extra) GetPeerExtra() *PeerExtra {
  if !p.IsSetPeerExtra() {
    return Extra_PeerExtra_DEFAULT
  }
return p.PeerExtra
}
func (p *Extra) IsSetGroupExtra() bool {
  return p.GroupExtra != nil
}

func (p *Extra) IsSetPeerExtra() bool {
  return p.PeerExtra != nil
}

func (p *Extra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Extra)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.GroupExtra = &GroupExtra{}
  if err := p.GroupExtra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupExtra), err)
  }
  return nil
}

func (p *Extra)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PeerExtra = &PeerExtra{}
  if err := p.PeerExtra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PeerExtra), err)
  }
  return nil
}

func (p *Extra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Extra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Extra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupExtra", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupExtra: ", p), err) }
  if err := p.GroupExtra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupExtra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupExtra: ", p), err) }
  return err
}

func (p *Extra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peerExtra", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:peerExtra: ", p), err) }
  if err := p.PeerExtra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PeerExtra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:peerExtra: ", p), err) }
  return err
}

func (p *Extra) Equals(other *Extra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.GroupExtra.Equals(other.GroupExtra) { return false }
  if !p.PeerExtra.Equals(other.PeerExtra) { return false }
  return true
}

func (p *Extra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - Type
//  - ChatMid
//  - CreatedTime
//  - NotificationDisabled
//  - FavoriteTimestamp
//  - ChatName
//  - PicturePath
//  - Extra
type Chat struct {
  Type ChatType `thrift:"type,1" db:"type" json:"type"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  CreatedTime int64 `thrift:"createdTime,3" db:"createdTime" json:"createdTime"`
  NotificationDisabled bool `thrift:"notificationDisabled,4" db:"notificationDisabled" json:"notificationDisabled"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,5" db:"favoriteTimestamp" json:"favoriteTimestamp"`
  ChatName string `thrift:"chatName,6" db:"chatName" json:"chatName"`
  PicturePath string `thrift:"picturePath,7" db:"picturePath" json:"picturePath"`
  Extra *Extra `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewChat() *Chat {
  return &Chat{}
}


func (p *Chat) GetType() ChatType {
  return p.Type
}

func (p *Chat) GetChatMid() string {
  return p.ChatMid
}

func (p *Chat) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Chat) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Chat) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}

func (p *Chat) GetChatName() string {
  return p.ChatName
}

func (p *Chat) GetPicturePath() string {
  return p.PicturePath
}
var Chat_Extra_DEFAULT *Extra
func (p *Chat) GetExtra() *Extra {
  if !p.IsSetExtra() {
    return Chat_Extra_DEFAULT
  }
return p.Extra
}
func (p *Chat) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *Chat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Chat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *Chat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *Chat)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Chat)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Chat)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *Chat)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChatName = v
}
  return nil
}

func (p *Chat)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Chat)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Extra = &Extra{}
  if err := p.Extra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extra), err)
  }
  return nil
}

func (p *Chat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Chat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Chat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Chat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *Chat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err) }
  return err
}

func (p *Chat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationDisabled: ", p), err) }
  return err
}

func (p *Chat) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTimestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:favoriteTimestamp: ", p), err) }
  return err
}

func (p *Chat) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chatName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chatName: ", p), err) }
  return err
}

func (p *Chat) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:picturePath: ", p), err) }
  return err
}

func (p *Chat) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err) }
  if err := p.Extra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err) }
  return err
}

func (p *Chat) Equals(other *Chat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if p.FavoriteTimestamp != other.FavoriteTimestamp { return false }
  if p.ChatName != other.ChatName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if !p.Extra.Equals(other.Extra) { return false }
  return true
}

func (p *Chat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Chat(%+v)", *p)
}

// Attributes:
//  - Version
//  - UpdatedMillis
//  - Thumbnail
type AvatarProfile struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  UpdatedMillis int64 `thrift:"updatedMillis,2" db:"updatedMillis" json:"updatedMillis"`
  Thumbnail string `thrift:"thumbnail,3" db:"thumbnail" json:"thumbnail"`
}

func NewAvatarProfile() *AvatarProfile {
  return &AvatarProfile{}
}


func (p *AvatarProfile) GetVersion() string {
  return p.Version
}

func (p *AvatarProfile) GetUpdatedMillis() int64 {
  return p.UpdatedMillis
}

func (p *AvatarProfile) GetThumbnail() string {
  return p.Thumbnail
}
func (p *AvatarProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AvatarProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *AvatarProfile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UpdatedMillis = v
}
  return nil
}

func (p *AvatarProfile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Thumbnail = v
}
  return nil
}

func (p *AvatarProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AvatarProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AvatarProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedMillis", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updatedMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UpdatedMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedMillis (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updatedMillis: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnail", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:thumbnail: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Thumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnail (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:thumbnail: ", p), err) }
  return err
}

func (p *AvatarProfile) Equals(other *AvatarProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.UpdatedMillis != other.UpdatedMillis { return false }
  if p.Thumbnail != other.Thumbnail { return false }
  return true
}

func (p *AvatarProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AvatarProfile(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Settings
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Contact struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Type ContactType `thrift:"type,10" db:"type" json:"type"`
  Status ContactStatus `thrift:"status,11" db:"status" json:"status"`
  // unused fields # 12 to 20
  Relation Relation `thrift:"relation,21" db:"relation" json:"relation"`
  DisplayName string `thrift:"displayName,22" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,23" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,24" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,25" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,26" db:"statusMessage" json:"statusMessage"`
  DisplayNameOverridden string `thrift:"displayNameOverridden,27" db:"displayNameOverridden" json:"displayNameOverridden"`
  FavoriteTime int64 `thrift:"favoriteTime,28" db:"favoriteTime" json:"favoriteTime"`
  // unused fields # 29 to 30
  CapableVoiceCall int64 `thrift:"capableVoiceCall,31" db:"capableVoiceCall" json:"capableVoiceCall"`
  CapableVideoCall bool `thrift:"capableVideoCall,32" db:"capableVideoCall" json:"capableVideoCall"`
  CapableMyhome bool `thrift:"capableMyhome,33" db:"capableMyhome" json:"capableMyhome"`
  CapableBuddy bool `thrift:"capableBuddy,34" db:"capableBuddy" json:"capableBuddy"`
  Attributes bool `thrift:"attributes,35" db:"attributes" json:"attributes"`
  Settings int32 `thrift:"settings,36" db:"settings" json:"settings"`
  PicturePath string `thrift:"picturePath,37" db:"picturePath" json:"picturePath"`
  RecommendParams string `thrift:"recommendParams,38" db:"recommendParams" json:"recommendParams"`
  FriendRequestStatus FriendRequestStatus `thrift:"friendRequestStatus,39" db:"friendRequestStatus" json:"friendRequestStatus"`
  MusicProfile string `thrift:"musicProfile,40" db:"musicProfile" json:"musicProfile"`
  // unused field # 41
  VideoProfile string `thrift:"videoProfile,42" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,43" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,44" db:"avatarProfile" json:"avatarProfile"`
}

func NewContact() *Contact {
  return &Contact{}
}


func (p *Contact) GetMid() string {
  return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Contact) GetType() ContactType {
  return p.Type
}

func (p *Contact) GetStatus() ContactStatus {
  return p.Status
}

func (p *Contact) GetRelation() Relation {
  return p.Relation
}

func (p *Contact) GetDisplayName() string {
  return p.DisplayName
}

func (p *Contact) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Contact) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
  return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
  return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() int64 {
  return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
  return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
  return p.CapableBuddy
}

func (p *Contact) GetAttributes() bool {
  return p.Attributes
}

func (p *Contact) GetSettings() int32 {
  return p.Settings
}

func (p *Contact) GetPicturePath() string {
  return p.PicturePath
}

func (p *Contact) GetRecommendParams() string {
  return p.RecommendParams
}

func (p *Contact) GetFriendRequestStatus() FriendRequestStatus {
  return p.FriendRequestStatus
}

func (p *Contact) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Contact) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Contact) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Contact_AvatarProfile_DEFAULT *AvatarProfile
func (p *Contact) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Contact_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Contact) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Contact) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Contact)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Contact)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Contact)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *Contact)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ContactStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Contact)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := Relation(v)
  p.Relation = temp
}
  return nil
}

func (p *Contact)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Contact)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Contact)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Contact)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Contact)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Contact)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.DisplayNameOverridden = v
}
  return nil
}

func (p *Contact)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.FavoriteTime = v
}
  return nil
}

func (p *Contact)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.CapableVoiceCall = v
}
  return nil
}

func (p *Contact)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.CapableVideoCall = v
}
  return nil
}

func (p *Contact)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *Contact)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.CapableBuddy = v
}
  return nil
}

func (p *Contact)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.Attributes = v
}
  return nil
}

func (p *Contact)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.Settings = v
}
  return nil
}

func (p *Contact)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Contact)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.RecommendParams = v
}
  return nil
}

func (p *Contact)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := FriendRequestStatus(v)
  p.FriendRequestStatus = temp
}
  return nil
}

func (p *Contact)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Contact)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Contact)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.StatusMessageContentMetadata[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Contact)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Contact) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Contact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Contact) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Contact) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Contact) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  return err
}

func (p *Contact) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err) }
  return err
}

func (p *Contact) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relation", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Relation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err) }
  return err
}

func (p *Contact) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err) }
  return err
}

func (p *Contact) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticName: ", p), err) }
  return err
}

func (p *Contact) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err) }
  return err
}

func (p *Contact) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnailUrl", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err) }
  return err
}

func (p *Contact) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err) }
  return err
}

func (p *Contact) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayNameOverridden", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayNameOverridden)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err) }
  return err
}

func (p *Contact) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTime", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err) }
  return err
}

func (p *Contact) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableVoiceCall", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CapableVoiceCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err) }
  return err
}

func (p *Contact) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableVideoCall", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableVideoCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err) }
  return err
}

func (p *Contact) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableMyhome", thrift.BOOL, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err) }
  return err
}

func (p *Contact) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableBuddy", thrift.BOOL, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableBuddy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err) }
  return err
}

func (p *Contact) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributes", thrift.BOOL, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Attributes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err) }
  return err
}

func (p *Contact) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.I32, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:settings: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Settings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settings (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:settings: ", p), err) }
  return err
}

func (p *Contact) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err) }
  return err
}

func (p *Contact) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendParams", thrift.STRING, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RecommendParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err) }
  return err
}

func (p *Contact) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "friendRequestStatus", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FriendRequestStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err) }
  return err
}

func (p *Contact) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "musicProfile", thrift.STRING, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err) }
  return err
}

func (p *Contact) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "videoProfile", thrift.STRING, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:videoProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:videoProfile: ", p), err) }
  return err
}

func (p *Contact) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessageContentMetadata", thrift.MAP, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Contact) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatarProfile", thrift.STRUCT, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:avatarProfile: ", p), err) }
  return err
}

func (p *Contact) Equals(other *Contact) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.Status != other.Status { return false }
  if p.Relation != other.Relation { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.ThumbnailUrl != other.ThumbnailUrl { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.DisplayNameOverridden != other.DisplayNameOverridden { return false }
  if p.FavoriteTime != other.FavoriteTime { return false }
  if p.CapableVoiceCall != other.CapableVoiceCall { return false }
  if p.CapableVideoCall != other.CapableVideoCall { return false }
  if p.CapableMyhome != other.CapableMyhome { return false }
  if p.CapableBuddy != other.CapableBuddy { return false }
  if p.Attributes != other.Attributes { return false }
  if p.Settings != other.Settings { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.RecommendParams != other.RecommendParams { return false }
  if p.FriendRequestStatus != other.FriendRequestStatus { return false }
  if p.MusicProfile != other.MusicProfile { return false }
  if p.VideoProfile != other.VideoProfile { return false }
  if len(p.StatusMessageContentMetadata) != len(other.StatusMessageContentMetadata) { return false }
  for k, _tgt := range p.StatusMessageContentMetadata {
    _src8 := other.StatusMessageContentMetadata[k]
    if _tgt != _src8 { return false }
  }
  if !p.AvatarProfile.Equals(other.AvatarProfile) { return false }
  return true
}

func (p *Contact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Contact(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contacts
//  - NotificationDisabled
//  - MemberMids
type Room struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Contacts []*Contact `thrift:"contacts,10" db:"contacts" json:"contacts"`
  // unused fields # 11 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  // unused fields # 32 to 39
  MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
}

func NewRoom() *Room {
  return &Room{}
}


func (p *Room) GetMid() string {
  return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Room) GetContacts() []*Contact {
  return p.Contacts
}

func (p *Room) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Room) GetMemberMids() []string {
  return p.MemberMids
}
func (p *Room) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Room)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Room)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Room)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Contacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &Contact{}
    if err := _elem9.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Contacts = append(p.Contacts, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Room)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.MemberMids = append(p.MemberMids, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Room"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Room) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Room) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Room) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contacts", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contacts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Contacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contacts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contacts: ", p), err) }
  return err
}

func (p *Room) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *Room) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *Room) Equals(other *Room) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if len(p.Contacts) != len(other.Contacts) { return false }
  for i, _tgt := range p.Contacts {
    _src11 := other.Contacts[i]
    if !_tgt.Equals(_src11) { return false }
  }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src12 := other.MemberMids[i]
    if _tgt != _src12 { return false }
  }
  return true
}

func (p *Room) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Room(%+v)", *p)
}

// Attributes:
//  - Revision
//  - ConfigMap
type Configurations struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  ConfigMap map[string]string `thrift:"configMap,2" db:"configMap" json:"configMap"`
}

func NewConfigurations() *Configurations {
  return &Configurations{}
}


func (p *Configurations) GetRevision() int64 {
  return p.Revision
}

func (p *Configurations) GetConfigMap() map[string]string {
  return p.ConfigMap
}
func (p *Configurations) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Configurations)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Configurations)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ConfigMap =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
var _val14 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val14 = v
}
    p.ConfigMap[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Configurations) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Configurations"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Configurations) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Configurations) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "configMap", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:configMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ConfigMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ConfigMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:configMap: ", p), err) }
  return err
}

func (p *Configurations) Equals(other *Configurations) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Revision != other.Revision { return false }
  if len(p.ConfigMap) != len(other.ConfigMap) { return false }
  for k, _tgt := range p.ConfigMap {
    _src15 := other.ConfigMap[k]
    if _tgt != _src15 { return false }
  }
  return true
}

func (p *Configurations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Configurations(%+v)", *p)
}

type DeleteOtherFromChatResponse struct {
}

func NewDeleteOtherFromChatResponse() *DeleteOtherFromChatResponse {
  return &DeleteOtherFromChatResponse{}
}

func (p *DeleteOtherFromChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatResponse) Equals(other *DeleteOtherFromChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *DeleteOtherFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatResponse(%+v)", *p)
}

type InviteIntoChatResponse struct {
}

func NewInviteIntoChatResponse() *InviteIntoChatResponse {
  return &InviteIntoChatResponse{}
}

func (p *InviteIntoChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InviteIntoChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatResponse) Equals(other *InviteIntoChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *InviteIntoChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatResponse(%+v)", *p)
}

type AcceptChatInvitationByTicketResponse struct {
}

func NewAcceptChatInvitationByTicketResponse() *AcceptChatInvitationByTicketResponse {
  return &AcceptChatInvitationByTicketResponse{}
}

func (p *AcceptChatInvitationByTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationByTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationByTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationByTicketResponse) Equals(other *AcceptChatInvitationByTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *AcceptChatInvitationByTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationByTicketResponse(%+v)", *p)
}

type DeleteSelfFromChatResponse struct {
}

func NewDeleteSelfFromChatResponse() *DeleteSelfFromChatResponse {
  return &DeleteSelfFromChatResponse{}
}

func (p *DeleteSelfFromChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatResponse) Equals(other *DeleteSelfFromChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *DeleteSelfFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatResponse(%+v)", *p)
}

// Attributes:
//  - Chat
type FindChatByTicketResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewFindChatByTicketResponse() *FindChatByTicketResponse {
  return &FindChatByTicketResponse{}
}

var FindChatByTicketResponse_Chat_DEFAULT *Chat
func (p *FindChatByTicketResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return FindChatByTicketResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *FindChatByTicketResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *FindChatByTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindChatByTicketResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *FindChatByTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FindChatByTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindChatByTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *FindChatByTicketResponse) Equals(other *FindChatByTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Chat.Equals(other.Chat) { return false }
  return true
}

func (p *FindChatByTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindChatByTicketResponse(%+v)", *p)
}

type CancelChatInvitationResponse struct {
}

func NewCancelChatInvitationResponse() *CancelChatInvitationResponse {
  return &CancelChatInvitationResponse{}
}

func (p *CancelChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationResponse) Equals(other *CancelChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CancelChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationResponse(%+v)", *p)
}

type AcceptChatInvitationResponse struct {
}

func NewAcceptChatInvitationResponse() *AcceptChatInvitationResponse {
  return &AcceptChatInvitationResponse{}
}

func (p *AcceptChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationResponse) Equals(other *AcceptChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *AcceptChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - DeliveredTime
//  - MessageId
type MessageBoxV2MessageId struct {
  DeliveredTime int64 `thrift:"deliveredTime,1" db:"deliveredTime" json:"deliveredTime"`
  MessageId int64 `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewMessageBoxV2MessageId() *MessageBoxV2MessageId {
  return &MessageBoxV2MessageId{}
}


func (p *MessageBoxV2MessageId) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *MessageBoxV2MessageId) GetMessageId() int64 {
  return p.MessageId
}
func (p *MessageBoxV2MessageId) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBoxV2MessageId)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *MessageBoxV2MessageId)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *MessageBoxV2MessageId) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MessageBoxV2MessageId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBoxV2MessageId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deliveredTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deliveredTime: ", p), err) }
  return err
}

func (p *MessageBoxV2MessageId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *MessageBoxV2MessageId) Equals(other *MessageBoxV2MessageId) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DeliveredTime != other.DeliveredTime { return false }
  if p.MessageId != other.MessageId { return false }
  return true
}

func (p *MessageBoxV2MessageId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBoxV2MessageId(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
//  - AltitudeAccuracy
//  - VelocityAccuracy
//  - BearingAccuracy
type GeolocationAccuracy struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
  AltitudeAccuracy float64 `thrift:"altitudeAccuracy,3" db:"altitudeAccuracy" json:"altitudeAccuracy"`
  VelocityAccuracy float64 `thrift:"velocityAccuracy,4" db:"velocityAccuracy" json:"velocityAccuracy"`
  BearingAccuracy float64 `thrift:"bearingAccuracy,5" db:"bearingAccuracy" json:"bearingAccuracy"`
}

func NewGeolocationAccuracy() *GeolocationAccuracy {
  return &GeolocationAccuracy{}
}


func (p *GeolocationAccuracy) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccuracy) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}

func (p *GeolocationAccuracy) GetAltitudeAccuracy() float64 {
  return p.AltitudeAccuracy
}

func (p *GeolocationAccuracy) GetVelocityAccuracy() float64 {
  return p.VelocityAccuracy
}

func (p *GeolocationAccuracy) GetBearingAccuracy() float64 {
  return p.BearingAccuracy
}
func (p *GeolocationAccuracy) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccuracy)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AltitudeAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VelocityAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BearingAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GeolocationAccuracy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccuracy) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "altitudeAccuracy", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:altitudeAccuracy: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AltitudeAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeAccuracy (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:altitudeAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "velocityAccuracy", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:velocityAccuracy: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.VelocityAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityAccuracy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:velocityAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bearingAccuracy", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bearingAccuracy: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.BearingAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingAccuracy (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bearingAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) Equals(other *GeolocationAccuracy) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RadiusMeters != other.RadiusMeters { return false }
  if p.RadiusConfidence != other.RadiusConfidence { return false }
  if p.AltitudeAccuracy != other.AltitudeAccuracy { return false }
  if p.VelocityAccuracy != other.VelocityAccuracy { return false }
  if p.BearingAccuracy != other.BearingAccuracy { return false }
  return true
}

func (p *GeolocationAccuracy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccuracy(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
//  - AltitudeMeters
type Location struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Address string `thrift:"address,2" db:"address" json:"address"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"longitude"`
  Phone string `thrift:"phone,5" db:"phone" json:"phone"`
  CategoryId string `thrift:"categoryId,6" db:"categoryId" json:"categoryId"`
  Provider Provider `thrift:"provider,7" db:"provider" json:"provider"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,8" db:"accuracy" json:"accuracy"`
  AltitudeMeters float64 `thrift:"altitudeMeters,9" db:"altitudeMeters" json:"altitudeMeters"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetTitle() string {
  return p.Title
}

func (p *Location) GetAddress() string {
  return p.Address
}

func (p *Location) GetLatitude() float64 {
  return p.Latitude
}

func (p *Location) GetLongitude() float64 {
  return p.Longitude
}

func (p *Location) GetPhone() string {
  return p.Phone
}

func (p *Location) GetCategoryId() string {
  return p.CategoryId
}

func (p *Location) GetProvider() Provider {
  return p.Provider
}
var Location_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Location) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Location_Accuracy_DEFAULT
  }
return p.Accuracy
}

func (p *Location) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}
func (p *Location) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Location) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Location)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Location)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Location)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Location)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Location)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryId = v
}
  return nil
}

func (p *Location)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Provider(v)
  p.Provider = temp
}
  return nil
}

func (p *Location)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Location)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *Location) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Location) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *Location) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *Location) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *Location) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *Location) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categoryId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CategoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err) }
  return err
}

func (p *Location) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err) }
  return err
}

func (p *Location) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err) }
  return err
}

func (p *Location) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "altitudeMeters", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:altitudeMeters: ", p), err) }
  return err
}

func (p *Location) Equals(other *Location) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Title != other.Title { return false }
  if p.Address != other.Address { return false }
  if p.Latitude != other.Latitude { return false }
  if p.Longitude != other.Longitude { return false }
  if p.Phone != other.Phone { return false }
  if p.CategoryId != other.CategoryId { return false }
  if p.Provider != other.Provider { return false }
  if !p.Accuracy.Equals(other.Accuracy) { return false }
  if p.AltitudeMeters != other.AltitudeMeters { return false }
  return true
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - From_
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentPreview
//  - ContentMetadata
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
//  - AppExtensionType
type Message struct {
  From_ string `thrift:"from_,1" db:"from_" json:"from_"`
  To string `thrift:"to,2" db:"to" json:"to"`
  ToType MidType `thrift:"toType,3" db:"toType" json:"toType"`
  ID string `thrift:"id,4" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeliveredTime int64 `thrift:"deliveredTime,6" db:"deliveredTime" json:"deliveredTime"`
  // unused fields # 7 to 9
  Text string `thrift:"text,10" db:"text" json:"text"`
  //Location *Location `thrift:"location,11" db:"location" json:"location"`
  // unused fields # 12 to 13
  HasContent bool `thrift:"hasContent,14" db:"hasContent" json:"hasContent"`
  ContentType ContentType `thrift:"contentType,15" db:"contentType" json:"contentType"`
  // unused field # 16
  ContentPreview []byte `thrift:"contentPreview,17" db:"contentPreview" json:"contentPreview"`
  ContentMetadata map[string]string `thrift:"contentMetadata,18" db:"contentMetadata" json:"contentMetadata"`
  SessionId int32 `thrift:"sessionId,19" db:"sessionId" json:"sessionId"`
  Chunks [][]byte `thrift:"chunks,20" db:"chunks" json:"chunks"`
  RelatedMessageId string `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"relatedMessageId"`
  MessageRelationType MessageRelationType `thrift:"messageRelationType,22" db:"messageRelationType" json:"messageRelationType"`
  ReadCount int32 `thrift:"readCount,23" db:"readCount" json:"readCount"`
  RelatedMessageServiceCode RelatedMessageServiceCode `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"relatedMessageServiceCode"`
  AppExtensionType AppExtensionType `thrift:"appExtensionType,25" db:"appExtensionType" json:"appExtensionType"`
}

func NewMessage() *Message {
  return &Message{}
}


func (p *Message) GetFrom_() string {
  return p.From_
}

func (p *Message) GetTo() string {
  return p.To
}

func (p *Message) GetToType() MidType {
  return p.ToType
}

func (p *Message) GetID() string {
  return p.ID
}

func (p *Message) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *Message) GetText() string {
  return p.Text
}

func (p *Message) GetHasContent() bool {
  return p.HasContent
}

func (p *Message) GetContentType() ContentType {
  return p.ContentType
}

func (p *Message) GetContentPreview() []byte {
  return p.ContentPreview
}

func (p *Message) GetContentMetadata() map[string]string {
  return p.ContentMetadata
}

func (p *Message) GetSessionId() int32 {
  return p.SessionId
}

func (p *Message) GetChunks() [][]byte {
  return p.Chunks
}

func (p *Message) GetRelatedMessageId() string {
  return p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() MessageRelationType {
  return p.MessageRelationType
}

func (p *Message) GetReadCount() int32 {
  return p.ReadCount
}

func (p *Message) GetRelatedMessageServiceCode() RelatedMessageServiceCode {
  return p.RelatedMessageServiceCode
}

func (p *Message) GetAppExtensionType() AppExtensionType {
  return p.AppExtensionType
}


func (p *Message) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Message)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.From_ = v
}
  return nil
}

func (p *Message)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *Message)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MidType(v)
  p.ToType = temp
}
  return nil
}

func (p *Message)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Message)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Message)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *Message)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Message)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  return nil
}

func (p *Message)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasContent = v
}
  return nil
}

func (p *Message)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  temp := ContentType(v)
  p.ContentType = temp
}
  return nil
}

func (p *Message)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ContentPreview = v
}
  return nil
}

func (p *Message)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key16 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key16 = v
}
var _val17 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val17 = v
}
    p.ContentMetadata[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Message)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *Message)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Chunks =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Chunks = append(p.Chunks, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Message)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RelatedMessageId = v
}
  return nil
}

func (p *Message)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  temp := MessageRelationType(v)
  p.MessageRelationType = temp
}
  return nil
}

func (p *Message)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ReadCount = v
}
  return nil
}

func (p *Message)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := RelatedMessageServiceCode(v)
  p.RelatedMessageServiceCode = temp
}
  return nil
}

func (p *Message)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := AppExtensionType(v)
  p.AppExtensionType = temp
}
  return nil
}

func (p *Message) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "from_", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.From_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.from_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_: ", p), err) }
  return err
}

func (p *Message) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *Message) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ToType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err) }
  return err
}

func (p *Message) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *Message) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *Message) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deliveredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err) }
  return err
}

func (p *Message) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err) }
  return err
}

func (p *Message) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  return err
}

func (p *Message) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasContent", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasContent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err) }
  return err
}

func (p *Message) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err) }
  return err
}

func (p *Message) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentPreview", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ContentPreview); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err) }
  return err
}

func (p *Message) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentMetadata", thrift.MAP, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err) }
  return err
}

func (p *Message) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err) }
  return err
}

func (p *Message) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chunks", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Chunks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chunks {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err) }
  return err
}

func (p *Message) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relatedMessageId", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RelatedMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err) }
  return err
}

func (p *Message) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageRelationType", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessageRelationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err) }
  return err
}

func (p *Message) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "readCount", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err) }
  return err
}

func (p *Message) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relatedMessageServiceCode", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RelatedMessageServiceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err) }
  return err
}

func (p *Message) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appExtensionType", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appExtensionType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppExtensionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appExtensionType (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appExtensionType: ", p), err) }
  return err
}

func (p *Message) Equals(other *Message) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.From_ != other.From_ { return false }
  if p.To != other.To { return false }
  if p.ToType != other.ToType { return false }
  if p.ID != other.ID { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.DeliveredTime != other.DeliveredTime { return false }
  if p.Text != other.Text { return false }
  if p.HasContent != other.HasContent { return false }
  if p.ContentType != other.ContentType { return false }
  if bytes.Compare(p.ContentPreview, other.ContentPreview) != 0 { return false }
  if len(p.ContentMetadata) != len(other.ContentMetadata) { return false }
  for k, _tgt := range p.ContentMetadata {
    _src19 := other.ContentMetadata[k]
    if _tgt != _src19 { return false }
  }
  if p.SessionId != other.SessionId { return false }
  if len(p.Chunks) != len(other.Chunks) { return false }
  for i, _tgt := range p.Chunks {
    _src20 := other.Chunks[i]
    if bytes.Compare(_tgt, _src20) != 0 { return false }
  }
  if p.RelatedMessageId != other.RelatedMessageId { return false }
  if p.MessageRelationType != other.MessageRelationType { return false }
  if p.ReadCount != other.ReadCount { return false }
  if p.RelatedMessageServiceCode != other.RelatedMessageServiceCode { return false }
  if p.AppExtensionType != other.AppExtensionType { return false }
  return true
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - ID
//  - MidType
//  - LastDeliveredMessageId
//  - LastSeenMessageId
//  - UnreadCount
//  - LastMessages
//  - LastRemovedMessageId
//  - LastRemovedTime
type ExtendedMessageBox struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  MidType MidType `thrift:"midType,2" db:"midType" json:"midType"`
  // unused field # 3
  LastDeliveredMessageId *MessageBoxV2MessageId `thrift:"lastDeliveredMessageId,4" db:"lastDeliveredMessageId" json:"lastDeliveredMessageId"`
  LastSeenMessageId int64 `thrift:"lastSeenMessageId,5" db:"lastSeenMessageId" json:"lastSeenMessageId"`
  UnreadCount int64 `thrift:"unreadCount,6" db:"unreadCount" json:"unreadCount"`
  LastMessages []*Message `thrift:"lastMessages,7" db:"lastMessages" json:"lastMessages"`
  LastRemovedMessageId int64 `thrift:"lastRemovedMessageId,8" db:"lastRemovedMessageId" json:"lastRemovedMessageId"`
  LastRemovedTime int64 `thrift:"lastRemovedTime,9" db:"lastRemovedTime" json:"lastRemovedTime"`
}

func NewExtendedMessageBox() *ExtendedMessageBox {
  return &ExtendedMessageBox{}
}


func (p *ExtendedMessageBox) GetID() string {
  return p.ID
}

func (p *ExtendedMessageBox) GetMidType() MidType {
  return p.MidType
}
var ExtendedMessageBox_LastDeliveredMessageId_DEFAULT *MessageBoxV2MessageId
func (p *ExtendedMessageBox) GetLastDeliveredMessageId() *MessageBoxV2MessageId {
  if !p.IsSetLastDeliveredMessageId() {
    return ExtendedMessageBox_LastDeliveredMessageId_DEFAULT
  }
return p.LastDeliveredMessageId
}

func (p *ExtendedMessageBox) GetLastSeenMessageId() int64 {
  return p.LastSeenMessageId
}

func (p *ExtendedMessageBox) GetUnreadCount() int64 {
  return p.UnreadCount
}

func (p *ExtendedMessageBox) GetLastMessages() []*Message {
  return p.LastMessages
}

func (p *ExtendedMessageBox) GetLastRemovedMessageId() int64 {
  return p.LastRemovedMessageId
}

func (p *ExtendedMessageBox) GetLastRemovedTime() int64 {
  return p.LastRemovedTime
}
func (p *ExtendedMessageBox) IsSetLastDeliveredMessageId() bool {
  return p.LastDeliveredMessageId != nil
}

func (p *ExtendedMessageBox) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedMessageBox)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MidType(v)
  p.MidType = temp
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.LastDeliveredMessageId = &MessageBoxV2MessageId{}
  if err := p.LastDeliveredMessageId.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastDeliveredMessageId), err)
  }
  return nil
}

func (p *ExtendedMessageBox)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastSeenMessageId = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UnreadCount = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Message, 0, size)
  p.LastMessages =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &Message{}
    if err := _elem21.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.LastMessages = append(p.LastMessages, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExtendedMessageBox)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LastRemovedMessageId = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LastRemovedTime = v
}
  return nil
}

func (p *ExtendedMessageBox) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExtendedMessageBox"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedMessageBox) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "midType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MidType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midType: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastDeliveredMessageId", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastDeliveredMessageId: ", p), err) }
  if err := p.LastDeliveredMessageId.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastDeliveredMessageId), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastDeliveredMessageId: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastSeenMessageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSeenMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastSeenMessageId: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unreadCount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unreadCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UnreadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unreadCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unreadCount: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessages", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lastMessages: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.LastMessages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LastMessages {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lastMessages: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRemovedMessageId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lastRemovedMessageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRemovedMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRemovedMessageId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lastRemovedMessageId: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRemovedTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastRemovedTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRemovedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRemovedTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastRemovedTime: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) Equals(other *ExtendedMessageBox) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.MidType != other.MidType { return false }
  if !p.LastDeliveredMessageId.Equals(other.LastDeliveredMessageId) { return false }
  if p.LastSeenMessageId != other.LastSeenMessageId { return false }
  if p.UnreadCount != other.UnreadCount { return false }
  if len(p.LastMessages) != len(other.LastMessages) { return false }
  for i, _tgt := range p.LastMessages {
    _src22 := other.LastMessages[i]
    if !_tgt.Equals(_src22) { return false }
  }
  if p.LastRemovedMessageId != other.LastRemovedMessageId { return false }
  if p.LastRemovedTime != other.LastRemovedTime { return false }
  return true
}

func (p *ExtendedMessageBox) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedMessageBox(%+v)", *p)
}

// Attributes:
//  - MessageBoxes
//  - HasNext
type MessageBoxList struct {
  MessageBoxes []*ExtendedMessageBox `thrift:"messageBoxes,1" db:"messageBoxes" json:"messageBoxes"`
  HasNext bool `thrift:"hasNext,2" db:"hasNext" json:"hasNext"`
}

func NewMessageBoxList() *MessageBoxList {
  return &MessageBoxList{}
}


func (p *MessageBoxList) GetMessageBoxes() []*ExtendedMessageBox {
  return p.MessageBoxes
}

func (p *MessageBoxList) GetHasNext() bool {
  return p.HasNext
}
func (p *MessageBoxList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBoxList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExtendedMessageBox, 0, size)
  p.MessageBoxes =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &ExtendedMessageBox{}
    if err := _elem23.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.MessageBoxes = append(p.MessageBoxes, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MessageBoxList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HasNext = v
}
  return nil
}

func (p *MessageBoxList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MessageBoxList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBoxList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageBoxes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageBoxes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.MessageBoxes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MessageBoxes {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageBoxes: ", p), err) }
  return err
}

func (p *MessageBoxList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasNext", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasNext: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasNext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasNext (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasNext: ", p), err) }
  return err
}

func (p *MessageBoxList) Equals(other *MessageBoxList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MessageBoxes) != len(other.MessageBoxes) { return false }
  for i, _tgt := range p.MessageBoxes {
    _src24 := other.MessageBoxes[i]
    if !_tgt.Equals(_src24) { return false }
  }
  if p.HasNext != other.HasNext { return false }
  return true
}

func (p *MessageBoxList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBoxList(%+v)", *p)
}

type UpdateChatResponse struct {
}

func NewUpdateChatResponse() *UpdateChatResponse {
  return &UpdateChatResponse{}
}

func (p *UpdateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatResponse) Equals(other *UpdateChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *UpdateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatResponse(%+v)", *p)
}

// Attributes:
//  - TicketId
type ReissueChatTicketResponse struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewReissueChatTicketResponse() *ReissueChatTicketResponse {
  return &ReissueChatTicketResponse{}
}


func (p *ReissueChatTicketResponse) GetTicketId() string {
  return p.TicketId
}
func (p *ReissueChatTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *ReissueChatTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *ReissueChatTicketResponse) Equals(other *ReissueChatTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *ReissueChatTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketResponse(%+v)", *p)
}

// Attributes:
//  - MemberChatMids
//  - InvitedChatMids
type GetAllChatMidsResponse struct {
  MemberChatMids []string `thrift:"memberChatMids,1" db:"memberChatMids" json:"memberChatMids"`
  InvitedChatMids []string `thrift:"invitedChatMids,2" db:"invitedChatMids" json:"invitedChatMids"`
}

func NewGetAllChatMidsResponse() *GetAllChatMidsResponse {
  return &GetAllChatMidsResponse{}
}


func (p *GetAllChatMidsResponse) GetMemberChatMids() []string {
  return p.MemberChatMids
}

func (p *GetAllChatMidsResponse) GetInvitedChatMids() []string {
  return p.InvitedChatMids
}
func (p *GetAllChatMidsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.MemberChatMids =  tSet
  for i := 0; i < size; i ++ {
var _elem25 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem25 = v
}
    p.MemberChatMids = append(p.MemberChatMids, _elem25)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.InvitedChatMids =  tSet
  for i := 0; i < size; i ++ {
var _elem26 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem26 = v
}
    p.InvitedChatMids = append(p.InvitedChatMids, _elem26)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberChatMids", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberChatMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.MemberChatMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.MemberChatMids); i++ {
    for j := i+1; j<len(p.MemberChatMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.MemberChatMids[i], p.MemberChatMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MemberChatMids))
      }
    }
  }
  for _, v := range p.MemberChatMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberChatMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitedChatMids", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:invitedChatMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.InvitedChatMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.InvitedChatMids); i++ {
    for j := i+1; j<len(p.InvitedChatMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.InvitedChatMids[i], p.InvitedChatMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InvitedChatMids))
      }
    }
  }
  for _, v := range p.InvitedChatMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:invitedChatMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) Equals(other *GetAllChatMidsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MemberChatMids) != len(other.MemberChatMids) { return false }
  for i, _tgt := range p.MemberChatMids {
    _src27 := other.MemberChatMids[i]
    if _tgt != _src27 { return false }
  }
  if len(p.InvitedChatMids) != len(other.InvitedChatMids) { return false }
  for i, _tgt := range p.InvitedChatMids {
    _src28 := other.InvitedChatMids[i]
    if _tgt != _src28 { return false }
  }
  return true
}

func (p *GetAllChatMidsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsResponse(%+v)", *p)
}

type RejectChatInvitationResponse struct {
}

func NewRejectChatInvitationResponse() *RejectChatInvitationResponse {
  return &RejectChatInvitationResponse{}
}

func (p *RejectChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationResponse) Equals(other *RejectChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *RejectChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - SyncScope
//  - SyncReason
//  - Message
type ShouldSyncException struct {
  SyncOpRevision int64 `thrift:"syncOpRevision,1" db:"syncOpRevision" json:"syncOpRevision"`
  SyncScope *SyncScope `thrift:"syncScope,2" db:"syncScope" json:"syncScope"`
  SyncReason SyncTriggerReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
  Message string `thrift:"message,4" db:"message" json:"message"`
}

func NewShouldSyncException() *ShouldSyncException {
  return &ShouldSyncException{}
}


func (p *ShouldSyncException) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}
var ShouldSyncException_SyncScope_DEFAULT *SyncScope
func (p *ShouldSyncException) GetSyncScope() *SyncScope {
  if !p.IsSetSyncScope() {
    return ShouldSyncException_SyncScope_DEFAULT
  }
return p.SyncScope
}

func (p *ShouldSyncException) GetSyncReason() SyncTriggerReason {
  return p.SyncReason
}

func (p *ShouldSyncException) GetMessage() string {
  return p.Message
}
func (p *ShouldSyncException) IsSetSyncScope() bool {
  return p.SyncScope != nil
}

func (p *ShouldSyncException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShouldSyncException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *ShouldSyncException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SyncScope = &SyncScope{}
  if err := p.SyncScope.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SyncScope), err)
  }
  return nil
}

func (p *ShouldSyncException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncTriggerReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *ShouldSyncException)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ShouldSyncException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShouldSyncException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShouldSyncException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncOpRevision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncOpRevision: ", p), err) }
  return err
}

func (p *ShouldSyncException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncScope", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncScope: ", p), err) }
  if err := p.SyncScope.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SyncScope), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncScope: ", p), err) }
  return err
}

func (p *ShouldSyncException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *ShouldSyncException) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err) }
  return err
}

func (p *ShouldSyncException) Equals(other *ShouldSyncException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SyncOpRevision != other.SyncOpRevision { return false }
  if !p.SyncScope.Equals(other.SyncScope) { return false }
  if p.SyncReason != other.SyncReason { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *ShouldSyncException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShouldSyncException(%+v)", *p)
}

func (p *ShouldSyncException) Error() string {
  return p.String()
}

func (ShouldSyncException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ShouldSyncException)(nil)

// Attributes:
//  - SyncAll
//  - SyncParamContact
//  - SyncParamMid
type SyncRelations struct {
  SyncAll bool `thrift:"syncAll,1" db:"syncAll" json:"syncAll"`
  SyncParamContact []*SyncParamContact `thrift:"syncParamContact,2" db:"syncParamContact" json:"syncParamContact"`
  SyncParamMid []*SyncParamMid `thrift:"syncParamMid,3" db:"syncParamMid" json:"syncParamMid"`
}

func NewSyncRelations() *SyncRelations {
  return &SyncRelations{}
}


func (p *SyncRelations) GetSyncAll() bool {
  return p.SyncAll
}

func (p *SyncRelations) GetSyncParamContact() []*SyncParamContact {
  return p.SyncParamContact
}

func (p *SyncRelations) GetSyncParamMid() []*SyncParamMid {
  return p.SyncParamMid
}
func (p *SyncRelations) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncRelations)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SyncAll = v
}
  return nil
}

func (p *SyncRelations)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SyncParamContact, 0, size)
  p.SyncParamContact =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &SyncParamContact{}
    if err := _elem29.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.SyncParamContact = append(p.SyncParamContact, _elem29)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SyncRelations)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SyncParamMid, 0, size)
  p.SyncParamMid =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &SyncParamMid{}
    if err := _elem30.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.SyncParamMid = append(p.SyncParamMid, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SyncRelations) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncRelations"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncRelations) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncAll", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncAll: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SyncAll)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncAll (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncAll: ", p), err) }
  return err
}

func (p *SyncRelations) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncParamContact", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncParamContact: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SyncParamContact)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SyncParamContact {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncParamContact: ", p), err) }
  return err
}

func (p *SyncRelations) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncParamMid", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncParamMid: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SyncParamMid)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SyncParamMid {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncParamMid: ", p), err) }
  return err
}

func (p *SyncRelations) Equals(other *SyncRelations) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SyncAll != other.SyncAll { return false }
  if len(p.SyncParamContact) != len(other.SyncParamContact) { return false }
  for i, _tgt := range p.SyncParamContact {
    _src31 := other.SyncParamContact[i]
    if !_tgt.Equals(_src31) { return false }
  }
  if len(p.SyncParamMid) != len(other.SyncParamMid) { return false }
  for i, _tgt := range p.SyncParamMid {
    _src32 := other.SyncParamMid[i]
    if !_tgt.Equals(_src32) { return false }
  }
  return true
}

func (p *SyncRelations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncRelations(%+v)", *p)
}

// Attributes:
//  - SyncParamMid
//  - ContactStatus
type SyncParamContact struct {
  SyncParamMid *SyncParamMid `thrift:"syncParamMid,1" db:"syncParamMid" json:"syncParamMid"`
  ContactStatus ContactStatus `thrift:"contactStatus,2" db:"contactStatus" json:"contactStatus"`
}

func NewSyncParamContact() *SyncParamContact {
  return &SyncParamContact{}
}

var SyncParamContact_SyncParamMid_DEFAULT *SyncParamMid
func (p *SyncParamContact) GetSyncParamMid() *SyncParamMid {
  if !p.IsSetSyncParamMid() {
    return SyncParamContact_SyncParamMid_DEFAULT
  }
return p.SyncParamMid
}

func (p *SyncParamContact) GetContactStatus() ContactStatus {
  return p.ContactStatus
}
func (p *SyncParamContact) IsSetSyncParamMid() bool {
  return p.SyncParamMid != nil
}

func (p *SyncParamContact) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncParamContact)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.SyncParamMid = &SyncParamMid{}
  if err := p.SyncParamMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SyncParamMid), err)
  }
  return nil
}

func (p *SyncParamContact)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ContactStatus(v)
  p.ContactStatus = temp
}
  return nil
}

func (p *SyncParamContact) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncParamContact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncParamContact) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncParamMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncParamMid: ", p), err) }
  if err := p.SyncParamMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SyncParamMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncParamMid: ", p), err) }
  return err
}

func (p *SyncParamContact) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactStatus", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContactStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactStatus: ", p), err) }
  return err
}

func (p *SyncParamContact) Equals(other *SyncParamContact) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.SyncParamMid.Equals(other.SyncParamMid) { return false }
  if p.ContactStatus != other.ContactStatus { return false }
  return true
}

func (p *SyncParamContact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncParamContact(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Diff
//  - Revision
type SyncParamMid struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  Diff Diff `thrift:"diff,2" db:"diff" json:"diff"`
  Revision int64 `thrift:"revision,3" db:"revision" json:"revision"`
}

func NewSyncParamMid() *SyncParamMid {
  return &SyncParamMid{}
}


func (p *SyncParamMid) GetMid() string {
  return p.Mid
}

func (p *SyncParamMid) GetDiff() Diff {
  return p.Diff
}

func (p *SyncParamMid) GetRevision() int64 {
  return p.Revision
}
func (p *SyncParamMid) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncParamMid)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *SyncParamMid)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Diff(v)
  p.Diff = temp
}
  return nil
}

func (p *SyncParamMid)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *SyncParamMid) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncParamMid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncParamMid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *SyncParamMid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "diff", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:diff: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Diff)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.diff (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:diff: ", p), err) }
  return err
}

func (p *SyncParamMid) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:revision: ", p), err) }
  return err
}

func (p *SyncParamMid) Equals(other *SyncParamMid) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.Diff != other.Diff { return false }
  if p.Revision != other.Revision { return false }
  return true
}

func (p *SyncParamMid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncParamMid(%+v)", *p)
}

// Attributes:
//  - SyncProfile
//  - SyncSettings
//  - SyncSticker
//  - SyncThemeShop
//  - Contact
//  - Group
//  - Room
//  - Chat
type SyncScope struct {
  SyncProfile bool `thrift:"syncProfile,1" db:"syncProfile" json:"syncProfile"`
  SyncSettings bool `thrift:"syncSettings,2" db:"syncSettings" json:"syncSettings"`
  SyncSticker bool `thrift:"syncSticker,3" db:"syncSticker" json:"syncSticker"`
  SyncThemeShop bool `thrift:"syncThemeShop,4" db:"syncThemeShop" json:"syncThemeShop"`
  // unused fields # 5 to 9
  Contact *SyncRelations `thrift:"contact,10" db:"contact" json:"contact"`
  Group *SyncRelations `thrift:"group,11" db:"group" json:"group"`
  Room *SyncRelations `thrift:"room,12" db:"room" json:"room"`
  Chat *SyncRelations `thrift:"chat,13" db:"chat" json:"chat"`
}

func NewSyncScope() *SyncScope {
  return &SyncScope{}
}


func (p *SyncScope) GetSyncProfile() bool {
  return p.SyncProfile
}

func (p *SyncScope) GetSyncSettings() bool {
  return p.SyncSettings
}

func (p *SyncScope) GetSyncSticker() bool {
  return p.SyncSticker
}

func (p *SyncScope) GetSyncThemeShop() bool {
  return p.SyncThemeShop
}
var SyncScope_Contact_DEFAULT *SyncRelations
func (p *SyncScope) GetContact() *SyncRelations {
  if !p.IsSetContact() {
    return SyncScope_Contact_DEFAULT
  }
return p.Contact
}
var SyncScope_Group_DEFAULT *SyncRelations
func (p *SyncScope) GetGroup() *SyncRelations {
  if !p.IsSetGroup() {
    return SyncScope_Group_DEFAULT
  }
return p.Group
}
var SyncScope_Room_DEFAULT *SyncRelations
func (p *SyncScope) GetRoom() *SyncRelations {
  if !p.IsSetRoom() {
    return SyncScope_Room_DEFAULT
  }
return p.Room
}
var SyncScope_Chat_DEFAULT *SyncRelations
func (p *SyncScope) GetChat() *SyncRelations {
  if !p.IsSetChat() {
    return SyncScope_Chat_DEFAULT
  }
return p.Chat
}
func (p *SyncScope) IsSetContact() bool {
  return p.Contact != nil
}

func (p *SyncScope) IsSetGroup() bool {
  return p.Group != nil
}

func (p *SyncScope) IsSetRoom() bool {
  return p.Room != nil
}

func (p *SyncScope) IsSetChat() bool {
  return p.Chat != nil
}

func (p *SyncScope) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncScope)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SyncProfile = v
}
  return nil
}

func (p *SyncScope)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncSettings = v
}
  return nil
}

func (p *SyncScope)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SyncSticker = v
}
  return nil
}

func (p *SyncScope)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SyncThemeShop = v
}
  return nil
}

func (p *SyncScope)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contact = &SyncRelations{}
  if err := p.Contact.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *SyncScope)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.Group = &SyncRelations{}
  if err := p.Group.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
  }
  return nil
}

func (p *SyncScope)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  p.Room = &SyncRelations{}
  if err := p.Room.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Room), err)
  }
  return nil
}

func (p *SyncScope)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &SyncRelations{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *SyncScope) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncScope"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncScope) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncProfile", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncProfile: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SyncProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncProfile (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncProfile: ", p), err) }
  return err
}

func (p *SyncScope) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncSettings", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncSettings: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SyncSettings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncSettings (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncSettings: ", p), err) }
  return err
}

func (p *SyncScope) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncSticker", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncSticker: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SyncSticker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncSticker (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncSticker: ", p), err) }
  return err
}

func (p *SyncScope) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncThemeShop", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:syncThemeShop: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SyncThemeShop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncThemeShop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:syncThemeShop: ", p), err) }
  return err
}

func (p *SyncScope) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contact", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contact: ", p), err) }
  if err := p.Contact.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contact: ", p), err) }
  return err
}

func (p *SyncScope) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:group: ", p), err) }
  if err := p.Group.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:group: ", p), err) }
  return err
}

func (p *SyncScope) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room", thrift.STRUCT, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:room: ", p), err) }
  if err := p.Room.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Room), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:room: ", p), err) }
  return err
}

func (p *SyncScope) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:chat: ", p), err) }
  return err
}

func (p *SyncScope) Equals(other *SyncScope) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SyncProfile != other.SyncProfile { return false }
  if p.SyncSettings != other.SyncSettings { return false }
  if p.SyncSticker != other.SyncSticker { return false }
  if p.SyncThemeShop != other.SyncThemeShop { return false }
  if !p.Contact.Equals(other.Contact) { return false }
  if !p.Group.Equals(other.Group) { return false }
  if !p.Room.Equals(other.Room) { return false }
  if !p.Chat.Equals(other.Chat) { return false }
  return true
}

func (p *SyncScope) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncScope(%+v)", *p)
}

// Attributes:
//  - Chat
type CreateChatResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewCreateChatResponse() *CreateChatResponse {
  return &CreateChatResponse{}
}

var CreateChatResponse_Chat_DEFAULT *Chat
func (p *CreateChatResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return CreateChatResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *CreateChatResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *CreateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *CreateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *CreateChatResponse) Equals(other *CreateChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Chat.Equals(other.Chat) { return false }
  return true
}

func (p *CreateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatResponse(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Userid
//  - Phone
//  - Email
//  - RegionCode
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Profile struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  // unused field # 2
  Userid string `thrift:"userid,3" db:"userid" json:"userid"`
  // unused fields # 4 to 9
  Phone string `thrift:"phone,10" db:"phone" json:"phone"`
  Email string `thrift:"email,11" db:"email" json:"email"`
  RegionCode string `thrift:"regionCode,12" db:"regionCode" json:"regionCode"`
  // unused fields # 13 to 19
  DisplayName string `thrift:"displayName,20" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,21" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,22" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,23" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,24" db:"statusMessage" json:"statusMessage"`
  // unused fields # 25 to 30
  AllowSearchByUserid bool `thrift:"allowSearchByUserid,31" db:"allowSearchByUserid" json:"allowSearchByUserid"`
  AllowSearchByEmail bool `thrift:"allowSearchByEmail,32" db:"allowSearchByEmail" json:"allowSearchByEmail"`
  PicturePath string `thrift:"picturePath,33" db:"picturePath" json:"picturePath"`
  MusicProfile string `thrift:"musicProfile,34" db:"musicProfile" json:"musicProfile"`
  VideoProfile string `thrift:"videoProfile,35" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,36" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,37" db:"avatarProfile" json:"avatarProfile"`
}

func NewProfile() *Profile {
  return &Profile{}
}


func (p *Profile) GetMid() string {
  return p.Mid
}

func (p *Profile) GetUserid() string {
  return p.Userid
}

func (p *Profile) GetPhone() string {
  return p.Phone
}

func (p *Profile) GetEmail() string {
  return p.Email
}

func (p *Profile) GetRegionCode() string {
  return p.RegionCode
}

func (p *Profile) GetDisplayName() string {
  return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
  return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
  return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
  return p.PicturePath
}

func (p *Profile) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Profile) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Profile) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Profile_AvatarProfile_DEFAULT *AvatarProfile
func (p *Profile) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Profile_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Profile) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Profile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Profile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Profile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *Profile)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Profile)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *Profile)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RegionCode = v
}
  return nil
}

func (p *Profile)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Profile)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Profile)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Profile)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Profile)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Profile)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.AllowSearchByUserid = v
}
  return nil
}

func (p *Profile)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AllowSearchByEmail = v
}
  return nil
}

func (p *Profile)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Profile)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Profile)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Profile)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key33 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key33 = v
}
var _val34 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val34 = v
}
    p.StatusMessageContentMetadata[_key33] = _val34
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Profile)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Profile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Profile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Profile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Profile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err) }
  return err
}

func (p *Profile) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err) }
  return err
}

func (p *Profile) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err) }
  return err
}

func (p *Profile) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "regionCode", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RegionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err) }
  return err
}

func (p *Profile) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err) }
  return err
}

func (p *Profile) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err) }
  return err
}

func (p *Profile) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err) }
  return err
}

func (p *Profile) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnailUrl", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err) }
  return err
}

func (p *Profile) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err) }
  return err
}

func (p *Profile) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowSearchByUserid", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowSearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err) }
  return err
}

func (p *Profile) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowSearchByEmail", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowSearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err) }
  return err
}

func (p *Profile) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err) }
  return err
}

func (p *Profile) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "musicProfile", thrift.STRING, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err) }
  return err
}

func (p *Profile) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "videoProfile", thrift.STRING, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err) }
  return err
}

func (p *Profile) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessageContentMetadata", thrift.MAP, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Profile) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatarProfile", thrift.STRUCT, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:avatarProfile: ", p), err) }
  return err
}

func (p *Profile) Equals(other *Profile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.Userid != other.Userid { return false }
  if p.Phone != other.Phone { return false }
  if p.Email != other.Email { return false }
  if p.RegionCode != other.RegionCode { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.ThumbnailUrl != other.ThumbnailUrl { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.AllowSearchByUserid != other.AllowSearchByUserid { return false }
  if p.AllowSearchByEmail != other.AllowSearchByEmail { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.MusicProfile != other.MusicProfile { return false }
  if p.VideoProfile != other.VideoProfile { return false }
  if len(p.StatusMessageContentMetadata) != len(other.StatusMessageContentMetadata) { return false }
  for k, _tgt := range p.StatusMessageContentMetadata {
    _src35 := other.StatusMessageContentMetadata[k]
    if _tgt != _src35 { return false }
  }
  if !p.AvatarProfile.Equals(other.AvatarProfile) { return false }
  return true
}

func (p *Profile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - NewsId_
//  - NewsService_
//  - TtlMillis
//  - Category
//  - CategoryBgColor
//  - CategoryColor
//  - Title
//  - URL
//  - Image
type InstantNews struct {
  NewsId_ int64 `thrift:"newsId,1" db:"newsId" json:"newsId"`
  NewsService_ string `thrift:"newsService,2" db:"newsService" json:"newsService"`
  TtlMillis int64 `thrift:"ttlMillis,3" db:"ttlMillis" json:"ttlMillis"`
  Category string `thrift:"category,4" db:"category" json:"category"`
  CategoryBgColor string `thrift:"categoryBgColor,5" db:"categoryBgColor" json:"categoryBgColor"`
  CategoryColor string `thrift:"categoryColor,6" db:"categoryColor" json:"categoryColor"`
  Title string `thrift:"title,7" db:"title" json:"title"`
  URL string `thrift:"url,8" db:"url" json:"url"`
  Image string `thrift:"image,9" db:"image" json:"image"`
}

func NewInstantNews() *InstantNews {
  return &InstantNews{}
}


func (p *InstantNews) GetNewsId_() int64 {
  return p.NewsId_
}

func (p *InstantNews) GetNewsService_() string {
  return p.NewsService_
}

func (p *InstantNews) GetTtlMillis() int64 {
  return p.TtlMillis
}

func (p *InstantNews) GetCategory() string {
  return p.Category
}

func (p *InstantNews) GetCategoryBgColor() string {
  return p.CategoryBgColor
}

func (p *InstantNews) GetCategoryColor() string {
  return p.CategoryColor
}

func (p *InstantNews) GetTitle() string {
  return p.Title
}

func (p *InstantNews) GetURL() string {
  return p.URL
}

func (p *InstantNews) GetImage() string {
  return p.Image
}
func (p *InstantNews) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InstantNews)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NewsId_ = v
}
  return nil
}

func (p *InstantNews)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewsService_ = v
}
  return nil
}

func (p *InstantNews)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TtlMillis = v
}
  return nil
}

func (p *InstantNews)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Category = v
}
  return nil
}

func (p *InstantNews)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CategoryBgColor = v
}
  return nil
}

func (p *InstantNews)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryColor = v
}
  return nil
}

func (p *InstantNews)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *InstantNews)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *InstantNews)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *InstantNews) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InstantNews"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InstantNews) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newsId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:newsId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NewsId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newsId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:newsId: ", p), err) }
  return err
}

func (p *InstantNews) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newsService", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newsService: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewsService_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newsService (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newsService: ", p), err) }
  return err
}

func (p *InstantNews) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttlMillis", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ttlMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TtlMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttlMillis (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ttlMillis: ", p), err) }
  return err
}

func (p *InstantNews) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:category: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:category: ", p), err) }
  return err
}

func (p *InstantNews) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categoryBgColor", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:categoryBgColor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CategoryBgColor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryBgColor (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:categoryBgColor: ", p), err) }
  return err
}

func (p *InstantNews) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categoryColor", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryColor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CategoryColor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryColor (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryColor: ", p), err) }
  return err
}

func (p *InstantNews) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:title: ", p), err) }
  return err
}

func (p *InstantNews) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:url: ", p), err) }
  return err
}

func (p *InstantNews) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "image", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:image: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:image: ", p), err) }
  return err
}

func (p *InstantNews) Equals(other *InstantNews) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NewsId_ != other.NewsId_ { return false }
  if p.NewsService_ != other.NewsService_ { return false }
  if p.TtlMillis != other.TtlMillis { return false }
  if p.Category != other.Category { return false }
  if p.CategoryBgColor != other.CategoryBgColor { return false }
  if p.CategoryColor != other.CategoryColor { return false }
  if p.Title != other.Title { return false }
  if p.URL != other.URL { return false }
  if p.Image != other.Image { return false }
  return true
}

func (p *InstantNews) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InstantNews(%+v)", *p)
}

// Attributes:
//  - CreatorMid
//  - CreatedTime
//  - ChatRoomBGMInfo
type ChatRoomBGM struct {
  CreatorMid string `thrift:"creatorMid,1" db:"creatorMid" json:"creatorMid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  ChatRoomBGMInfo string `thrift:"chatRoomBGMInfo,3" db:"chatRoomBGMInfo" json:"chatRoomBGMInfo"`
}

func NewChatRoomBGM() *ChatRoomBGM {
  return &ChatRoomBGM{}
}


func (p *ChatRoomBGM) GetCreatorMid() string {
  return p.CreatorMid
}

func (p *ChatRoomBGM) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ChatRoomBGM) GetChatRoomBGMInfo() string {
  return p.ChatRoomBGMInfo
}
func (p *ChatRoomBGM) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomBGM)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CreatorMid = v
}
  return nil
}

func (p *ChatRoomBGM)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ChatRoomBGM)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatRoomBGMInfo = v
}
  return nil
}

func (p *ChatRoomBGM) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomBGM"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomBGM) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creatorMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CreatorMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creatorMid: ", p), err) }
  return err
}

func (p *ChatRoomBGM) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *ChatRoomBGM) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomBGMInfo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatRoomBGMInfo: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomBGMInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomBGMInfo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatRoomBGMInfo: ", p), err) }
  return err
}

func (p *ChatRoomBGM) Equals(other *ChatRoomBGM) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CreatorMid != other.CreatorMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.ChatRoomBGMInfo != other.ChatRoomBGMInfo { return false }
  return true
}

func (p *ChatRoomBGM) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomBGM(%+v)", *p)
}

// Attributes:
//  - Replace
//  - SticonOwnership
type ChatRoomAnnouncementContentMetadata struct {
  Replace string `thrift:"replace,1" db:"replace" json:"replace"`
  SticonOwnership string `thrift:"sticonOwnership,2" db:"sticonOwnership" json:"sticonOwnership"`
}

func NewChatRoomAnnouncementContentMetadata() *ChatRoomAnnouncementContentMetadata {
  return &ChatRoomAnnouncementContentMetadata{}
}


func (p *ChatRoomAnnouncementContentMetadata) GetReplace() string {
  return p.Replace
}

func (p *ChatRoomAnnouncementContentMetadata) GetSticonOwnership() string {
  return p.SticonOwnership
}
func (p *ChatRoomAnnouncementContentMetadata) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Replace = v
}
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SticonOwnership = v
}
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomAnnouncementContentMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "replace", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replace: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Replace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replace (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replace: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContentMetadata) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sticonOwnership", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sticonOwnership: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SticonOwnership)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sticonOwnership (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sticonOwnership: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContentMetadata) Equals(other *ChatRoomAnnouncementContentMetadata) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Replace != other.Replace { return false }
  if p.SticonOwnership != other.SticonOwnership { return false }
  return true
}

func (p *ChatRoomAnnouncementContentMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncementContentMetadata(%+v)", *p)
}

// Attributes:
//  - DisplayFields
//  - Text
//  - Link
//  - Thumbnail
//  - ContentMetadata
type ChatRoomAnnouncementContents struct {
  DisplayFields int32 `thrift:"displayFields,1" db:"displayFields" json:"displayFields"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Link string `thrift:"link,3" db:"link" json:"link"`
  Thumbnail string `thrift:"thumbnail,4" db:"thumbnail" json:"thumbnail"`
  ContentMetadata *ChatRoomAnnouncementContentMetadata `thrift:"contentMetadata,5" db:"contentMetadata" json:"contentMetadata"`
}

func NewChatRoomAnnouncementContents() *ChatRoomAnnouncementContents {
  return &ChatRoomAnnouncementContents{}
}


func (p *ChatRoomAnnouncementContents) GetDisplayFields() int32 {
  return p.DisplayFields
}

func (p *ChatRoomAnnouncementContents) GetText() string {
  return p.Text
}

func (p *ChatRoomAnnouncementContents) GetLink() string {
  return p.Link
}

func (p *ChatRoomAnnouncementContents) GetThumbnail() string {
  return p.Thumbnail
}
var ChatRoomAnnouncementContents_ContentMetadata_DEFAULT *ChatRoomAnnouncementContentMetadata
func (p *ChatRoomAnnouncementContents) GetContentMetadata() *ChatRoomAnnouncementContentMetadata {
  if !p.IsSetContentMetadata() {
    return ChatRoomAnnouncementContents_ContentMetadata_DEFAULT
  }
return p.ContentMetadata
}
func (p *ChatRoomAnnouncementContents) IsSetContentMetadata() bool {
  return p.ContentMetadata != nil
}

func (p *ChatRoomAnnouncementContents) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DisplayFields = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Thumbnail = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.ContentMetadata = &ChatRoomAnnouncementContentMetadata{}
  if err := p.ContentMetadata.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ContentMetadata), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContents) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomAnnouncementContents"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncementContents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayFields", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayFields: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DisplayFields)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayFields (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayFields: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "link", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:link: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:link: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnail", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thumbnail: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Thumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thumbnail: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentMetadata", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentMetadata: ", p), err) }
  if err := p.ContentMetadata.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ContentMetadata), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentMetadata: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) Equals(other *ChatRoomAnnouncementContents) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DisplayFields != other.DisplayFields { return false }
  if p.Text != other.Text { return false }
  if p.Link != other.Link { return false }
  if p.Thumbnail != other.Thumbnail { return false }
  if !p.ContentMetadata.Equals(other.ContentMetadata) { return false }
  return true
}

func (p *ChatRoomAnnouncementContents) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncementContents(%+v)", *p)
}

// Attributes:
//  - AnnouncementSeq
//  - Type
//  - Contents
//  - CreatorMid
//  - CreatedTime
//  - DeletePermission
type ChatRoomAnnouncement struct {
  AnnouncementSeq int64 `thrift:"announcementSeq,1" db:"announcementSeq" json:"announcementSeq"`
  Type ChatRoomAnnouncementType `thrift:"type,2" db:"type" json:"type"`
  Contents *ChatRoomAnnouncementContents `thrift:"contents,3" db:"contents" json:"contents"`
  CreatorMid string `thrift:"creatorMid,4" db:"creatorMid" json:"creatorMid"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeletePermission DeletePermission `thrift:"deletePermission,6" db:"deletePermission" json:"deletePermission"`
}

func NewChatRoomAnnouncement() *ChatRoomAnnouncement {
  return &ChatRoomAnnouncement{}
}


func (p *ChatRoomAnnouncement) GetAnnouncementSeq() int64 {
  return p.AnnouncementSeq
}

func (p *ChatRoomAnnouncement) GetType() ChatRoomAnnouncementType {
  return p.Type
}
var ChatRoomAnnouncement_Contents_DEFAULT *ChatRoomAnnouncementContents
func (p *ChatRoomAnnouncement) GetContents() *ChatRoomAnnouncementContents {
  if !p.IsSetContents() {
    return ChatRoomAnnouncement_Contents_DEFAULT
  }
return p.Contents
}

func (p *ChatRoomAnnouncement) GetCreatorMid() string {
  return p.CreatorMid
}

func (p *ChatRoomAnnouncement) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ChatRoomAnnouncement) GetDeletePermission() DeletePermission {
  return p.DeletePermission
}
func (p *ChatRoomAnnouncement) IsSetContents() bool {
  return p.Contents != nil
}

func (p *ChatRoomAnnouncement) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnnouncementSeq = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatRoomAnnouncementType(v)
  p.Type = temp
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contents = &ChatRoomAnnouncementContents{}
  if err := p.Contents.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contents), err)
  }
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorMid = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := DeletePermission(v)
  p.DeletePermission = temp
}
  return nil
}

func (p *ChatRoomAnnouncement) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatRoomAnnouncement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "announcementSeq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:announcementSeq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AnnouncementSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.announcementSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:announcementSeq: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contents: ", p), err) }
  if err := p.Contents.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contents), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contents: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CreatorMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorMid: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deletePermission", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deletePermission: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DeletePermission)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deletePermission (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deletePermission: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) Equals(other *ChatRoomAnnouncement) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AnnouncementSeq != other.AnnouncementSeq { return false }
  if p.Type != other.Type { return false }
  if !p.Contents.Equals(other.Contents) { return false }
  if p.CreatorMid != other.CreatorMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.DeletePermission != other.DeletePermission { return false }
  return true
}

func (p *ChatRoomAnnouncement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncement(%+v)", *p)
}

// Attributes:
//  - Version
//  - KeyId
//  - KeyData
//  - CreatedTime
type E2EEPublicKey struct {
  Version int32 `thrift:"version,1" db:"version" json:"version"`
  KeyId int32 `thrift:"keyId,2" db:"keyId" json:"keyId"`
  // unused field # 3
  KeyData []byte `thrift:"keyData,4" db:"keyData" json:"keyData"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
}

func NewE2EEPublicKey() *E2EEPublicKey {
  return &E2EEPublicKey{}
}


func (p *E2EEPublicKey) GetVersion() int32 {
  return p.Version
}

func (p *E2EEPublicKey) GetKeyId() int32 {
  return p.KeyId
}

func (p *E2EEPublicKey) GetKeyData() []byte {
  return p.KeyData
}

func (p *E2EEPublicKey) GetCreatedTime() int64 {
  return p.CreatedTime
}
func (p *E2EEPublicKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEPublicKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyData = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *E2EEPublicKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EEPublicKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEPublicKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyId: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyData", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyData: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.KeyData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyData: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *E2EEPublicKey) Equals(other *E2EEPublicKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.KeyId != other.KeyId { return false }
  if bytes.Compare(p.KeyData, other.KeyData) != 0 { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  return true
}

func (p *E2EEPublicKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEPublicKey(%+v)", *p)
}

// Attributes:
//  - Contact
//  - Luid
//  - ContactType
//  - ContactKey
type ContactRegistration struct {
  Contact *Contact `thrift:"contact,1" db:"contact" json:"contact"`
  // unused fields # 2 to 9
  Luid string `thrift:"luid,10" db:"luid" json:"luid"`
  ContactType int32 `thrift:"contactType,11" db:"contactType" json:"contactType"`
  ContactKey string `thrift:"contactKey,12" db:"contactKey" json:"contactKey"`
}

func NewContactRegistration() *ContactRegistration {
  return &ContactRegistration{}
}

var ContactRegistration_Contact_DEFAULT *Contact
func (p *ContactRegistration) GetContact() *Contact {
  if !p.IsSetContact() {
    return ContactRegistration_Contact_DEFAULT
  }
return p.Contact
}

func (p *ContactRegistration) GetLuid() string {
  return p.Luid
}

func (p *ContactRegistration) GetContactType() int32 {
  return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
  return p.ContactKey
}
func (p *ContactRegistration) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ContactRegistration) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactRegistration)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ContactRegistration)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactRegistration)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ContactType = v
}
  return nil
}

func (p *ContactRegistration)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ContactKey = v
}
  return nil
}

func (p *ContactRegistration) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContactRegistration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactRegistration) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contact", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err) }
  if err := p.Contact.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "luid", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:luid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:luid: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactType", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contactType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContactType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contactType: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactKey", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:contactKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContactKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactKey (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:contactKey: ", p), err) }
  return err
}

func (p *ContactRegistration) Equals(other *ContactRegistration) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Contact.Equals(other.Contact) { return false }
  if p.Luid != other.Luid { return false }
  if p.ContactType != other.ContactType { return false }
  if p.ContactKey != other.ContactKey { return false }
  return true
}

func (p *ContactRegistration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  Type OperationType `thrift:"type,3" db:"type" json:"type"`
  ReqSeq int32 `thrift:"reqSeq,4" db:"reqSeq" json:"reqSeq"`
  Checksum string `thrift:"checksum,5" db:"checksum" json:"checksum"`
  // unused field # 6
  Status OperationStatus `thrift:"status,7" db:"status" json:"status"`
  // unused fields # 8 to 9
  Param1 string `thrift:"param1,10" db:"param1" json:"param1"`
  Param2 string `thrift:"param2,11" db:"param2" json:"param2"`
  Param3 string `thrift:"param3,12" db:"param3" json:"param3"`
  // unused fields # 13 to 19
  Message *Message `thrift:"message,20" db:"message" json:"message"`
}

func NewOperation() *Operation {
  return &Operation{}
}


func (p *Operation) GetRevision() int64 {
  return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Operation) GetType() OperationType {
  return p.Type
}

func (p *Operation) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
  return p.Checksum
}

func (p *Operation) GetStatus() OperationStatus {
  return p.Status
}

func (p *Operation) GetParam1() string {
  return p.Param1
}

func (p *Operation) GetParam2() string {
  return p.Param2
}

func (p *Operation) GetParam3() string {
  return p.Param3
}
var Operation_Message_DEFAULT *Message
func (p *Operation) GetMessage() *Message {
  if !p.IsSetMessage() {
    return Operation_Message_DEFAULT
  }
return p.Message
}
func (p *Operation) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Operation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Operation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Operation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Operation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := OperationType(v)
  p.Type = temp
}
  return nil
}

func (p *Operation)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *Operation)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *Operation)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := OperationStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Operation)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Param1 = v
}
  return nil
}

func (p *Operation)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Param2 = v
}
  return nil
}

func (p *Operation)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Param3 = v
}
  return nil
}

func (p *Operation)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *Operation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Operation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Operation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Operation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Operation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Operation) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err) }
  return err
}

func (p *Operation) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "checksum", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err) }
  return err
}

func (p *Operation) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *Operation) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param1", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err) }
  return err
}

func (p *Operation) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param2", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err) }
  return err
}

func (p *Operation) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param3", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err) }
  return err
}

func (p *Operation) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err) }
  return err
}

func (p *Operation) Equals(other *Operation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Revision != other.Revision { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Checksum != other.Checksum { return false }
  if p.Status != other.Status { return false }
  if p.Param1 != other.Param1 { return false }
  if p.Param2 != other.Param2 { return false }
  if p.Param3 != other.Param3 { return false }
  if !p.Message.Equals(other.Message) { return false }
  return true
}

func (p *Operation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operation(%+v)", *p)
}

// Attributes:
//  - PhoneNumberRegistered
//  - RegisteredSnsIdTypes
//  - AccountMigrationCheckType
type UserAuthStatus struct {
  PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,1" db:"phoneNumberRegistered" json:"phoneNumberRegistered"`
  RegisteredSnsIdTypes []C60759oi `thrift:"registeredSnsIdTypes,2" db:"registeredSnsIdTypes" json:"registeredSnsIdTypes"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,3" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
}

func NewUserAuthStatus() *UserAuthStatus {
  return &UserAuthStatus{}
}


func (p *UserAuthStatus) GetPhoneNumberRegistered() bool {
  return p.PhoneNumberRegistered
}

func (p *UserAuthStatus) GetRegisteredSnsIdTypes() []C60759oi {
  return p.RegisteredSnsIdTypes
}

func (p *UserAuthStatus) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}
func (p *UserAuthStatus) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAuthStatus)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumberRegistered = v
}
  return nil
}

func (p *UserAuthStatus)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]C60759oi, 0, size)
  p.RegisteredSnsIdTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem36 C60759oi
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C60759oi(v)
    _elem36 = temp
}
    p.RegisteredSnsIdTypes = append(p.RegisteredSnsIdTypes, _elem36)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserAuthStatus)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *UserAuthStatus) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserAuthStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAuthStatus) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberRegistered", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumberRegistered: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PhoneNumberRegistered)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumberRegistered: ", p), err) }
  return err
}

func (p *UserAuthStatus) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "registeredSnsIdTypes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registeredSnsIdTypes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.RegisteredSnsIdTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RegisteredSnsIdTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registeredSnsIdTypes: ", p), err) }
  return err
}

func (p *UserAuthStatus) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationCheckType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *UserAuthStatus) Equals(other *UserAuthStatus) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PhoneNumberRegistered != other.PhoneNumberRegistered { return false }
  if len(p.RegisteredSnsIdTypes) != len(other.RegisteredSnsIdTypes) { return false }
  for i, _tgt := range p.RegisteredSnsIdTypes {
    _src37 := other.RegisteredSnsIdTypes[i]
    if _tgt != _src37 { return false }
  }
  if p.AccountMigrationCheckType != other.AccountMigrationCheckType { return false }
  return true
}

func (p *UserAuthStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAuthStatus(%+v)", *p)
}

// Attributes:
//  - Year
//  - YearPrivacyLevelType
//  - YearEnabled
//  - Day
//  - DayPrivacyLevelType
//  - DayEnabled
type ExtendedProfileBirthday struct {
  Year string `thrift:"year,1" db:"year" json:"year"`
  YearPrivacyLevelType YearPrivacyLevelType `thrift:"yearPrivacyLevelType,2" db:"yearPrivacyLevelType" json:"yearPrivacyLevelType"`
  YearEnabled bool `thrift:"yearEnabled,3" db:"yearEnabled" json:"yearEnabled"`
  // unused field # 4
  Day string `thrift:"day,5" db:"day" json:"day"`
  DayPrivacyLevelType YearPrivacyLevelType `thrift:"dayPrivacyLevelType,6" db:"dayPrivacyLevelType" json:"dayPrivacyLevelType"`
  DayEnabled bool `thrift:"dayEnabled,7" db:"dayEnabled" json:"dayEnabled"`
}

func NewExtendedProfileBirthday() *ExtendedProfileBirthday {
  return &ExtendedProfileBirthday{}
}


func (p *ExtendedProfileBirthday) GetYear() string {
  return p.Year
}

func (p *ExtendedProfileBirthday) GetYearPrivacyLevelType() YearPrivacyLevelType {
  return p.YearPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetYearEnabled() bool {
  return p.YearEnabled
}

func (p *ExtendedProfileBirthday) GetDay() string {
  return p.Day
}

func (p *ExtendedProfileBirthday) GetDayPrivacyLevelType() YearPrivacyLevelType {
  return p.DayPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetDayEnabled() bool {
  return p.DayEnabled
}
func (p *ExtendedProfileBirthday) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := YearPrivacyLevelType(v)
  p.YearPrivacyLevelType = temp
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.YearEnabled = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := YearPrivacyLevelType(v)
  p.DayPrivacyLevelType = temp
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DayEnabled = v
}
  return nil
}

func (p *ExtendedProfileBirthday) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExtendedProfileBirthday"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedProfileBirthday) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "year", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "yearPrivacyLevelType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yearPrivacyLevelType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.YearPrivacyLevelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yearPrivacyLevelType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yearPrivacyLevelType: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "yearEnabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yearEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.YearEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yearEnabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yearEnabled: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "day", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dayPrivacyLevelType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dayPrivacyLevelType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DayPrivacyLevelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dayPrivacyLevelType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dayPrivacyLevelType: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dayEnabled", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dayEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DayEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dayEnabled (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dayEnabled: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) Equals(other *ExtendedProfileBirthday) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Year != other.Year { return false }
  if p.YearPrivacyLevelType != other.YearPrivacyLevelType { return false }
  if p.YearEnabled != other.YearEnabled { return false }
  if p.Day != other.Day { return false }
  if p.DayPrivacyLevelType != other.DayPrivacyLevelType { return false }
  if p.DayEnabled != other.DayEnabled { return false }
  return true
}

func (p *ExtendedProfileBirthday) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedProfileBirthday(%+v)", *p)
}

// Attributes:
//  - Birthday
type ExtendedProfile struct {
  Birthday *ExtendedProfileBirthday `thrift:"birthday,1" db:"birthday" json:"birthday"`
}

func NewExtendedProfile() *ExtendedProfile {
  return &ExtendedProfile{}
}

var ExtendedProfile_Birthday_DEFAULT *ExtendedProfileBirthday
func (p *ExtendedProfile) GetBirthday() *ExtendedProfileBirthday {
  if !p.IsSetBirthday() {
    return ExtendedProfile_Birthday_DEFAULT
  }
return p.Birthday
}
func (p *ExtendedProfile) IsSetBirthday() bool {
  return p.Birthday != nil
}

func (p *ExtendedProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Birthday = &ExtendedProfileBirthday{}
  if err := p.Birthday.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
  }
  return nil
}

func (p *ExtendedProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExtendedProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "birthday", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:birthday: ", p), err) }
  if err := p.Birthday.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:birthday: ", p), err) }
  return err
}

func (p *ExtendedProfile) Equals(other *ExtendedProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Birthday.Equals(other.Birthday) { return false }
  return true
}

func (p *ExtendedProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedProfile(%+v)", *p)
}

// Attributes:
//  - NotificationEnable
//  - NotificationMuteExpiration
//  - NotificationNewMessage
//  - NotificationGroupInvitation
//  - NotificationShowMessage
//  - NotificationIncomingCall
//  - NotificationSoundMessage
//  - NotificationSoundGroup
//  - NotificationDisabledWithSub
//  - NotificationPayment
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogin
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowNearby
//  - AgreementNearbyTime
//  - AgreementSquareTime
//  - NotificationMention
//  - BotUseAgreementAcceptedAt
//  - AgreementShakeFunction
//  - AgreementMobileContactName
//  - NotificationThumbnail
//  - AgreementSoundToText
//  - PrivacyPolicyVersion
//  - AgreementAdByWebAccess
//  - AgreementPhoneNumberMatching
//  - AgreementCommunicationInfo
//  - PrivacySharePersonalInfoToFriends
//  - AgreementThingsWirelessCommunication
//  - AgreementGdpr
//  - PrivacyStatusMessageHistory
//  - AgreementProvideLocation
//  - AgreementBeacon
//  - PrivacyAllowProfileHistory
//  - AgreementContentsSuggest
//  - AgreementContentsSuggestDataCollection
//  - PrivacyAgeResult_
//  - PrivacyAgeResultReceived
//  - AgreementOcrImageCollection
//  - PrivacyAllowFollow
//  - PrivacyShowFollowList
//  - NotificationBadgeTalkOnly
type Settings struct {
  // unused fields # 1 to 9
  NotificationEnable bool `thrift:"notificationEnable,10" db:"notificationEnable" json:"notificationEnable"`
  NotificationMuteExpiration bool `thrift:"notificationMuteExpiration,11" db:"notificationMuteExpiration" json:"notificationMuteExpiration"`
  NotificationNewMessage int64 `thrift:"notificationNewMessage,12" db:"notificationNewMessage" json:"notificationNewMessage"`
  NotificationGroupInvitation bool `thrift:"notificationGroupInvitation,13" db:"notificationGroupInvitation" json:"notificationGroupInvitation"`
  NotificationShowMessage bool `thrift:"notificationShowMessage,14" db:"notificationShowMessage" json:"notificationShowMessage"`
  NotificationIncomingCall bool `thrift:"notificationIncomingCall,15" db:"notificationIncomingCall" json:"notificationIncomingCall"`
  NotificationSoundMessage string `thrift:"notificationSoundMessage,16" db:"notificationSoundMessage" json:"notificationSoundMessage"`
  NotificationSoundGroup string `thrift:"notificationSoundGroup,17" db:"notificationSoundGroup" json:"notificationSoundGroup"`
  NotificationDisabledWithSub bool `thrift:"notificationDisabledWithSub,18" db:"notificationDisabledWithSub" json:"notificationDisabledWithSub"`
  NotificationPayment bool `thrift:"notificationPayment,19" db:"notificationPayment" json:"notificationPayment"`
  PrivacySyncContacts bool `thrift:"privacySyncContacts,20" db:"privacySyncContacts" json:"privacySyncContacts"`
  PrivacySearchByPhoneNumber bool `thrift:"privacySearchByPhoneNumber,21" db:"privacySearchByPhoneNumber" json:"privacySearchByPhoneNumber"`
  PrivacySearchByUserid bool `thrift:"privacySearchByUserid,22" db:"privacySearchByUserid" json:"privacySearchByUserid"`
  PrivacySearchByEmail bool `thrift:"privacySearchByEmail,23" db:"privacySearchByEmail" json:"privacySearchByEmail"`
  PrivacyAllowSecondaryDeviceLogin bool `thrift:"privacyAllowSecondaryDeviceLogin,24" db:"privacyAllowSecondaryDeviceLogin" json:"privacyAllowSecondaryDeviceLogin"`
  PrivacyProfileImagePostToMyhome bool `thrift:"privacyProfileImagePostToMyhome,25" db:"privacyProfileImagePostToMyhome" json:"privacyProfileImagePostToMyhome"`
  PrivacyReceiveMessagesFromNotFriend bool `thrift:"privacyReceiveMessagesFromNotFriend,26" db:"privacyReceiveMessagesFromNotFriend" json:"privacyReceiveMessagesFromNotFriend"`
  PrivacyAgreeUseLineCoinToPaidCall bool `thrift:"privacyAgreeUseLineCoinToPaidCall,27" db:"privacyAgreeUseLineCoinToPaidCall" json:"privacyAgreeUseLineCoinToPaidCall"`
  PrivacyAgreeUsePaidCall bool `thrift:"privacyAgreeUsePaidCall,28" db:"privacyAgreeUsePaidCall" json:"privacyAgreeUsePaidCall"`
  PrivacyAllowFriendRequest bool `thrift:"privacyAllowFriendRequest,29" db:"privacyAllowFriendRequest" json:"privacyAllowFriendRequest"`
  ContactMyTicket string `thrift:"contactMyTicket,30" db:"contactMyTicket" json:"contactMyTicket"`
  // unused fields # 31 to 39
  IdentityProvider IdentityProvider `thrift:"identityProvider,40" db:"identityProvider" json:"identityProvider"`
  IdentityIdentifier string `thrift:"identityIdentifier,41" db:"identityIdentifier" json:"identityIdentifier"`
  SnsAccounts map[C60759oi]string `thrift:"snsAccounts,42" db:"snsAccounts" json:"snsAccounts"`
  PhoneRegistration bool `thrift:"phoneRegistration,43" db:"phoneRegistration" json:"phoneRegistration"`
  EmailConfirmationStatus EmailConfirmationStatus `thrift:"emailConfirmationStatus,44" db:"emailConfirmationStatus" json:"emailConfirmationStatus"`
  AccountMigrationPincodeType AccountMigrationPincodeType `thrift:"accountMigrationPincodeType,45" db:"accountMigrationPincodeType" json:"accountMigrationPincodeType"`
  EnforcedInputAccountMigrationPincode bool `thrift:"enforcedInputAccountMigrationPincode,46" db:"enforcedInputAccountMigrationPincode" json:"enforcedInputAccountMigrationPincode"`
  SecurityCenterSettingsType AccountMigrationPincodeType `thrift:"securityCenterSettingsType,47" db:"securityCenterSettingsType" json:"securityCenterSettingsType"`
  AllowUnregistrationSecondaryDevice bool `thrift:"allowUnregistrationSecondaryDevice,48" db:"allowUnregistrationSecondaryDevice" json:"allowUnregistrationSecondaryDevice"`
  // unused field # 49
  PreferenceLocale string `thrift:"preferenceLocale,50" db:"preferenceLocale" json:"preferenceLocale"`
  // unused fields # 51 to 59
  CustomModes map[C62606zb]string `thrift:"customModes,60" db:"customModes" json:"customModes"`
  E2eeEnable bool `thrift:"e2eeEnable,61" db:"e2eeEnable" json:"e2eeEnable"`
  HitokotoBackupRequested bool `thrift:"hitokotoBackupRequested,62" db:"hitokotoBackupRequested" json:"hitokotoBackupRequested"`
  PrivacyProfileMusicPostToMyhome bool `thrift:"privacyProfileMusicPostToMyhome,63" db:"privacyProfileMusicPostToMyhome" json:"privacyProfileMusicPostToMyhome"`
  // unused field # 64
  PrivacyAllowNearby bool `thrift:"privacyAllowNearby,65" db:"privacyAllowNearby" json:"privacyAllowNearby"`
  AgreementNearbyTime bool `thrift:"agreementNearbyTime,66" db:"agreementNearbyTime" json:"agreementNearbyTime"`
  AgreementSquareTime int64 `thrift:"agreementSquareTime,67" db:"agreementSquareTime" json:"agreementSquareTime"`
  NotificationMention bool `thrift:"notificationMention,68" db:"notificationMention" json:"notificationMention"`
  BotUseAgreementAcceptedAt int64 `thrift:"botUseAgreementAcceptedAt,69" db:"botUseAgreementAcceptedAt" json:"botUseAgreementAcceptedAt"`
  AgreementShakeFunction int64 `thrift:"agreementShakeFunction,70" db:"agreementShakeFunction" json:"agreementShakeFunction"`
  AgreementMobileContactName int64 `thrift:"agreementMobileContactName,71" db:"agreementMobileContactName" json:"agreementMobileContactName"`
  NotificationThumbnail bool `thrift:"notificationThumbnail,72" db:"notificationThumbnail" json:"notificationThumbnail"`
  AgreementSoundToText int64 `thrift:"agreementSoundToText,73" db:"agreementSoundToText" json:"agreementSoundToText"`
  PrivacyPolicyVersion string `thrift:"privacyPolicyVersion,74" db:"privacyPolicyVersion" json:"privacyPolicyVersion"`
  AgreementAdByWebAccess int64 `thrift:"agreementAdByWebAccess,75" db:"agreementAdByWebAccess" json:"agreementAdByWebAccess"`
  AgreementPhoneNumberMatching int64 `thrift:"agreementPhoneNumberMatching,76" db:"agreementPhoneNumberMatching" json:"agreementPhoneNumberMatching"`
  AgreementCommunicationInfo int64 `thrift:"agreementCommunicationInfo,77" db:"agreementCommunicationInfo" json:"agreementCommunicationInfo"`
  PrivacySharePersonalInfoToFriends PrivacySharePersonalInfoToFriends `thrift:"privacySharePersonalInfoToFriends,78" db:"privacySharePersonalInfoToFriends" json:"privacySharePersonalInfoToFriends"`
  AgreementThingsWirelessCommunication int64 `thrift:"agreementThingsWirelessCommunication,79" db:"agreementThingsWirelessCommunication" json:"agreementThingsWirelessCommunication"`
  AgreementGdpr int64 `thrift:"agreementGdpr,80" db:"agreementGdpr" json:"agreementGdpr"`
  PrivacyStatusMessageHistory PrivacyStatusMessageHistory `thrift:"privacyStatusMessageHistory,81" db:"privacyStatusMessageHistory" json:"privacyStatusMessageHistory"`
  AgreementProvideLocation int64 `thrift:"agreementProvideLocation,82" db:"agreementProvideLocation" json:"agreementProvideLocation"`
  AgreementBeacon int64 `thrift:"agreementBeacon,83" db:"agreementBeacon" json:"agreementBeacon"`
  // unused field # 84
  PrivacyAllowProfileHistory PrivacyAllowProfileHistory `thrift:"privacyAllowProfileHistory,85" db:"privacyAllowProfileHistory" json:"privacyAllowProfileHistory"`
  AgreementContentsSuggest int64 `thrift:"agreementContentsSuggest,86" db:"agreementContentsSuggest" json:"agreementContentsSuggest"`
  AgreementContentsSuggestDataCollection int64 `thrift:"agreementContentsSuggestDataCollection,87" db:"agreementContentsSuggestDataCollection" json:"agreementContentsSuggestDataCollection"`
  PrivacyAgeResult_ PrivacyAgeResult_ `thrift:"privacyAgeResult,88" db:"privacyAgeResult" json:"privacyAgeResult"`
  PrivacyAgeResultReceived bool `thrift:"privacyAgeResultReceived,89" db:"privacyAgeResultReceived" json:"privacyAgeResultReceived"`
  AgreementOcrImageCollection int64 `thrift:"agreementOcrImageCollection,90" db:"agreementOcrImageCollection" json:"agreementOcrImageCollection"`
  PrivacyAllowFollow bool `thrift:"privacyAllowFollow,91" db:"privacyAllowFollow" json:"privacyAllowFollow"`
  PrivacyShowFollowList bool `thrift:"privacyShowFollowList,92" db:"privacyShowFollowList" json:"privacyShowFollowList"`
  NotificationBadgeTalkOnly bool `thrift:"notificationBadgeTalkOnly,93" db:"notificationBadgeTalkOnly" json:"notificationBadgeTalkOnly"`
}

func NewSettings() *Settings {
  return &Settings{}
}


func (p *Settings) GetNotificationEnable() bool {
  return p.NotificationEnable
}

func (p *Settings) GetNotificationMuteExpiration() bool {
  return p.NotificationMuteExpiration
}

func (p *Settings) GetNotificationNewMessage() int64 {
  return p.NotificationNewMessage
}

func (p *Settings) GetNotificationGroupInvitation() bool {
  return p.NotificationGroupInvitation
}

func (p *Settings) GetNotificationShowMessage() bool {
  return p.NotificationShowMessage
}

func (p *Settings) GetNotificationIncomingCall() bool {
  return p.NotificationIncomingCall
}

func (p *Settings) GetNotificationSoundMessage() string {
  return p.NotificationSoundMessage
}

func (p *Settings) GetNotificationSoundGroup() string {
  return p.NotificationSoundGroup
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
  return p.NotificationDisabledWithSub
}

func (p *Settings) GetNotificationPayment() bool {
  return p.NotificationPayment
}

func (p *Settings) GetPrivacySyncContacts() bool {
  return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
  return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
  return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
  return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogin() bool {
  return p.PrivacyAllowSecondaryDeviceLogin
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
  return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
  return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
  return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *Settings) GetPrivacyAgreeUsePaidCall() bool {
  return p.PrivacyAgreeUsePaidCall
}

func (p *Settings) GetPrivacyAllowFriendRequest() bool {
  return p.PrivacyAllowFriendRequest
}

func (p *Settings) GetContactMyTicket() string {
  return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
  return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
  return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[C60759oi]string {
  return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
  return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
  return p.EmailConfirmationStatus
}

func (p *Settings) GetAccountMigrationPincodeType() AccountMigrationPincodeType {
  return p.AccountMigrationPincodeType
}

func (p *Settings) GetEnforcedInputAccountMigrationPincode() bool {
  return p.EnforcedInputAccountMigrationPincode
}

func (p *Settings) GetSecurityCenterSettingsType() AccountMigrationPincodeType {
  return p.SecurityCenterSettingsType
}

func (p *Settings) GetAllowUnregistrationSecondaryDevice() bool {
  return p.AllowUnregistrationSecondaryDevice
}

func (p *Settings) GetPreferenceLocale() string {
  return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() map[C62606zb]string {
  return p.CustomModes
}

func (p *Settings) GetE2eeEnable() bool {
  return p.E2eeEnable
}

func (p *Settings) GetHitokotoBackupRequested() bool {
  return p.HitokotoBackupRequested
}

func (p *Settings) GetPrivacyProfileMusicPostToMyhome() bool {
  return p.PrivacyProfileMusicPostToMyhome
}

func (p *Settings) GetPrivacyAllowNearby() bool {
  return p.PrivacyAllowNearby
}

func (p *Settings) GetAgreementNearbyTime() bool {
  return p.AgreementNearbyTime
}

func (p *Settings) GetAgreementSquareTime() int64 {
  return p.AgreementSquareTime
}

func (p *Settings) GetNotificationMention() bool {
  return p.NotificationMention
}

func (p *Settings) GetBotUseAgreementAcceptedAt() int64 {
  return p.BotUseAgreementAcceptedAt
}

func (p *Settings) GetAgreementShakeFunction() int64 {
  return p.AgreementShakeFunction
}

func (p *Settings) GetAgreementMobileContactName() int64 {
  return p.AgreementMobileContactName
}

func (p *Settings) GetNotificationThumbnail() bool {
  return p.NotificationThumbnail
}

func (p *Settings) GetAgreementSoundToText() int64 {
  return p.AgreementSoundToText
}

func (p *Settings) GetPrivacyPolicyVersion() string {
  return p.PrivacyPolicyVersion
}

func (p *Settings) GetAgreementAdByWebAccess() int64 {
  return p.AgreementAdByWebAccess
}

func (p *Settings) GetAgreementPhoneNumberMatching() int64 {
  return p.AgreementPhoneNumberMatching
}

func (p *Settings) GetAgreementCommunicationInfo() int64 {
  return p.AgreementCommunicationInfo
}

func (p *Settings) GetPrivacySharePersonalInfoToFriends() PrivacySharePersonalInfoToFriends {
  return p.PrivacySharePersonalInfoToFriends
}

func (p *Settings) GetAgreementThingsWirelessCommunication() int64 {
  return p.AgreementThingsWirelessCommunication
}

func (p *Settings) GetAgreementGdpr() int64 {
  return p.AgreementGdpr
}

func (p *Settings) GetPrivacyStatusMessageHistory() PrivacyStatusMessageHistory {
  return p.PrivacyStatusMessageHistory
}

func (p *Settings) GetAgreementProvideLocation() int64 {
  return p.AgreementProvideLocation
}

func (p *Settings) GetAgreementBeacon() int64 {
  return p.AgreementBeacon
}

func (p *Settings) GetPrivacyAllowProfileHistory() PrivacyAllowProfileHistory {
  return p.PrivacyAllowProfileHistory
}

func (p *Settings) GetAgreementContentsSuggest() int64 {
  return p.AgreementContentsSuggest
}

func (p *Settings) GetAgreementContentsSuggestDataCollection() int64 {
  return p.AgreementContentsSuggestDataCollection
}

func (p *Settings) GetPrivacyAgeResult_() PrivacyAgeResult_ {
  return p.PrivacyAgeResult_
}

func (p *Settings) GetPrivacyAgeResultReceived() bool {
  return p.PrivacyAgeResultReceived
}

func (p *Settings) GetAgreementOcrImageCollection() int64 {
  return p.AgreementOcrImageCollection
}

func (p *Settings) GetPrivacyAllowFollow() bool {
  return p.PrivacyAllowFollow
}

func (p *Settings) GetPrivacyShowFollowList() bool {
  return p.PrivacyShowFollowList
}

func (p *Settings) GetNotificationBadgeTalkOnly() bool {
  return p.NotificationBadgeTalkOnly
}
func (p *Settings) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField48(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField60(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField62(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField63(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField65(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField66(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField67(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField68(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 69:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField69(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField70(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField71(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 72:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField72(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 73:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField73(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 74:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField74(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 75:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField75(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 76:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField76(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 77:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField77(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 78:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField78(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 79:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField79(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 80:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField80(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField81(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 82:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField82(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 83:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField83(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 85:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField85(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 86:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField86(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 87:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField87(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 88:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField88(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 89:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField89(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 90:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField90(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField92(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 93:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField93(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Settings)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NotificationEnable = v
}
  return nil
}

func (p *Settings)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NotificationMuteExpiration = v
}
  return nil
}

func (p *Settings)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NotificationNewMessage = v
}
  return nil
}

func (p *Settings)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NotificationGroupInvitation = v
}
  return nil
}

func (p *Settings)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NotificationShowMessage = v
}
  return nil
}

func (p *Settings)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NotificationIncomingCall = v
}
  return nil
}

func (p *Settings)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NotificationSoundMessage = v
}
  return nil
}

func (p *Settings)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.NotificationSoundGroup = v
}
  return nil
}

func (p *Settings)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NotificationDisabledWithSub = v
}
  return nil
}

func (p *Settings)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.NotificationPayment = v
}
  return nil
}

func (p *Settings)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PrivacySyncContacts = v
}
  return nil
}

func (p *Settings)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PrivacySearchByPhoneNumber = v
}
  return nil
}

func (p *Settings)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PrivacySearchByUserid = v
}
  return nil
}

func (p *Settings)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PrivacySearchByEmail = v
}
  return nil
}

func (p *Settings)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PrivacyAllowSecondaryDeviceLogin = v
}
  return nil
}

func (p *Settings)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.PrivacyProfileImagePostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.PrivacyReceiveMessagesFromNotFriend = v
}
  return nil
}

func (p *Settings)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PrivacyAgreeUseLineCoinToPaidCall = v
}
  return nil
}

func (p *Settings)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.PrivacyAgreeUsePaidCall = v
}
  return nil
}

func (p *Settings)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.PrivacyAllowFriendRequest = v
}
  return nil
}

func (p *Settings)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ContactMyTicket = v
}
  return nil
}

func (p *Settings)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  temp := IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *Settings)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.IdentityIdentifier = v
}
  return nil
}

func (p *Settings)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C60759oi]string, size)
  p.SnsAccounts =  tMap
  for i := 0; i < size; i ++ {
var _key38 C60759oi
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C60759oi(v)
    _key38 = temp
}
var _val39 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val39 = v
}
    p.SnsAccounts[_key38] = _val39
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.PhoneRegistration = v
}
  return nil
}

func (p *Settings)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  temp := EmailConfirmationStatus(v)
  p.EmailConfirmationStatus = temp
}
  return nil
}

func (p *Settings)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  temp := AccountMigrationPincodeType(v)
  p.AccountMigrationPincodeType = temp
}
  return nil
}

func (p *Settings)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.EnforcedInputAccountMigrationPincode = v
}
  return nil
}

func (p *Settings)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  temp := AccountMigrationPincodeType(v)
  p.SecurityCenterSettingsType = temp
}
  return nil
}

func (p *Settings)  ReadField48(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.AllowUnregistrationSecondaryDevice = v
}
  return nil
}

func (p *Settings)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.PreferenceLocale = v
}
  return nil
}

func (p *Settings)  ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C62606zb]string, size)
  p.CustomModes =  tMap
  for i := 0; i < size; i ++ {
var _key40 C62606zb
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C62606zb(v)
    _key40 = temp
}
var _val41 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val41 = v
}
    p.CustomModes[_key40] = _val41
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.E2eeEnable = v
}
  return nil
}

func (p *Settings)  ReadField62(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.HitokotoBackupRequested = v
}
  return nil
}

func (p *Settings)  ReadField63(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.PrivacyProfileMusicPostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField65(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 65: ", err)
} else {
  p.PrivacyAllowNearby = v
}
  return nil
}

func (p *Settings)  ReadField66(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 66: ", err)
} else {
  p.AgreementNearbyTime = v
}
  return nil
}

func (p *Settings)  ReadField67(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 67: ", err)
} else {
  p.AgreementSquareTime = v
}
  return nil
}

func (p *Settings)  ReadField68(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 68: ", err)
} else {
  p.NotificationMention = v
}
  return nil
}

func (p *Settings)  ReadField69(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 69: ", err)
} else {
  p.BotUseAgreementAcceptedAt = v
}
  return nil
}

func (p *Settings)  ReadField70(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.AgreementShakeFunction = v
}
  return nil
}

func (p *Settings)  ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.AgreementMobileContactName = v
}
  return nil
}

func (p *Settings)  ReadField72(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 72: ", err)
} else {
  p.NotificationThumbnail = v
}
  return nil
}

func (p *Settings)  ReadField73(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 73: ", err)
} else {
  p.AgreementSoundToText = v
}
  return nil
}

func (p *Settings)  ReadField74(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 74: ", err)
} else {
  p.PrivacyPolicyVersion = v
}
  return nil
}

func (p *Settings)  ReadField75(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 75: ", err)
} else {
  p.AgreementAdByWebAccess = v
}
  return nil
}

func (p *Settings)  ReadField76(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 76: ", err)
} else {
  p.AgreementPhoneNumberMatching = v
}
  return nil
}

func (p *Settings)  ReadField77(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 77: ", err)
} else {
  p.AgreementCommunicationInfo = v
}
  return nil
}

func (p *Settings)  ReadField78(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 78: ", err)
} else {
  temp := PrivacySharePersonalInfoToFriends(v)
  p.PrivacySharePersonalInfoToFriends = temp
}
  return nil
}

func (p *Settings)  ReadField79(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 79: ", err)
} else {
  p.AgreementThingsWirelessCommunication = v
}
  return nil
}

func (p *Settings)  ReadField80(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 80: ", err)
} else {
  p.AgreementGdpr = v
}
  return nil
}

func (p *Settings)  ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  temp := PrivacyStatusMessageHistory(v)
  p.PrivacyStatusMessageHistory = temp
}
  return nil
}

func (p *Settings)  ReadField82(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 82: ", err)
} else {
  p.AgreementProvideLocation = v
}
  return nil
}

func (p *Settings)  ReadField83(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 83: ", err)
} else {
  p.AgreementBeacon = v
}
  return nil
}

func (p *Settings)  ReadField85(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 85: ", err)
} else {
  temp := PrivacyAllowProfileHistory(v)
  p.PrivacyAllowProfileHistory = temp
}
  return nil
}

func (p *Settings)  ReadField86(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 86: ", err)
} else {
  p.AgreementContentsSuggest = v
}
  return nil
}

func (p *Settings)  ReadField87(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 87: ", err)
} else {
  p.AgreementContentsSuggestDataCollection = v
}
  return nil
}

func (p *Settings)  ReadField88(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 88: ", err)
} else {
  temp := PrivacyAgeResult_(v)
  p.PrivacyAgeResult_ = temp
}
  return nil
}

func (p *Settings)  ReadField89(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 89: ", err)
} else {
  p.PrivacyAgeResultReceived = v
}
  return nil
}

func (p *Settings)  ReadField90(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 90: ", err)
} else {
  p.AgreementOcrImageCollection = v
}
  return nil
}

func (p *Settings)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.PrivacyAllowFollow = v
}
  return nil
}

func (p *Settings)  ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 92: ", err)
} else {
  p.PrivacyShowFollowList = v
}
  return nil
}

func (p *Settings)  ReadField93(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 93: ", err)
} else {
  p.NotificationBadgeTalkOnly = v
}
  return nil
}

func (p *Settings) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Settings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField48(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField60(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField62(ctx, oprot); err != nil { return err }
    if err := p.writeField63(ctx, oprot); err != nil { return err }
    if err := p.writeField65(ctx, oprot); err != nil { return err }
    if err := p.writeField66(ctx, oprot); err != nil { return err }
    if err := p.writeField67(ctx, oprot); err != nil { return err }
    if err := p.writeField68(ctx, oprot); err != nil { return err }
    if err := p.writeField69(ctx, oprot); err != nil { return err }
    if err := p.writeField70(ctx, oprot); err != nil { return err }
    if err := p.writeField71(ctx, oprot); err != nil { return err }
    if err := p.writeField72(ctx, oprot); err != nil { return err }
    if err := p.writeField73(ctx, oprot); err != nil { return err }
    if err := p.writeField74(ctx, oprot); err != nil { return err }
    if err := p.writeField75(ctx, oprot); err != nil { return err }
    if err := p.writeField76(ctx, oprot); err != nil { return err }
    if err := p.writeField77(ctx, oprot); err != nil { return err }
    if err := p.writeField78(ctx, oprot); err != nil { return err }
    if err := p.writeField79(ctx, oprot); err != nil { return err }
    if err := p.writeField80(ctx, oprot); err != nil { return err }
    if err := p.writeField81(ctx, oprot); err != nil { return err }
    if err := p.writeField82(ctx, oprot); err != nil { return err }
    if err := p.writeField83(ctx, oprot); err != nil { return err }
    if err := p.writeField85(ctx, oprot); err != nil { return err }
    if err := p.writeField86(ctx, oprot); err != nil { return err }
    if err := p.writeField87(ctx, oprot); err != nil { return err }
    if err := p.writeField88(ctx, oprot); err != nil { return err }
    if err := p.writeField89(ctx, oprot); err != nil { return err }
    if err := p.writeField90(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
    if err := p.writeField92(ctx, oprot); err != nil { return err }
    if err := p.writeField93(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Settings) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationEnable", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err) }
  return err
}

func (p *Settings) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationMuteExpiration", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationMuteExpiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err) }
  return err
}

func (p *Settings) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationNewMessage", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NotificationNewMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err) }
  return err
}

func (p *Settings) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationGroupInvitation", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationGroupInvitation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err) }
  return err
}

func (p *Settings) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationShowMessage", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationShowMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err) }
  return err
}

func (p *Settings) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationIncomingCall", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationIncomingCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err) }
  return err
}

func (p *Settings) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationSoundMessage", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NotificationSoundMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err) }
  return err
}

func (p *Settings) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationSoundGroup", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NotificationSoundGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err) }
  return err
}

func (p *Settings) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabledWithSub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err) }
  return err
}

func (p *Settings) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationPayment", thrift.BOOL, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:notificationPayment: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationPayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationPayment (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:notificationPayment: ", p), err) }
  return err
}

func (p *Settings) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySyncContacts", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySyncContacts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err) }
  return err
}

func (p *Settings) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByPhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err) }
  return err
}

func (p *Settings) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByUserid", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err) }
  return err
}

func (p *Settings) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByEmail", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err) }
  return err
}

func (p *Settings) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowSecondaryDeviceLogin", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowSecondaryDeviceLogin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogin (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  return err
}

func (p *Settings) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  return err
}

func (p *Settings) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgreeUsePaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowFriendRequest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err) }
  return err
}

func (p *Settings) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactMyTicket", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContactMyTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err) }
  return err
}

func (p *Settings) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err) }
  return err
}

func (p *Settings) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityIdentifier", thrift.STRING, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdentityIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err) }
  return err
}

func (p *Settings) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccounts", thrift.MAP, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SnsAccounts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err) }
  return err
}

func (p *Settings) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneRegistration", thrift.BOOL, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PhoneRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err) }
  return err
}

func (p *Settings) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "emailConfirmationStatus", thrift.I32, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EmailConfirmationStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err) }
  return err
}

func (p *Settings) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationPincodeType", thrift.I32, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationPincodeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err) }
  return err
}

func (p *Settings) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  return err
}

func (p *Settings) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "securityCenterSettingsType", thrift.I32, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SecurityCenterSettingsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err) }
  return err
}

func (p *Settings) writeField48(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  return err
}

func (p *Settings) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preferenceLocale", thrift.STRING, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PreferenceLocale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err) }
  return err
}

func (p *Settings) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customModes", thrift.MAP, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.CustomModes {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err) }
  return err
}

func (p *Settings) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "e2eeEnable", thrift.BOOL, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.E2eeEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err) }
  return err
}

func (p *Settings) writeField62(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HitokotoBackupRequested)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err) }
  return err
}

func (p *Settings) writeField63(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField65(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowNearby", thrift.BOOL, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowNearby)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err) }
  return err
}

func (p *Settings) writeField66(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementNearbyTime", thrift.BOOL, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:agreementNearbyTime: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AgreementNearbyTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementNearbyTime (66) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:agreementNearbyTime: ", p), err) }
  return err
}

func (p *Settings) writeField67(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementSquareTime", thrift.I64, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementSquareTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err) }
  return err
}

func (p *Settings) writeField68(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationMention", thrift.BOOL, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationMention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err) }
  return err
}

func (p *Settings) writeField69(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botUseAgreementAcceptedAt", thrift.I64, 69); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:botUseAgreementAcceptedAt: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BotUseAgreementAcceptedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botUseAgreementAcceptedAt (69) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 69:botUseAgreementAcceptedAt: ", p), err) }
  return err
}

func (p *Settings) writeField70(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementShakeFunction", thrift.I64, 70); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:agreementShakeFunction: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementShakeFunction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementShakeFunction (70) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 70:agreementShakeFunction: ", p), err) }
  return err
}

func (p *Settings) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementMobileContactName", thrift.I64, 71); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:agreementMobileContactName: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementMobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementMobileContactName (71) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 71:agreementMobileContactName: ", p), err) }
  return err
}

func (p *Settings) writeField72(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationThumbnail", thrift.BOOL, 72); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:notificationThumbnail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationThumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationThumbnail (72) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 72:notificationThumbnail: ", p), err) }
  return err
}

func (p *Settings) writeField73(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementSoundToText", thrift.I64, 73); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:agreementSoundToText: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementSoundToText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSoundToText (73) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 73:agreementSoundToText: ", p), err) }
  return err
}

func (p *Settings) writeField74(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyPolicyVersion", thrift.STRING, 74); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:privacyPolicyVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrivacyPolicyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyPolicyVersion (74) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 74:privacyPolicyVersion: ", p), err) }
  return err
}

func (p *Settings) writeField75(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementAdByWebAccess", thrift.I64, 75); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:agreementAdByWebAccess: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementAdByWebAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementAdByWebAccess (75) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 75:agreementAdByWebAccess: ", p), err) }
  return err
}

func (p *Settings) writeField76(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementPhoneNumberMatching", thrift.I64, 76); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:agreementPhoneNumberMatching: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementPhoneNumberMatching)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementPhoneNumberMatching (76) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 76:agreementPhoneNumberMatching: ", p), err) }
  return err
}

func (p *Settings) writeField77(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementCommunicationInfo", thrift.I64, 77); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:agreementCommunicationInfo: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementCommunicationInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementCommunicationInfo (77) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 77:agreementCommunicationInfo: ", p), err) }
  return err
}

func (p *Settings) writeField78(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySharePersonalInfoToFriends", thrift.I32, 78); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:privacySharePersonalInfoToFriends: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacySharePersonalInfoToFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySharePersonalInfoToFriends (78) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 78:privacySharePersonalInfoToFriends: ", p), err) }
  return err
}

func (p *Settings) writeField79(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementThingsWirelessCommunication", thrift.I64, 79); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:agreementThingsWirelessCommunication: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementThingsWirelessCommunication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementThingsWirelessCommunication (79) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 79:agreementThingsWirelessCommunication: ", p), err) }
  return err
}

func (p *Settings) writeField80(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementGdpr", thrift.I64, 80); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:agreementGdpr: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementGdpr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementGdpr (80) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 80:agreementGdpr: ", p), err) }
  return err
}

func (p *Settings) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyStatusMessageHistory", thrift.I32, 81); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:privacyStatusMessageHistory: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacyStatusMessageHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyStatusMessageHistory (81) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 81:privacyStatusMessageHistory: ", p), err) }
  return err
}

func (p *Settings) writeField82(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementProvideLocation", thrift.I64, 82); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:agreementProvideLocation: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementProvideLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementProvideLocation (82) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 82:agreementProvideLocation: ", p), err) }
  return err
}

func (p *Settings) writeField83(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementBeacon", thrift.I64, 83); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:agreementBeacon: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementBeacon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementBeacon (83) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 83:agreementBeacon: ", p), err) }
  return err
}

func (p *Settings) writeField85(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowProfileHistory", thrift.I32, 85); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:privacyAllowProfileHistory: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacyAllowProfileHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowProfileHistory (85) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 85:privacyAllowProfileHistory: ", p), err) }
  return err
}

func (p *Settings) writeField86(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementContentsSuggest", thrift.I64, 86); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:agreementContentsSuggest: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementContentsSuggest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggest (86) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 86:agreementContentsSuggest: ", p), err) }
  return err
}

func (p *Settings) writeField87(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementContentsSuggestDataCollection", thrift.I64, 87); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:agreementContentsSuggestDataCollection: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementContentsSuggestDataCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggestDataCollection (87) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 87:agreementContentsSuggestDataCollection: ", p), err) }
  return err
}

func (p *Settings) writeField88(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgeResult", thrift.I32, 88); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:privacyAgeResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacyAgeResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResult (88) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 88:privacyAgeResult: ", p), err) }
  return err
}

func (p *Settings) writeField89(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgeResultReceived", thrift.BOOL, 89); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:privacyAgeResultReceived: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgeResultReceived)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResultReceived (89) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 89:privacyAgeResultReceived: ", p), err) }
  return err
}

func (p *Settings) writeField90(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementOcrImageCollection", thrift.I64, 90); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:agreementOcrImageCollection: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementOcrImageCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementOcrImageCollection (90) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 90:agreementOcrImageCollection: ", p), err) }
  return err
}

func (p *Settings) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowFollow", thrift.BOOL, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:privacyAllowFollow: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFollow (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:privacyAllowFollow: ", p), err) }
  return err
}

func (p *Settings) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyShowFollowList", thrift.BOOL, 92); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:privacyShowFollowList: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyShowFollowList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyShowFollowList (92) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 92:privacyShowFollowList: ", p), err) }
  return err
}

func (p *Settings) writeField93(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationBadgeTalkOnly", thrift.BOOL, 93); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:notificationBadgeTalkOnly: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationBadgeTalkOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationBadgeTalkOnly (93) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 93:notificationBadgeTalkOnly: ", p), err) }
  return err
}

func (p *Settings) Equals(other *Settings) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NotificationEnable != other.NotificationEnable { return false }
  if p.NotificationMuteExpiration != other.NotificationMuteExpiration { return false }
  if p.NotificationNewMessage != other.NotificationNewMessage { return false }
  if p.NotificationGroupInvitation != other.NotificationGroupInvitation { return false }
  if p.NotificationShowMessage != other.NotificationShowMessage { return false }
  if p.NotificationIncomingCall != other.NotificationIncomingCall { return false }
  if p.NotificationSoundMessage != other.NotificationSoundMessage { return false }
  if p.NotificationSoundGroup != other.NotificationSoundGroup { return false }
  if p.NotificationDisabledWithSub != other.NotificationDisabledWithSub { return false }
  if p.NotificationPayment != other.NotificationPayment { return false }
  if p.PrivacySyncContacts != other.PrivacySyncContacts { return false }
  if p.PrivacySearchByPhoneNumber != other.PrivacySearchByPhoneNumber { return false }
  if p.PrivacySearchByUserid != other.PrivacySearchByUserid { return false }
  if p.PrivacySearchByEmail != other.PrivacySearchByEmail { return false }
  if p.PrivacyAllowSecondaryDeviceLogin != other.PrivacyAllowSecondaryDeviceLogin { return false }
  if p.PrivacyProfileImagePostToMyhome != other.PrivacyProfileImagePostToMyhome { return false }
  if p.PrivacyReceiveMessagesFromNotFriend != other.PrivacyReceiveMessagesFromNotFriend { return false }
  if p.PrivacyAgreeUseLineCoinToPaidCall != other.PrivacyAgreeUseLineCoinToPaidCall { return false }
  if p.PrivacyAgreeUsePaidCall != other.PrivacyAgreeUsePaidCall { return false }
  if p.PrivacyAllowFriendRequest != other.PrivacyAllowFriendRequest { return false }
  if p.ContactMyTicket != other.ContactMyTicket { return false }
  if p.IdentityProvider != other.IdentityProvider { return false }
  if p.IdentityIdentifier != other.IdentityIdentifier { return false }
  if len(p.SnsAccounts) != len(other.SnsAccounts) { return false }
  for k, _tgt := range p.SnsAccounts {
    _src42 := other.SnsAccounts[k]
    if _tgt != _src42 { return false }
  }
  if p.PhoneRegistration != other.PhoneRegistration { return false }
  if p.EmailConfirmationStatus != other.EmailConfirmationStatus { return false }
  if p.AccountMigrationPincodeType != other.AccountMigrationPincodeType { return false }
  if p.EnforcedInputAccountMigrationPincode != other.EnforcedInputAccountMigrationPincode { return false }
  if p.SecurityCenterSettingsType != other.SecurityCenterSettingsType { return false }
  if p.AllowUnregistrationSecondaryDevice != other.AllowUnregistrationSecondaryDevice { return false }
  if p.PreferenceLocale != other.PreferenceLocale { return false }
  if len(p.CustomModes) != len(other.CustomModes) { return false }
  for k, _tgt := range p.CustomModes {
    _src43 := other.CustomModes[k]
    if _tgt != _src43 { return false }
  }
  if p.E2eeEnable != other.E2eeEnable { return false }
  if p.HitokotoBackupRequested != other.HitokotoBackupRequested { return false }
  if p.PrivacyProfileMusicPostToMyhome != other.PrivacyProfileMusicPostToMyhome { return false }
  if p.PrivacyAllowNearby != other.PrivacyAllowNearby { return false }
  if p.AgreementNearbyTime != other.AgreementNearbyTime { return false }
  if p.AgreementSquareTime != other.AgreementSquareTime { return false }
  if p.NotificationMention != other.NotificationMention { return false }
  if p.BotUseAgreementAcceptedAt != other.BotUseAgreementAcceptedAt { return false }
  if p.AgreementShakeFunction != other.AgreementShakeFunction { return false }
  if p.AgreementMobileContactName != other.AgreementMobileContactName { return false }
  if p.NotificationThumbnail != other.NotificationThumbnail { return false }
  if p.AgreementSoundToText != other.AgreementSoundToText { return false }
  if p.PrivacyPolicyVersion != other.PrivacyPolicyVersion { return false }
  if p.AgreementAdByWebAccess != other.AgreementAdByWebAccess { return false }
  if p.AgreementPhoneNumberMatching != other.AgreementPhoneNumberMatching { return false }
  if p.AgreementCommunicationInfo != other.AgreementCommunicationInfo { return false }
  if p.PrivacySharePersonalInfoToFriends != other.PrivacySharePersonalInfoToFriends { return false }
  if p.AgreementThingsWirelessCommunication != other.AgreementThingsWirelessCommunication { return false }
  if p.AgreementGdpr != other.AgreementGdpr { return false }
  if p.PrivacyStatusMessageHistory != other.PrivacyStatusMessageHistory { return false }
  if p.AgreementProvideLocation != other.AgreementProvideLocation { return false }
  if p.AgreementBeacon != other.AgreementBeacon { return false }
  if p.PrivacyAllowProfileHistory != other.PrivacyAllowProfileHistory { return false }
  if p.AgreementContentsSuggest != other.AgreementContentsSuggest { return false }
  if p.AgreementContentsSuggestDataCollection != other.AgreementContentsSuggestDataCollection { return false }
  if p.PrivacyAgeResult_ != other.PrivacyAgeResult_ { return false }
  if p.PrivacyAgeResultReceived != other.PrivacyAgeResultReceived { return false }
  if p.AgreementOcrImageCollection != other.AgreementOcrImageCollection { return false }
  if p.PrivacyAllowFollow != other.PrivacyAllowFollow { return false }
  if p.PrivacyShowFollowList != other.PrivacyShowFollowList { return false }
  if p.NotificationBadgeTalkOnly != other.NotificationBadgeTalkOnly { return false }
  return true
}

func (p *Settings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Settings(%+v)", *p)
}

// Attributes:
//  - URL
//  - Checksum
type ChatEffectMetaContent struct {
  URL string `thrift:"url,1" db:"url" json:"url"`
  Checksum string `thrift:"checksum,2" db:"checksum" json:"checksum"`
}

func NewChatEffectMetaContent() *ChatEffectMetaContent {
  return &ChatEffectMetaContent{}
}


func (p *ChatEffectMetaContent) GetURL() string {
  return p.URL
}

func (p *ChatEffectMetaContent) GetChecksum() string {
  return p.Checksum
}
func (p *ChatEffectMetaContent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatEffectMetaContent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *ChatEffectMetaContent)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *ChatEffectMetaContent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatEffectMetaContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatEffectMetaContent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *ChatEffectMetaContent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "checksum", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:checksum: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:checksum: ", p), err) }
  return err
}

func (p *ChatEffectMetaContent) Equals(other *ChatEffectMetaContent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.URL != other.URL { return false }
  if p.Checksum != other.Checksum { return false }
  return true
}

func (p *ChatEffectMetaContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatEffectMetaContent(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
type Category struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Name int32 `thrift:"name,2" db:"name" json:"name"`
}

func NewCategory() *Category {
  return &Category{}
}


func (p *Category) GetID() int32 {
  return p.ID
}

func (p *Category) GetName() int32 {
  return p.Name
}
func (p *Category) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Category)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Category)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Category) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Category"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Category) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Category) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Category) Equals(other *Category) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *Category) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Category(%+v)", *p)
}

// Attributes:
//  - ContentId
//  - Category
//  - Name
//  - DefaultContent
//  - OptionalContents
//  - Keywords
//  - BeginTimeMillis
//  - EndTimeMillis
//  - CreatedTimeMillis
//  - UpdatedTimeMillis
type ChatEffectMeta struct {
  ContentId int64 `thrift:"contentId,1" db:"contentId" json:"contentId"`
  Category *Category `thrift:"category,2" db:"category" json:"category"`
  Name int32 `thrift:"name,3" db:"name" json:"name"`
  DefaultContent *ChatEffectMetaContent `thrift:"defaultContent,4" db:"defaultContent" json:"defaultContent"`
  OptionalContents map[C59265fa]*ChatEffectMetaContent `thrift:"optionalContents,5" db:"optionalContents" json:"optionalContents"`
  Keywords []string `thrift:"keywords,6" db:"keywords" json:"keywords"`
  BeginTimeMillis int64 `thrift:"beginTimeMillis,7" db:"beginTimeMillis" json:"beginTimeMillis"`
  EndTimeMillis int64 `thrift:"endTimeMillis,8" db:"endTimeMillis" json:"endTimeMillis"`
  CreatedTimeMillis int64 `thrift:"createdTimeMillis,9" db:"createdTimeMillis" json:"createdTimeMillis"`
  UpdatedTimeMillis int64 `thrift:"updatedTimeMillis,10" db:"updatedTimeMillis" json:"updatedTimeMillis"`
}

func NewChatEffectMeta() *ChatEffectMeta {
  return &ChatEffectMeta{}
}


func (p *ChatEffectMeta) GetContentId() int64 {
  return p.ContentId
}
var ChatEffectMeta_Category_DEFAULT *Category
func (p *ChatEffectMeta) GetCategory() *Category {
  if !p.IsSetCategory() {
    return ChatEffectMeta_Category_DEFAULT
  }
return p.Category
}

func (p *ChatEffectMeta) GetName() int32 {
  return p.Name
}
var ChatEffectMeta_DefaultContent_DEFAULT *ChatEffectMetaContent
func (p *ChatEffectMeta) GetDefaultContent() *ChatEffectMetaContent {
  if !p.IsSetDefaultContent() {
    return ChatEffectMeta_DefaultContent_DEFAULT
  }
return p.DefaultContent
}

func (p *ChatEffectMeta) GetOptionalContents() map[C59265fa]*ChatEffectMetaContent {
  return p.OptionalContents
}

func (p *ChatEffectMeta) GetKeywords() []string {
  return p.Keywords
}

func (p *ChatEffectMeta) GetBeginTimeMillis() int64 {
  return p.BeginTimeMillis
}

func (p *ChatEffectMeta) GetEndTimeMillis() int64 {
  return p.EndTimeMillis
}

func (p *ChatEffectMeta) GetCreatedTimeMillis() int64 {
  return p.CreatedTimeMillis
}

func (p *ChatEffectMeta) GetUpdatedTimeMillis() int64 {
  return p.UpdatedTimeMillis
}
func (p *ChatEffectMeta) IsSetCategory() bool {
  return p.Category != nil
}

func (p *ChatEffectMeta) IsSetDefaultContent() bool {
  return p.DefaultContent != nil
}

func (p *ChatEffectMeta) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ContentId = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Category = &Category{}
  if err := p.Category.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Category), err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.DefaultContent = &ChatEffectMetaContent{}
  if err := p.DefaultContent.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultContent), err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C59265fa]*ChatEffectMetaContent, size)
  p.OptionalContents =  tMap
  for i := 0; i < size; i ++ {
var _key44 C59265fa
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59265fa(v)
    _key44 = temp
}
    _val45 := &ChatEffectMetaContent{}
    if err := _val45.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val45), err)
    }
    p.OptionalContents[_key44] = _val45
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Keywords =  tSet
  for i := 0; i < size; i ++ {
var _elem46 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem46 = v
}
    p.Keywords = append(p.Keywords, _elem46)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BeginTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EndTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CreatedTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UpdatedTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChatEffectMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatEffectMeta) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contentId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ContentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contentId: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category: ", p), err) }
  if err := p.Category.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Category), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "defaultContent", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:defaultContent: ", p), err) }
  if err := p.DefaultContent.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultContent), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:defaultContent: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "optionalContents", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:optionalContents: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.OptionalContents)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.OptionalContents {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:optionalContents: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keywords", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:keywords: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Keywords)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Keywords); i++ {
    for j := i+1; j<len(p.Keywords); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Keywords[i], p.Keywords[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Keywords))
      }
    }
  }
  for _, v := range p.Keywords {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:keywords: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "beginTimeMillis", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:beginTimeMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BeginTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.beginTimeMillis (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:beginTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endTimeMillis", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:endTimeMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTimeMillis (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:endTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTimeMillis", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:createdTimeMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTimeMillis (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:createdTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedTimeMillis", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updatedTimeMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UpdatedTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedTimeMillis (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updatedTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) Equals(other *ChatEffectMeta) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ContentId != other.ContentId { return false }
  if !p.Category.Equals(other.Category) { return false }
  if p.Name != other.Name { return false }
  if !p.DefaultContent.Equals(other.DefaultContent) { return false }
  if len(p.OptionalContents) != len(other.OptionalContents) { return false }
  for k, _tgt := range p.OptionalContents {
    _src47 := other.OptionalContents[k]
    if !_tgt.Equals(_src47) { return false }
  }
  if len(p.Keywords) != len(other.Keywords) { return false }
  for i, _tgt := range p.Keywords {
    _src48 := other.Keywords[i]
    if _tgt != _src48 { return false }
  }
  if p.BeginTimeMillis != other.BeginTimeMillis { return false }
  if p.EndTimeMillis != other.EndTimeMillis { return false }
  if p.CreatedTimeMillis != other.CreatedTimeMillis { return false }
  if p.UpdatedTimeMillis != other.UpdatedTimeMillis { return false }
  return true
}

func (p *ChatEffectMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatEffectMeta(%+v)", *p)
}

// Attributes:
//  - GaSamplingRate
//  - Tmid
type AnalyticsInfo struct {
  GaSamplingRate float64 `thrift:"gaSamplingRate,1" db:"gaSamplingRate" json:"gaSamplingRate"`
  Tmid string `thrift:"tmid,2" db:"tmid" json:"tmid"`
}

func NewAnalyticsInfo() *AnalyticsInfo {
  return &AnalyticsInfo{}
}


func (p *AnalyticsInfo) GetGaSamplingRate() float64 {
  return p.GaSamplingRate
}

func (p *AnalyticsInfo) GetTmid() string {
  return p.Tmid
}
func (p *AnalyticsInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnalyticsInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GaSamplingRate = v
}
  return nil
}

func (p *AnalyticsInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tmid = v
}
  return nil
}

func (p *AnalyticsInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnalyticsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnalyticsInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gaSamplingRate", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gaSamplingRate: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.GaSamplingRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gaSamplingRate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gaSamplingRate: ", p), err) }
  return err
}

func (p *AnalyticsInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tmid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tmid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tmid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tmid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tmid: ", p), err) }
  return err
}

func (p *AnalyticsInfo) Equals(other *AnalyticsInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.GaSamplingRate != other.GaSamplingRate { return false }
  if p.Tmid != other.Tmid { return false }
  return true
}

func (p *AnalyticsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnalyticsInfo(%+v)", *p)
}

// Attributes:
//  - EMid
//  - Mid
//  - Direction
//  - Method
//  - Param
//  - Timestamp
//  - SeqId
//  - DisplayName
//  - PicturePath
//  - PictureStatus
type FriendRequest struct {
  EMid string `thrift:"eMid,1" db:"eMid" json:"eMid"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Direction Direction `thrift:"direction,3" db:"direction" json:"direction"`
  Method FriendRequestMethod `thrift:"method,4" db:"method" json:"method"`
  Param string `thrift:"param,5" db:"param" json:"param"`
  Timestamp int64 `thrift:"timestamp,6" db:"timestamp" json:"timestamp"`
  SeqId int64 `thrift:"seqId,7" db:"seqId" json:"seqId"`
  // unused fields # 8 to 9
  DisplayName string `thrift:"displayName,10" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,11" db:"picturePath" json:"picturePath"`
  PictureStatus string `thrift:"pictureStatus,12" db:"pictureStatus" json:"pictureStatus"`
}

func NewFriendRequest() *FriendRequest {
  return &FriendRequest{}
}


func (p *FriendRequest) GetEMid() string {
  return p.EMid
}

func (p *FriendRequest) GetMid() string {
  return p.Mid
}

func (p *FriendRequest) GetDirection() Direction {
  return p.Direction
}

func (p *FriendRequest) GetMethod() FriendRequestMethod {
  return p.Method
}

func (p *FriendRequest) GetParam() string {
  return p.Param
}

func (p *FriendRequest) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *FriendRequest) GetSeqId() int64 {
  return p.SeqId
}

func (p *FriendRequest) GetDisplayName() string {
  return p.DisplayName
}

func (p *FriendRequest) GetPicturePath() string {
  return p.PicturePath
}

func (p *FriendRequest) GetPictureStatus() string {
  return p.PictureStatus
}
func (p *FriendRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FriendRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FriendRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *FriendRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := FriendRequestMethod(v)
  p.Method = temp
}
  return nil
}

func (p *FriendRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *FriendRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *FriendRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SeqId = v
}
  return nil
}

func (p *FriendRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FriendRequest)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FriendRequest)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *FriendRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FriendRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eMid: ", p), err) }
  return err
}

func (p *FriendRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *FriendRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direction: ", p), err) }
  return err
}

func (p *FriendRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err) }
  return err
}

func (p *FriendRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:param: ", p), err) }
  return err
}

func (p *FriendRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err) }
  return err
}

func (p *FriendRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:seqId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:seqId: ", p), err) }
  return err
}

func (p *FriendRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:displayName: ", p), err) }
  return err
}

func (p *FriendRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:picturePath: ", p), err) }
  return err
}

func (p *FriendRequest) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pictureStatus: ", p), err) }
  return err
}

func (p *FriendRequest) Equals(other *FriendRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EMid != other.EMid { return false }
  if p.Mid != other.Mid { return false }
  if p.Direction != other.Direction { return false }
  if p.Method != other.Method { return false }
  if p.Param != other.Param { return false }
  if p.Timestamp != other.Timestamp { return false }
  if p.SeqId != other.SeqId { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  return true
}

func (p *FriendRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequest(%+v)", *p)
}

// Attributes:
//  - TotalIncomingCount
//  - TotalOutgoingCount
//  - RecentIncomings
//  - RecentOutgoings
//  - TotalIncomingLimit
//  - TotalOutgoingLimit
type FriendRequestsInfo struct {
  TotalIncomingCount int32 `thrift:"totalIncomingCount,1" db:"totalIncomingCount" json:"totalIncomingCount"`
  TotalOutgoingCount int32 `thrift:"totalOutgoingCount,2" db:"totalOutgoingCount" json:"totalOutgoingCount"`
  RecentIncomings []*FriendRequest `thrift:"recentIncomings,3" db:"recentIncomings" json:"recentIncomings"`
  RecentOutgoings []*FriendRequest `thrift:"recentOutgoings,4" db:"recentOutgoings" json:"recentOutgoings"`
  TotalIncomingLimit int32 `thrift:"totalIncomingLimit,5" db:"totalIncomingLimit" json:"totalIncomingLimit"`
  TotalOutgoingLimit int32 `thrift:"totalOutgoingLimit,6" db:"totalOutgoingLimit" json:"totalOutgoingLimit"`
}

func NewFriendRequestsInfo() *FriendRequestsInfo {
  return &FriendRequestsInfo{}
}


func (p *FriendRequestsInfo) GetTotalIncomingCount() int32 {
  return p.TotalIncomingCount
}

func (p *FriendRequestsInfo) GetTotalOutgoingCount() int32 {
  return p.TotalOutgoingCount
}

func (p *FriendRequestsInfo) GetRecentIncomings() []*FriendRequest {
  return p.RecentIncomings
}

func (p *FriendRequestsInfo) GetRecentOutgoings() []*FriendRequest {
  return p.RecentOutgoings
}

func (p *FriendRequestsInfo) GetTotalIncomingLimit() int32 {
  return p.TotalIncomingLimit
}

func (p *FriendRequestsInfo) GetTotalOutgoingLimit() int32 {
  return p.TotalOutgoingLimit
}
func (p *FriendRequestsInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalIncomingCount = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalOutgoingCount = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.RecentIncomings =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := &FriendRequest{}
    if err := _elem49.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.RecentIncomings = append(p.RecentIncomings, _elem49)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.RecentOutgoings =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := &FriendRequest{}
    if err := _elem50.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.RecentOutgoings = append(p.RecentOutgoings, _elem50)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalIncomingLimit = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TotalOutgoingLimit = v
}
  return nil
}

func (p *FriendRequestsInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FriendRequestsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequestsInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalIncomingCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalIncomingCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalIncomingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalIncomingCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalIncomingCount: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalOutgoingCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalOutgoingCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalOutgoingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalOutgoingCount: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recentIncomings", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recentIncomings: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RecentIncomings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecentIncomings {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recentIncomings: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recentOutgoings", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recentOutgoings: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RecentOutgoings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecentOutgoings {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recentOutgoings: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalIncomingLimit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalIncomingLimit: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalIncomingLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalIncomingLimit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalIncomingLimit: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalOutgoingLimit", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalOutgoingLimit: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalOutgoingLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingLimit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalOutgoingLimit: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) Equals(other *FriendRequestsInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TotalIncomingCount != other.TotalIncomingCount { return false }
  if p.TotalOutgoingCount != other.TotalOutgoingCount { return false }
  if len(p.RecentIncomings) != len(other.RecentIncomings) { return false }
  for i, _tgt := range p.RecentIncomings {
    _src51 := other.RecentIncomings[i]
    if !_tgt.Equals(_src51) { return false }
  }
  if len(p.RecentOutgoings) != len(other.RecentOutgoings) { return false }
  for i, _tgt := range p.RecentOutgoings {
    _src52 := other.RecentOutgoings[i]
    if !_tgt.Equals(_src52) { return false }
  }
  if p.TotalIncomingLimit != other.TotalIncomingLimit { return false }
  if p.TotalOutgoingLimit != other.TotalOutgoingLimit { return false }
  return true
}

func (p *FriendRequestsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequestsInfo(%+v)", *p)
}

// Attributes:
//  - Chats
type GetChatsResponse struct {
  Chats []*Chat `thrift:"chats,1" db:"chats" json:"chats"`
}

func NewGetChatsResponse() *GetChatsResponse {
  return &GetChatsResponse{}
}


func (p *GetChatsResponse) GetChats() []*Chat {
  return p.Chats
}
func (p *GetChatsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Chat, 0, size)
  p.Chats =  tSlice
  for i := 0; i < size; i ++ {
    _elem53 := &Chat{}
    if err := _elem53.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
    }
    p.Chats = append(p.Chats, _elem53)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetChatsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Chats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chats: ", p), err) }
  return err
}

func (p *GetChatsResponse) Equals(other *GetChatsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Chats) != len(other.Chats) { return false }
  for i, _tgt := range p.Chats {
    _src54 := other.Chats[i]
    if !_tgt.Equals(_src54) { return false }
  }
  return true
}

func (p *GetChatsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsResponse(%+v)", *p)
}

// Attributes:
//  - ChatMids
//  - WithMembers
//  - WithInvitees
type GetChatsRequest struct {
  ChatMids []string `thrift:"chatMids,1" db:"chatMids" json:"chatMids"`
  WithMembers bool `thrift:"withMembers,2" db:"withMembers" json:"withMembers"`
  WithInvitees bool `thrift:"withInvitees,3" db:"withInvitees" json:"withInvitees"`
}

func NewGetChatsRequest() *GetChatsRequest {
  return &GetChatsRequest{}
}


func (p *GetChatsRequest) GetChatMids() []string {
  return p.ChatMids
}

func (p *GetChatsRequest) GetWithMembers() bool {
  return p.WithMembers
}

func (p *GetChatsRequest) GetWithInvitees() bool {
  return p.WithInvitees
}
func (p *GetChatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem55 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem55 = v
}
    p.ChatMids = append(p.ChatMids, _elem55)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithMembers = v
}
  return nil
}

func (p *GetChatsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithInvitees = v
}
  return nil
}

func (p *GetChatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetChatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMids: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withMembers", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withMembers: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithMembers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMembers (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withMembers: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withInvitees", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withInvitees: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithInvitees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitees (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withInvitees: ", p), err) }
  return err
}

func (p *GetChatsRequest) Equals(other *GetChatsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ChatMids) != len(other.ChatMids) { return false }
  for i, _tgt := range p.ChatMids {
    _src56 := other.ChatMids[i]
    if _tgt != _src56 { return false }
  }
  if p.WithMembers != other.WithMembers { return false }
  if p.WithInvitees != other.WithInvitees { return false }
  return true
}

func (p *GetChatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsRequest(%+v)", *p)
}

// Attributes:
//  - Title
//  - Artist
//  - Oid
//  - ChannelId
type Ringtone struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Artist string `thrift:"artist,2" db:"artist" json:"artist"`
  Oid string `thrift:"oid,3" db:"oid" json:"oid"`
  ChannelId string `thrift:"channelId,4" db:"channelId" json:"channelId"`
}

func NewRingtone() *Ringtone {
  return &Ringtone{}
}


func (p *Ringtone) GetTitle() string {
  return p.Title
}

func (p *Ringtone) GetArtist() string {
  return p.Artist
}

func (p *Ringtone) GetOid() string {
  return p.Oid
}

func (p *Ringtone) GetChannelId() string {
  return p.ChannelId
}
func (p *Ringtone) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ringtone)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Ringtone)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Artist = v
}
  return nil
}

func (p *Ringtone)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *Ringtone)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *Ringtone) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ringtone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ringtone) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Ringtone) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "artist", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:artist: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Artist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.artist (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:artist: ", p), err) }
  return err
}

func (p *Ringtone) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oid: ", p), err) }
  return err
}

func (p *Ringtone) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:channelId: ", p), err) }
  return err
}

func (p *Ringtone) Equals(other *Ringtone) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Title != other.Title { return false }
  if p.Artist != other.Artist { return false }
  if p.Oid != other.Oid { return false }
  if p.ChannelId != other.ChannelId { return false }
  return true
}

func (p *Ringtone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ringtone(%+v)", *p)
}

// Attributes:
//  - AllowedTypes
//  - PublicKey
//  - SpecVersion
type E2EENegotiationResult_ struct {
  AllowedTypes []C61914vb `thrift:"allowedTypes,1" db:"allowedTypes" json:"allowedTypes"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
  SpecVersion int32 `thrift:"specVersion,3" db:"specVersion" json:"specVersion"`
}

func NewE2EENegotiationResult_() *E2EENegotiationResult_ {
  return &E2EENegotiationResult_{}
}


func (p *E2EENegotiationResult_) GetAllowedTypes() []C61914vb {
  return p.AllowedTypes
}
var E2EENegotiationResult__PublicKey_DEFAULT *E2EEPublicKey
func (p *E2EENegotiationResult_) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return E2EENegotiationResult__PublicKey_DEFAULT
  }
return p.PublicKey
}

func (p *E2EENegotiationResult_) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EENegotiationResult_) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *E2EENegotiationResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C61914vb, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem57 C61914vb
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C61914vb(v)
    _elem57 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem57)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EENegotiationResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EENegotiationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EENegotiationResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowedTypes", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if func(tgt, src C61914vb) bool {
        if tgt != src { return false }
        return true
      }(p.AllowedTypes[i], p.AllowedTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:allowedTypes: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "specVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:specVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:specVersion: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) Equals(other *E2EENegotiationResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.AllowedTypes) != len(other.AllowedTypes) { return false }
  for i, _tgt := range p.AllowedTypes {
    _src58 := other.AllowedTypes[i]
    if _tgt != _src58 { return false }
  }
  if !p.PublicKey.Equals(other.PublicKey) { return false }
  if p.SpecVersion != other.SpecVersion { return false }
  return true
}

func (p *E2EENegotiationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EENegotiationResult_(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type DeleteOtherFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewDeleteOtherFromChatRequest() *DeleteOtherFromChatRequest {
  return &DeleteOtherFromChatRequest{}
}


func (p *DeleteOtherFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteOtherFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteOtherFromChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *DeleteOtherFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem59 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem59 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem59)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) Equals(other *DeleteOtherFromChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src60 := other.TargetUserMids[i]
    if _tgt != _src60 { return false }
  }
  return true
}

func (p *DeleteOtherFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type InviteIntoChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewInviteIntoChatRequest() *InviteIntoChatRequest {
  return &InviteIntoChatRequest{}
}


func (p *InviteIntoChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *InviteIntoChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *InviteIntoChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *InviteIntoChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem61 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem61 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem61)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *InviteIntoChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InviteIntoChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) Equals(other *InviteIntoChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src62 := other.TargetUserMids[i]
    if _tgt != _src62 { return false }
  }
  return true
}

func (p *InviteIntoChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TicketId
type AcceptChatInvitationByTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewAcceptChatInvitationByTicketRequest() *AcceptChatInvitationByTicketRequest {
  return &AcceptChatInvitationByTicketRequest{}
}


func (p *AcceptChatInvitationByTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationByTicketRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *AcceptChatInvitationByTicketRequest) GetTicketId() string {
  return p.TicketId
}
func (p *AcceptChatInvitationByTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationByTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationByTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) Equals(other *AcceptChatInvitationByTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *AcceptChatInvitationByTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationByTicketRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - LastSeenMessageDeliveredTime
//  - LastSeenMessageId
//  - LastMessageDeliveredTime
//  - LastMessageId
type DeleteSelfFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastSeenMessageDeliveredTime int64 `thrift:"lastSeenMessageDeliveredTime,3" db:"lastSeenMessageDeliveredTime" json:"lastSeenMessageDeliveredTime"`
  LastSeenMessageId string `thrift:"lastSeenMessageId,4" db:"lastSeenMessageId" json:"lastSeenMessageId"`
  LastMessageDeliveredTime int64 `thrift:"lastMessageDeliveredTime,5" db:"lastMessageDeliveredTime" json:"lastMessageDeliveredTime"`
  LastMessageId string `thrift:"lastMessageId,6" db:"lastMessageId" json:"lastMessageId"`
}

func NewDeleteSelfFromChatRequest() *DeleteSelfFromChatRequest {
  return &DeleteSelfFromChatRequest{}
}


func (p *DeleteSelfFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteSelfFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageDeliveredTime() int64 {
  return p.LastSeenMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageId() string {
  return p.LastSeenMessageId
}

func (p *DeleteSelfFromChatRequest) GetLastMessageDeliveredTime() int64 {
  return p.LastMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *DeleteSelfFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastSeenMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastSeenMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageDeliveredTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSeenMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSeenMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageDeliveredTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSeenMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastSeenMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastSeenMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastSeenMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageDeliveredTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageDeliveredTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) Equals(other *DeleteSelfFromChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.LastSeenMessageDeliveredTime != other.LastSeenMessageDeliveredTime { return false }
  if p.LastSeenMessageId != other.LastSeenMessageId { return false }
  if p.LastMessageDeliveredTime != other.LastMessageDeliveredTime { return false }
  if p.LastMessageId != other.LastMessageId { return false }
  return true
}

func (p *DeleteSelfFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatRequest(%+v)", *p)
}

// Attributes:
//  - TicketId
type FindChatByTicketRequest struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewFindChatByTicketRequest() *FindChatByTicketRequest {
  return &FindChatByTicketRequest{}
}


func (p *FindChatByTicketRequest) GetTicketId() string {
  return p.TicketId
}
func (p *FindChatByTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindChatByTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *FindChatByTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FindChatByTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindChatByTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *FindChatByTicketRequest) Equals(other *FindChatByTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *FindChatByTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindChatByTicketRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type CancelChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewCancelChatInvitationRequest() *CancelChatInvitationRequest {
  return &CancelChatInvitationRequest{}
}


func (p *CancelChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CancelChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *CancelChatInvitationRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *CancelChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem63 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem63 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem63)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CancelChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) Equals(other *CancelChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src64 := other.TargetUserMids[i]
    if _tgt != _src64 { return false }
  }
  return true
}

func (p *CancelChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type AcceptChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewAcceptChatInvitationRequest() *AcceptChatInvitationRequest {
  return &AcceptChatInvitationRequest{}
}


func (p *AcceptChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *AcceptChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) Equals(other *AcceptChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  return true
}

func (p *AcceptChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - MinChatId
//  - MaxChatId
//  - ActiveOnly
//  - MessageBoxCountLimit
//  - WithUnreadCount
//  - LastMessagesPerMessageBoxCount
//  - UnreadOnly
type MessageBoxListRequest struct {
  MinChatId string `thrift:"minChatId,1" db:"minChatId" json:"minChatId"`
  MaxChatId string `thrift:"maxChatId,2" db:"maxChatId" json:"maxChatId"`
  ActiveOnly bool `thrift:"activeOnly,3" db:"activeOnly" json:"activeOnly"`
  MessageBoxCountLimit int32 `thrift:"messageBoxCountLimit,4" db:"messageBoxCountLimit" json:"messageBoxCountLimit"`
  WithUnreadCount bool `thrift:"withUnreadCount,5" db:"withUnreadCount" json:"withUnreadCount"`
  LastMessagesPerMessageBoxCount int32 `thrift:"lastMessagesPerMessageBoxCount,6" db:"lastMessagesPerMessageBoxCount" json:"lastMessagesPerMessageBoxCount"`
  UnreadOnly bool `thrift:"unreadOnly,7" db:"unreadOnly" json:"unreadOnly"`
}

func NewMessageBoxListRequest() *MessageBoxListRequest {
  return &MessageBoxListRequest{}
}


func (p *MessageBoxListRequest) GetMinChatId() string {
  return p.MinChatId
}

func (p *MessageBoxListRequest) GetMaxChatId() string {
  return p.MaxChatId
}

func (p *MessageBoxListRequest) GetActiveOnly() bool {
  return p.ActiveOnly
}

func (p *MessageBoxListRequest) GetMessageBoxCountLimit() int32 {
  return p.MessageBoxCountLimit
}

func (p *MessageBoxListRequest) GetWithUnreadCount() bool {
  return p.WithUnreadCount
}

func (p *MessageBoxListRequest) GetLastMessagesPerMessageBoxCount() int32 {
  return p.LastMessagesPerMessageBoxCount
}

func (p *MessageBoxListRequest) GetUnreadOnly() bool {
  return p.UnreadOnly
}
func (p *MessageBoxListRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBoxListRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MinChatId = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxChatId = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ActiveOnly = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MessageBoxCountLimit = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WithUnreadCount = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastMessagesPerMessageBoxCount = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UnreadOnly = v
}
  return nil
}

func (p *MessageBoxListRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MessageBoxListRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBoxListRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minChatId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minChatId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MinChatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minChatId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minChatId: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxChatId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxChatId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MaxChatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxChatId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxChatId: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "activeOnly", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activeOnly: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ActiveOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.activeOnly (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activeOnly: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageBoxCountLimit", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:messageBoxCountLimit: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessageBoxCountLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageBoxCountLimit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:messageBoxCountLimit: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withUnreadCount", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withUnreadCount: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithUnreadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withUnreadCount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withUnreadCount: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessagesPerMessageBoxCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessagesPerMessageBoxCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LastMessagesPerMessageBoxCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessagesPerMessageBoxCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessagesPerMessageBoxCount: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unreadOnly", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:unreadOnly: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UnreadOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unreadOnly (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:unreadOnly: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) Equals(other *MessageBoxListRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MinChatId != other.MinChatId { return false }
  if p.MaxChatId != other.MaxChatId { return false }
  if p.ActiveOnly != other.ActiveOnly { return false }
  if p.MessageBoxCountLimit != other.MessageBoxCountLimit { return false }
  if p.WithUnreadCount != other.WithUnreadCount { return false }
  if p.LastMessagesPerMessageBoxCount != other.LastMessagesPerMessageBoxCount { return false }
  if p.UnreadOnly != other.UnreadOnly { return false }
  return true
}

func (p *MessageBoxListRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBoxListRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Chat
//  - UpdatedAttribute
type UpdateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Chat *Chat `thrift:"chat,2" db:"chat" json:"chat"`
  UpdatedAttribute UpdatedAttribute `thrift:"updatedAttribute,3" db:"updatedAttribute" json:"updatedAttribute"`
}

func NewUpdateChatRequest() *UpdateChatRequest {
  return &UpdateChatRequest{}
}


func (p *UpdateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}
var UpdateChatRequest_Chat_DEFAULT *Chat
func (p *UpdateChatRequest) GetChat() *Chat {
  if !p.IsSetChat() {
    return UpdateChatRequest_Chat_DEFAULT
  }
return p.Chat
}

func (p *UpdateChatRequest) GetUpdatedAttribute() UpdatedAttribute {
  return p.UpdatedAttribute
}
func (p *UpdateChatRequest) IsSetChat() bool {
  return p.Chat != nil
}

func (p *UpdateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *UpdateChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UpdatedAttribute(v)
  p.UpdatedAttribute = temp
}
  return nil
}

func (p *UpdateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedAttribute", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttribute: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UpdatedAttribute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAttribute (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttribute: ", p), err) }
  return err
}

func (p *UpdateChatRequest) Equals(other *UpdateChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if !p.Chat.Equals(other.Chat) { return false }
  if p.UpdatedAttribute != other.UpdatedAttribute { return false }
  return true
}

func (p *UpdateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
type ReissueChatTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
}

func NewReissueChatTicketRequest() *ReissueChatTicketRequest {
  return &ReissueChatTicketRequest{}
}


func (p *ReissueChatTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *ReissueChatTicketRequest) GetGroupMid() string {
  return p.GroupMid
}
func (p *ReissueChatTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *ReissueChatTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) Equals(other *ReissueChatTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.GroupMid != other.GroupMid { return false }
  return true
}

func (p *ReissueChatTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketRequest(%+v)", *p)
}

// Attributes:
//  - WithMemberChats
//  - WithInvitedChats
type GetAllChatMidsRequest struct {
  WithMemberChats bool `thrift:"withMemberChats,1" db:"withMemberChats" json:"withMemberChats"`
  WithInvitedChats bool `thrift:"withInvitedChats,2" db:"withInvitedChats" json:"withInvitedChats"`
}

func NewGetAllChatMidsRequest() *GetAllChatMidsRequest {
  return &GetAllChatMidsRequest{}
}


func (p *GetAllChatMidsRequest) GetWithMemberChats() bool {
  return p.WithMemberChats
}

func (p *GetAllChatMidsRequest) GetWithInvitedChats() bool {
  return p.WithInvitedChats
}
func (p *GetAllChatMidsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WithMemberChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithInvitedChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withMemberChats", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:withMemberChats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithMemberChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMemberChats (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:withMemberChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withInvitedChats", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withInvitedChats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithInvitedChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitedChats (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withInvitedChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) Equals(other *GetAllChatMidsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.WithMemberChats != other.WithMemberChats { return false }
  if p.WithInvitedChats != other.WithInvitedChats { return false }
  return true
}

func (p *GetAllChatMidsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type RejectChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewRejectChatInvitationRequest() *RejectChatInvitationRequest {
  return &RejectChatInvitationRequest{}
}


func (p *RejectChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *RejectChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *RejectChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *RejectChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) Equals(other *RejectChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  return true
}

func (p *RejectChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Name
//  - TargetUserMids
//  - PicturePath
type CreateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type ChatType `thrift:"type,2" db:"type" json:"type"`
  Name int32 `thrift:"name,3" db:"name" json:"name"`
  TargetUserMids []string `thrift:"targetUserMids,4" db:"targetUserMids" json:"targetUserMids"`
  PicturePath string `thrift:"picturePath,5" db:"picturePath" json:"picturePath"`
}

func NewCreateChatRequest() *CreateChatRequest {
  return &CreateChatRequest{}
}


func (p *CreateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CreateChatRequest) GetType() ChatType {
  return p.Type
}

func (p *CreateChatRequest) GetName() int32 {
  return p.Name
}

func (p *CreateChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}

func (p *CreateChatRequest) GetPicturePath() string {
  return p.PicturePath
}
func (p *CreateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *CreateChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem65 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem65 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem65)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *CreateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetUserMids: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:picturePath: ", p), err) }
  return err
}

func (p *CreateChatRequest) Equals(other *CreateChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src66 := other.TargetUserMids[i]
    if _tgt != _src66 { return false }
  }
  if p.PicturePath != other.PicturePath { return false }
  return true
}

func (p *CreateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatRequest(%+v)", *p)
}

// Attributes:
//  - DeviceName
//  - SystemName
//  - SystemVersion
//  - Model
//  - WebViewVersion
//  - CarrierCode
//  - CarrierName
//  - ApplicationType
type DeviceInfo struct {
  DeviceName string `thrift:"deviceName,1" db:"deviceName" json:"deviceName"`
  SystemName string `thrift:"systemName,2" db:"systemName" json:"systemName"`
  SystemVersion string `thrift:"systemVersion,3" db:"systemVersion" json:"systemVersion"`
  Model string `thrift:"model,4" db:"model" json:"model"`
  WebViewVersion string `thrift:"webViewVersion,5" db:"webViewVersion" json:"webViewVersion"`
  // unused fields # 6 to 9
  CarrierCode Carrier `thrift:"carrierCode,10" db:"carrierCode" json:"carrierCode"`
  CarrierName string `thrift:"carrierName,11" db:"carrierName" json:"carrierName"`
  // unused fields # 12 to 19
  ApplicationType ApplicationType `thrift:"applicationType,20" db:"applicationType" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
  return &DeviceInfo{}
}


func (p *DeviceInfo) GetDeviceName() string {
  return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
  return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
  return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
  return p.Model
}

func (p *DeviceInfo) GetWebViewVersion() string {
  return p.WebViewVersion
}

func (p *DeviceInfo) GetCarrierCode() Carrier {
  return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
  return p.CarrierName
}

func (p *DeviceInfo) GetApplicationType() ApplicationType {
  return p.ApplicationType
}
func (p *DeviceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemVersion = v
}
  return nil
}

func (p *DeviceInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Model = v
}
  return nil
}

func (p *DeviceInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WebViewVersion = v
}
  return nil
}

func (p *DeviceInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Carrier(v)
  p.CarrierCode = temp
}
  return nil
}

func (p *DeviceInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CarrierName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := ApplicationType(v)
  p.ApplicationType = temp
}
  return nil
}

func (p *DeviceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeviceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemVersion", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "model", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Model)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webViewVersion", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webViewVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WebViewVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.webViewVersion (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webViewVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierCode", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:carrierCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:carrierCode: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrierName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CarrierName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrierName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationType", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:applicationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ApplicationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationType (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:applicationType: ", p), err) }
  return err
}

func (p *DeviceInfo) Equals(other *DeviceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DeviceName != other.DeviceName { return false }
  if p.SystemName != other.SystemName { return false }
  if p.SystemVersion != other.SystemVersion { return false }
  if p.Model != other.Model { return false }
  if p.WebViewVersion != other.WebViewVersion { return false }
  if p.CarrierCode != other.CarrierCode { return false }
  if p.CarrierName != other.CarrierName { return false }
  if p.ApplicationType != other.ApplicationType { return false }
  return true
}

func (p *DeviceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

// Attributes:
//  - PhoneNumber
//  - CountryCode
type SIMInfo struct {
  PhoneNumber string `thrift:"phoneNumber,1" db:"phoneNumber" json:"phoneNumber"`
  CountryCode string `thrift:"countryCode,2" db:"countryCode" json:"countryCode"`
}

func NewSIMInfo() *SIMInfo {
  return &SIMInfo{}
}


func (p *SIMInfo) GetPhoneNumber() string {
  return p.PhoneNumber
}

func (p *SIMInfo) GetCountryCode() string {
  return p.CountryCode
}
func (p *SIMInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SIMInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumber = v
}
  return nil
}

func (p *SIMInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *SIMInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SIMInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SIMInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumber", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumber: ", p), err) }
  return err
}

func (p *SIMInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryCode: ", p), err) }
  return err
}

func (p *SIMInfo) Equals(other *SIMInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PhoneNumber != other.PhoneNumber { return false }
  if p.CountryCode != other.CountryCode { return false }
  return true
}

func (p *SIMInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SIMInfo(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
//  - Callback
//  - NormalizedPhone
//  - CountryCode
//  - NationalSignificantNumber
//  - AvailableVerificationMethods
//  - CallerIdMask
type VerificationSessionData struct {
  SessionId string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Method VerificationSessionDataMethod `thrift:"method,2" db:"method" json:"method"`
  Callback string `thrift:"callback,3" db:"callback" json:"callback"`
  NormalizedPhone string `thrift:"normalizedPhone,4" db:"normalizedPhone" json:"normalizedPhone"`
  CountryCode string `thrift:"countryCode,5" db:"countryCode" json:"countryCode"`
  NationalSignificantNumber string `thrift:"nationalSignificantNumber,6" db:"nationalSignificantNumber" json:"nationalSignificantNumber"`
  AvailableVerificationMethods []Y30 `thrift:"availableVerificationMethods,7" db:"availableVerificationMethods" json:"availableVerificationMethods"`
  CallerIdMask string `thrift:"callerIdMask,8" db:"callerIdMask" json:"callerIdMask"`
}

func NewVerificationSessionData() *VerificationSessionData {
  return &VerificationSessionData{}
}


func (p *VerificationSessionData) GetSessionId() string {
  return p.SessionId
}

func (p *VerificationSessionData) GetMethod() VerificationSessionDataMethod {
  return p.Method
}

func (p *VerificationSessionData) GetCallback() string {
  return p.Callback
}

func (p *VerificationSessionData) GetNormalizedPhone() string {
  return p.NormalizedPhone
}

func (p *VerificationSessionData) GetCountryCode() string {
  return p.CountryCode
}

func (p *VerificationSessionData) GetNationalSignificantNumber() string {
  return p.NationalSignificantNumber
}

func (p *VerificationSessionData) GetAvailableVerificationMethods() []Y30 {
  return p.AvailableVerificationMethods
}

func (p *VerificationSessionData) GetCallerIdMask() string {
  return p.CallerIdMask
}
func (p *VerificationSessionData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VerificationSessionDataMethod(v)
  p.Method = temp
}
  return nil
}

func (p *VerificationSessionData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Callback = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NormalizedPhone = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NationalSignificantNumber = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Y30, 0, size)
  p.AvailableVerificationMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem67 Y30
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Y30(v)
    _elem67 = temp
}
    p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem67)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CallerIdMask = v
}
  return nil
}

func (p *VerificationSessionData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerificationSessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerificationSessionData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callback", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callback: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Callback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callback (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callback: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "normalizedPhone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:normalizedPhone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NormalizedPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.normalizedPhone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:normalizedPhone: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:countryCode: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nationalSignificantNumber", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nationalSignificantNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NationalSignificantNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nationalSignificantNumber (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nationalSignificantNumber: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "availableVerificationMethods", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:availableVerificationMethods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableVerificationMethods {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:availableVerificationMethods: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callerIdMask", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:callerIdMask: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CallerIdMask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callerIdMask (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:callerIdMask: ", p), err) }
  return err
}

func (p *VerificationSessionData) Equals(other *VerificationSessionData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SessionId != other.SessionId { return false }
  if p.Method != other.Method { return false }
  if p.Callback != other.Callback { return false }
  if p.NormalizedPhone != other.NormalizedPhone { return false }
  if p.CountryCode != other.CountryCode { return false }
  if p.NationalSignificantNumber != other.NationalSignificantNumber { return false }
  if len(p.AvailableVerificationMethods) != len(other.AvailableVerificationMethods) { return false }
  for i, _tgt := range p.AvailableVerificationMethods {
    _src68 := other.AvailableVerificationMethods[i]
    if _tgt != _src68 { return false }
  }
  if p.CallerIdMask != other.CallerIdMask { return false }
  return true
}

func (p *VerificationSessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerificationSessionData(%+v)", *p)
}

// Attributes:
//  - WrappedNonce
//  - KdfParameter1
//  - KdfParameter2
type GetEncryptedIdentityV3Response struct {
  WrappedNonce []byte `thrift:"wrappedNonce,1" db:"wrappedNonce" json:"wrappedNonce"`
  KdfParameter1 []byte `thrift:"kdfParameter1,2" db:"kdfParameter1" json:"kdfParameter1"`
  KdfParameter2 []byte `thrift:"kdfParameter2,3" db:"kdfParameter2" json:"kdfParameter2"`
}

func NewGetEncryptedIdentityV3Response() *GetEncryptedIdentityV3Response {
  return &GetEncryptedIdentityV3Response{}
}


func (p *GetEncryptedIdentityV3Response) GetWrappedNonce() []byte {
  return p.WrappedNonce
}

func (p *GetEncryptedIdentityV3Response) GetKdfParameter1() []byte {
  return p.KdfParameter1
}

func (p *GetEncryptedIdentityV3Response) GetKdfParameter2() []byte {
  return p.KdfParameter2
}
func (p *GetEncryptedIdentityV3Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEncryptedIdentityV3Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WrappedNonce = v
}
  return nil
}

func (p *GetEncryptedIdentityV3Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KdfParameter1 = v
}
  return nil
}

func (p *GetEncryptedIdentityV3Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KdfParameter2 = v
}
  return nil
}

func (p *GetEncryptedIdentityV3Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetEncryptedIdentityV3Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEncryptedIdentityV3Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "wrappedNonce", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wrappedNonce: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.WrappedNonce); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wrappedNonce (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wrappedNonce: ", p), err) }
  return err
}

func (p *GetEncryptedIdentityV3Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kdfParameter1", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kdfParameter1: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.KdfParameter1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kdfParameter1 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kdfParameter1: ", p), err) }
  return err
}

func (p *GetEncryptedIdentityV3Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kdfParameter2", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kdfParameter2: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.KdfParameter2); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kdfParameter2 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kdfParameter2: ", p), err) }
  return err
}

func (p *GetEncryptedIdentityV3Response) Equals(other *GetEncryptedIdentityV3Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.WrappedNonce, other.WrappedNonce) != 0 { return false }
  if bytes.Compare(p.KdfParameter1, other.KdfParameter1) != 0 { return false }
  if bytes.Compare(p.KdfParameter2, other.KdfParameter2) != 0 { return false }
  return true
}

func (p *GetEncryptedIdentityV3Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEncryptedIdentityV3Response(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - GroupKeyId
//  - Creator
//  - CreatorKeyId
//  - Receiver
//  - ReceiverKeyId
//  - EncryptedSharedKey
//  - AllowedTypes
//  - SpecVersion
type E2EEGroupSharedKey struct {
  KeyVersion int32 `thrift:"keyVersion,1" db:"keyVersion" json:"keyVersion"`
  GroupKeyId int32 `thrift:"groupKeyId,2" db:"groupKeyId" json:"groupKeyId"`
  Creator string `thrift:"creator,3" db:"creator" json:"creator"`
  CreatorKeyId int32 `thrift:"creatorKeyId,4" db:"creatorKeyId" json:"creatorKeyId"`
  Receiver string `thrift:"receiver,5" db:"receiver" json:"receiver"`
  ReceiverKeyId int32 `thrift:"receiverKeyId,6" db:"receiverKeyId" json:"receiverKeyId"`
  EncryptedSharedKey []byte `thrift:"encryptedSharedKey,7" db:"encryptedSharedKey" json:"encryptedSharedKey"`
  AllowedTypes []C61914vb `thrift:"allowedTypes,8" db:"allowedTypes" json:"allowedTypes"`
  SpecVersion int32 `thrift:"specVersion,9" db:"specVersion" json:"specVersion"`
}

func NewE2EEGroupSharedKey() *E2EEGroupSharedKey {
  return &E2EEGroupSharedKey{}
}


func (p *E2EEGroupSharedKey) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *E2EEGroupSharedKey) GetGroupKeyId() int32 {
  return p.GroupKeyId
}

func (p *E2EEGroupSharedKey) GetCreator() string {
  return p.Creator
}

func (p *E2EEGroupSharedKey) GetCreatorKeyId() int32 {
  return p.CreatorKeyId
}

func (p *E2EEGroupSharedKey) GetReceiver() string {
  return p.Receiver
}

func (p *E2EEGroupSharedKey) GetReceiverKeyId() int32 {
  return p.ReceiverKeyId
}

func (p *E2EEGroupSharedKey) GetEncryptedSharedKey() []byte {
  return p.EncryptedSharedKey
}

func (p *E2EEGroupSharedKey) GetAllowedTypes() []C61914vb {
  return p.AllowedTypes
}

func (p *E2EEGroupSharedKey) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EEGroupSharedKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Receiver = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReceiverKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EncryptedSharedKey = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C61914vb, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem69 C61914vb
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C61914vb(v)
    _elem69 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem69)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EEGroupSharedKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEGroupSharedKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupKeyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creator: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creator: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreatorKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiver", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Receiver)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiverKeyId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:receiverKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReceiverKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiverKeyId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:receiverKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedSharedKey", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:encryptedSharedKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EncryptedSharedKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedSharedKey (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:encryptedSharedKey: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowedTypes", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if func(tgt, src C61914vb) bool {
        if tgt != src { return false }
        return true
      }(p.AllowedTypes[i], p.AllowedTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:allowedTypes: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "specVersion", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:specVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:specVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) Equals(other *E2EEGroupSharedKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.KeyVersion != other.KeyVersion { return false }
  if p.GroupKeyId != other.GroupKeyId { return false }
  if p.Creator != other.Creator { return false }
  if p.CreatorKeyId != other.CreatorKeyId { return false }
  if p.Receiver != other.Receiver { return false }
  if p.ReceiverKeyId != other.ReceiverKeyId { return false }
  if bytes.Compare(p.EncryptedSharedKey, other.EncryptedSharedKey) != 0 { return false }
  if len(p.AllowedTypes) != len(other.AllowedTypes) { return false }
  for i, _tgt := range p.AllowedTypes {
    _src70 := other.AllowedTypes[i]
    if _tgt != _src70 { return false }
  }
  if p.SpecVersion != other.SpecVersion { return false }
  return true
}

func (p *E2EEGroupSharedKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEGroupSharedKey(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type Ticket struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  // unused fields # 2 to 9
  ExpirationTime int64 `thrift:"expirationTime,10" db:"expirationTime" json:"expirationTime"`
  // unused fields # 11 to 20
  MaxUseCount int32 `thrift:"maxUseCount,21" db:"maxUseCount" json:"maxUseCount"`
}

func NewTicket() *Ticket {
  return &Ticket{}
}


func (p *Ticket) GetID() string {
  return p.ID
}

func (p *Ticket) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *Ticket) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ticket)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Ticket)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *Ticket)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *Ticket) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ticket"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ticket) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Ticket) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:expirationTime: ", p), err) }
  return err
}

func (p *Ticket) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxUseCount", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:maxUseCount: ", p), err) }
  return err
}

func (p *Ticket) Equals(other *Ticket) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.ExpirationTime != other.ExpirationTime { return false }
  if p.MaxUseCount != other.MaxUseCount { return false }
  return true
}

func (p *Ticket) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ticket(%+v)", *p)
}

// Attributes:
//  - Keynm
//  - Nvalue
//  - Evalue
//  - SessionKey
type RSAKey struct {
  Keynm string `thrift:"keynm,1" db:"keynm" json:"keynm"`
  Nvalue string `thrift:"nvalue,2" db:"nvalue" json:"nvalue"`
  Evalue string `thrift:"evalue,3" db:"evalue" json:"evalue"`
  SessionKey string `thrift:"sessionKey,4" db:"sessionKey" json:"sessionKey"`
}

func NewRSAKey() *RSAKey {
  return &RSAKey{}
}


func (p *RSAKey) GetKeynm() string {
  return p.Keynm
}

func (p *RSAKey) GetNvalue() string {
  return p.Nvalue
}

func (p *RSAKey) GetEvalue() string {
  return p.Evalue
}

func (p *RSAKey) GetSessionKey() string {
  return p.SessionKey
}
func (p *RSAKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RSAKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keynm = v
}
  return nil
}

func (p *RSAKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nvalue = v
}
  return nil
}

func (p *RSAKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Evalue = v
}
  return nil
}

func (p *RSAKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionKey = v
}
  return nil
}

func (p *RSAKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RSAKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RSAKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keynm", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keynm: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Keynm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keynm (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keynm: ", p), err) }
  return err
}

func (p *RSAKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nvalue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nvalue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Nvalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nvalue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nvalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "evalue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:evalue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Evalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.evalue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:evalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionKey", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionKey (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionKey: ", p), err) }
  return err
}

func (p *RSAKey) Equals(other *RSAKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Keynm != other.Keynm { return false }
  if p.Nvalue != other.Nvalue { return false }
  if p.Evalue != other.Evalue { return false }
  if p.SessionKey != other.SessionKey { return false }
  return true
}

func (p *RSAKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RSAKey(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - UserCreated
//  - RecommendEmailRegistration
type RegisterWithSnsIdResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  UserCreated bool `thrift:"userCreated,2" db:"userCreated" json:"userCreated"`
  RecommendEmailRegistration bool `thrift:"recommendEmailRegistration,3" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
}

func NewRegisterWithSnsIdResult_() *RegisterWithSnsIdResult_ {
  return &RegisterWithSnsIdResult_{}
}


func (p *RegisterWithSnsIdResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *RegisterWithSnsIdResult_) GetUserCreated() bool {
  return p.UserCreated
}

func (p *RegisterWithSnsIdResult_) GetRecommendEmailRegistration() bool {
  return p.RecommendEmailRegistration
}
func (p *RegisterWithSnsIdResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserCreated = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendEmailRegistration = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterWithSnsIdResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterWithSnsIdResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userCreated", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userCreated: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UserCreated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCreated (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userCreated: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendEmailRegistration", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendEmailRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendEmailRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendEmailRegistration: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) Equals(other *RegisterWithSnsIdResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  if p.UserCreated != other.UserCreated { return false }
  if p.RecommendEmailRegistration != other.RecommendEmailRegistration { return false }
  return true
}

func (p *RegisterWithSnsIdResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterWithSnsIdResult_(%+v)", *p)
}

// Attributes:
//  - UserExisting
//  - PhoneNumberRegistered
//  - SameDevice
//  - AccountMigrationCheckType
type SnsIdUserStatus struct {
  UserExisting bool `thrift:"userExisting,1" db:"userExisting" json:"userExisting"`
  PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,2" db:"phoneNumberRegistered" json:"phoneNumberRegistered"`
  SameDevice bool `thrift:"sameDevice,3" db:"sameDevice" json:"sameDevice"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,4" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
}

func NewSnsIdUserStatus() *SnsIdUserStatus {
  return &SnsIdUserStatus{}
}


func (p *SnsIdUserStatus) GetUserExisting() bool {
  return p.UserExisting
}

func (p *SnsIdUserStatus) GetPhoneNumberRegistered() bool {
  return p.PhoneNumberRegistered
}

func (p *SnsIdUserStatus) GetSameDevice() bool {
  return p.SameDevice
}

func (p *SnsIdUserStatus) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}
func (p *SnsIdUserStatus) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SnsIdUserStatus)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserExisting = v
}
  return nil
}

func (p *SnsIdUserStatus)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PhoneNumberRegistered = v
}
  return nil
}

func (p *SnsIdUserStatus)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SameDevice = v
}
  return nil
}

func (p *SnsIdUserStatus)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *SnsIdUserStatus) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SnsIdUserStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SnsIdUserStatus) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userExisting", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userExisting: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UserExisting)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userExisting (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userExisting: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberRegistered", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phoneNumberRegistered: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PhoneNumberRegistered)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phoneNumberRegistered: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sameDevice", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sameDevice: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SameDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sameDevice (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sameDevice: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationCheckType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) Equals(other *SnsIdUserStatus) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserExisting != other.UserExisting { return false }
  if p.PhoneNumberRegistered != other.PhoneNumberRegistered { return false }
  if p.SameDevice != other.SameDevice { return false }
  if p.AccountMigrationCheckType != other.AccountMigrationCheckType { return false }
  return true
}

func (p *SnsIdUserStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SnsIdUserStatus(%+v)", *p)
}

// Attributes:
//  - VerificationResult_
//  - AccountMigrationCheckType
//  - RecommendAddFriends
type PhoneVerificationResult_ struct {
  VerificationResult_ VerificationResult_ `thrift:"verificationResult,1" db:"verificationResult" json:"verificationResult"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,2" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
  RecommendAddFriends bool `thrift:"recommendAddFriends,3" db:"recommendAddFriends" json:"recommendAddFriends"`
}

func NewPhoneVerificationResult_() *PhoneVerificationResult_ {
  return &PhoneVerificationResult_{}
}


func (p *PhoneVerificationResult_) GetVerificationResult_() VerificationResult_ {
  return p.VerificationResult_
}

func (p *PhoneVerificationResult_) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}

func (p *PhoneVerificationResult_) GetRecommendAddFriends() bool {
  return p.RecommendAddFriends
}
func (p *PhoneVerificationResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneVerificationResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := VerificationResult_(v)
  p.VerificationResult_ = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendAddFriends = v
}
  return nil
}

func (p *PhoneVerificationResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PhoneVerificationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneVerificationResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verificationResult", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verificationResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VerificationResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verificationResult (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verificationResult: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationCheckType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendAddFriends", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendAddFriends: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendAddFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendAddFriends (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendAddFriends: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) Equals(other *PhoneVerificationResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.VerificationResult_ != other.VerificationResult_ { return false }
  if p.AccountMigrationCheckType != other.AccountMigrationCheckType { return false }
  if p.RecommendAddFriends != other.RecommendAddFriends { return false }
  return true
}

func (p *PhoneVerificationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneVerificationResult_(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Password
type IdentityCredential struct {
  Provider IdentityProvider `thrift:"provider,1" db:"provider" json:"provider"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewIdentityCredential() *IdentityCredential {
  return &IdentityCredential{}
}


func (p *IdentityCredential) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *IdentityCredential) GetIdentifier() string {
  return p.Identifier
}

func (p *IdentityCredential) GetPassword() string {
  return p.Password
}
func (p *IdentityCredential) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredential)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *IdentityCredential)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *IdentityCredential)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *IdentityCredential) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentityCredential"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredential) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err) }
  return err
}

func (p *IdentityCredential) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *IdentityCredential) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *IdentityCredential) Equals(other *IdentityCredential) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Provider != other.Provider { return false }
  if p.Identifier != other.Identifier { return false }
  if p.Password != other.Password { return false }
  return true
}

func (p *IdentityCredential) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredential(%+v)", *p)
}

// Attributes:
//  - Longitude
//  - Latitude
//  - Accuracy
//  - AltitudeMeters
//  - VelocityMetersPerSecond
//  - BearingDegrees
type Geolocation struct {
  Longitude float64 `thrift:"longitude,1" db:"longitude" json:"longitude"`
  Latitude float64 `thrift:"latitude,2" db:"latitude" json:"latitude"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,3" db:"accuracy" json:"accuracy"`
  AltitudeMeters float64 `thrift:"altitudeMeters,4" db:"altitudeMeters" json:"altitudeMeters"`
  VelocityMetersPerSecond float64 `thrift:"velocityMetersPerSecond,5" db:"velocityMetersPerSecond" json:"velocityMetersPerSecond"`
  BearingDegrees float64 `thrift:"bearingDegrees,6" db:"bearingDegrees" json:"bearingDegrees"`
}

func NewGeolocation() *Geolocation {
  return &Geolocation{}
}


func (p *Geolocation) GetLongitude() float64 {
  return p.Longitude
}

func (p *Geolocation) GetLatitude() float64 {
  return p.Latitude
}
var Geolocation_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Geolocation) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Geolocation_Accuracy_DEFAULT
  }
return p.Accuracy
}

func (p *Geolocation) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}

func (p *Geolocation) GetVelocityMetersPerSecond() float64 {
  return p.VelocityMetersPerSecond
}

func (p *Geolocation) GetBearingDegrees() float64 {
  return p.BearingDegrees
}
func (p *Geolocation) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Geolocation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Geolocation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Geolocation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Geolocation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Geolocation)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *Geolocation)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VelocityMetersPerSecond = v
}
  return nil
}

func (p *Geolocation)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BearingDegrees = v
}
  return nil
}

func (p *Geolocation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Geolocation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Geolocation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:longitude: ", p), err) }
  return err
}

func (p *Geolocation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err) }
  return err
}

func (p *Geolocation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accuracy: ", p), err) }
  return err
}

func (p *Geolocation) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "altitudeMeters", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:altitudeMeters: ", p), err) }
  return err
}

func (p *Geolocation) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "velocityMetersPerSecond", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:velocityMetersPerSecond: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.VelocityMetersPerSecond)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityMetersPerSecond (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:velocityMetersPerSecond: ", p), err) }
  return err
}

func (p *Geolocation) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bearingDegrees", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bearingDegrees: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.BearingDegrees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingDegrees (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bearingDegrees: ", p), err) }
  return err
}

func (p *Geolocation) Equals(other *Geolocation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Longitude != other.Longitude { return false }
  if p.Latitude != other.Latitude { return false }
  if !p.Accuracy.Equals(other.Accuracy) { return false }
  if p.AltitudeMeters != other.AltitudeMeters { return false }
  if p.VelocityMetersPerSecond != other.VelocityMetersPerSecond { return false }
  if p.BearingDegrees != other.BearingDegrees { return false }
  return true
}

func (p *Geolocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Geolocation(%+v)", *p)
}

// Attributes:
//  - NetworkType
type ClientNetworkStatus struct {
  NetworkType NetworkType `thrift:"networkType,1" db:"networkType" json:"networkType"`
}

func NewClientNetworkStatus() *ClientNetworkStatus {
  return &ClientNetworkStatus{}
}


func (p *ClientNetworkStatus) GetNetworkType() NetworkType {
  return p.NetworkType
}
func (p *ClientNetworkStatus) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientNetworkStatus)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NetworkType(v)
  p.NetworkType = temp
}
  return nil
}

func (p *ClientNetworkStatus) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClientNetworkStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientNetworkStatus) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:networkType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NetworkType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:networkType: ", p), err) }
  return err
}

func (p *ClientNetworkStatus) Equals(other *ClientNetworkStatus) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NetworkType != other.NetworkType { return false }
  return true
}

func (p *ClientNetworkStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientNetworkStatus(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code TalkExceptionCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() TalkExceptionCode {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TalkExceptionCode(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key71 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key71 = v
}
var _val72 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val72 = v
}
    p.ParameterMap[_key71] = _val72
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) Equals(other *TalkException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Reason != other.Reason { return false }
  if len(p.ParameterMap) != len(other.ParameterMap) { return false }
  for k, _tgt := range p.ParameterMap {
    _src73 := other.ParameterMap[k]
    if _tgt != _src73 { return false }
  }
  return true
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

func (TalkException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TalkException)(nil)

// Attributes:
//  - Type
//  - Luid
//  - Phones
//  - Emails
//  - Userids
//  - MobileContactName
//  - PhoneticName
type ContactModification struct {
  Type ContactModificationType `thrift:"type,1" db:"type" json:"type"`
  Luid string `thrift:"luid,2" db:"luid" json:"luid"`
  // unused fields # 3 to 10
  Phones []string `thrift:"phones,11" db:"phones" json:"phones"`
  Emails []string `thrift:"emails,12" db:"emails" json:"emails"`
  Userids []string `thrift:"userids,13" db:"userids" json:"userids"`
  MobileContactName string `thrift:"mobileContactName,14" db:"mobileContactName" json:"mobileContactName"`
  PhoneticName string `thrift:"phoneticName,15" db:"phoneticName" json:"phoneticName"`
}

func NewContactModification() *ContactModification {
  return &ContactModification{}
}


func (p *ContactModification) GetType() ContactModificationType {
  return p.Type
}

func (p *ContactModification) GetLuid() string {
  return p.Luid
}

func (p *ContactModification) GetPhones() []string {
  return p.Phones
}

func (p *ContactModification) GetEmails() []string {
  return p.Emails
}

func (p *ContactModification) GetUserids() []string {
  return p.Userids
}

func (p *ContactModification) GetMobileContactName() string {
  return p.MobileContactName
}

func (p *ContactModification) GetPhoneticName() string {
  return p.PhoneticName
}
func (p *ContactModification) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactModification)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ContactModificationType(v)
  p.Type = temp
}
  return nil
}

func (p *ContactModification)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactModification)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Phones =  tSlice
  for i := 0; i < size; i ++ {
var _elem74 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem74 = v
}
    p.Phones = append(p.Phones, _elem74)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Emails =  tSlice
  for i := 0; i < size; i ++ {
var _elem75 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem75 = v
}
    p.Emails = append(p.Emails, _elem75)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Userids =  tSlice
  for i := 0; i < size; i ++ {
var _elem76 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem76 = v
}
    p.Userids = append(p.Userids, _elem76)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.MobileContactName = v
}
  return nil
}

func (p *ContactModification)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *ContactModification) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContactModification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactModification) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ContactModification) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "luid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:luid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:luid: ", p), err) }
  return err
}

func (p *ContactModification) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phones", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:phones: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:phones: ", p), err) }
  return err
}

func (p *ContactModification) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "emails", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:emails: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Emails)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Emails {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:emails: ", p), err) }
  return err
}

func (p *ContactModification) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userids", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:userids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Userids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Userids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:userids: ", p), err) }
  return err
}

func (p *ContactModification) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mobileContactName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:mobileContactName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobileContactName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:mobileContactName: ", p), err) }
  return err
}

func (p *ContactModification) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:phoneticName: ", p), err) }
  return err
}

func (p *ContactModification) Equals(other *ContactModification) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Luid != other.Luid { return false }
  if len(p.Phones) != len(other.Phones) { return false }
  for i, _tgt := range p.Phones {
    _src77 := other.Phones[i]
    if _tgt != _src77 { return false }
  }
  if len(p.Emails) != len(other.Emails) { return false }
  for i, _tgt := range p.Emails {
    _src78 := other.Emails[i]
    if _tgt != _src78 { return false }
  }
  if len(p.Userids) != len(other.Userids) { return false }
  for i, _tgt := range p.Userids {
    _src79 := other.Userids[i]
    if _tgt != _src79 { return false }
  }
  if p.MobileContactName != other.MobileContactName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  return true
}

func (p *ContactModification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactModification(%+v)", *p)
}

// Attributes:
//  - Mid
//  - EMid
type FollowMid struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewFollowMid() *FollowMid {
  return &FollowMid{}
}


func (p *FollowMid) GetMid() string {
  return p.Mid
}

func (p *FollowMid) GetEMid() string {
  return p.EMid
}
func (p *FollowMid) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowMid)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FollowMid)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FollowMid) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowMid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowMid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *FollowMid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err) }
  return err
}

func (p *FollowMid) Equals(other *FollowMid) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.EMid != other.EMid { return false }
  return true
}

func (p *FollowMid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowMid(%+v)", *p)
}

// Attributes:
//  - FollowMid
type FollowRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewFollowRequest() *FollowRequest {
  return &FollowRequest{}
}

var FollowRequest_FollowMid_DEFAULT *FollowMid
func (p *FollowRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return FollowRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *FollowRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *FollowRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *FollowRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *FollowRequest) Equals(other *FollowRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  return true
}

func (p *FollowRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowRequest(%+v)", *p)
}

// Attributes:
//  - MessageId
//  - URL
//  - ChatMID
//  - OriginMID
type SendPostbackRequest struct {
  MessageId string `thrift:"messageId,1" db:"messageId" json:"messageId"`
  URL string `thrift:"url,2" db:"url" json:"url"`
  ChatMID string `thrift:"chatMID,3" db:"chatMID" json:"chatMID"`
  OriginMID string `thrift:"originMID,4" db:"originMID" json:"originMID"`
}

func NewSendPostbackRequest() *SendPostbackRequest {
  return &SendPostbackRequest{}
}


func (p *SendPostbackRequest) GetMessageId() string {
  return p.MessageId
}

func (p *SendPostbackRequest) GetURL() string {
  return p.URL
}

func (p *SendPostbackRequest) GetChatMID() string {
  return p.ChatMID
}

func (p *SendPostbackRequest) GetOriginMID() string {
  return p.OriginMID
}
func (p *SendPostbackRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendPostbackRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *SendPostbackRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *SendPostbackRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMID = v
}
  return nil
}

func (p *SendPostbackRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OriginMID = v
}
  return nil
}

func (p *SendPostbackRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SendPostbackRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendPostbackRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageId: ", p), err) }
  return err
}

func (p *SendPostbackRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:url: ", p), err) }
  return err
}

func (p *SendPostbackRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMID: ", p), err) }
  return err
}

func (p *SendPostbackRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "originMID", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:originMID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OriginMID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originMID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:originMID: ", p), err) }
  return err
}

func (p *SendPostbackRequest) Equals(other *SendPostbackRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MessageId != other.MessageId { return false }
  if p.URL != other.URL { return false }
  if p.ChatMID != other.ChatMID { return false }
  if p.OriginMID != other.OriginMID { return false }
  return true
}

func (p *SendPostbackRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendPostbackRequest(%+v)", *p)
}

// Attributes:
//  - Mid
//  - MemberCount
//  - OnAir
//  - BusinessAccount
//  - Addable
//  - AcceptableContentTypes
//  - CapableMyhome
//  - FreePhoneCallable
//  - PhoneNumberToDial
//  - NeedPermissionApproval
//  - ChannelId
//  - ChannelProviderName
//  - IconType
//  - BotType
//  - ShowRichMenu
//  - RichMenuRevision
//  - OnAirLabel
//  - UseTheme
//  - ThemeId
//  - UseBar
//  - BarRevision
//  - UseBackground
//  - BackgroundId
//  - StatusBarEnabled
//  - StatusBarRevision
//  - SearchId
//  - OnAirVersion
//  - Blockable
type BuddyDetail struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  MemberCount int64 `thrift:"memberCount,2" db:"memberCount" json:"memberCount"`
  OnAir int64 `thrift:"onAir,3" db:"onAir" json:"onAir"`
  BusinessAccount bool `thrift:"businessAccount,4" db:"businessAccount" json:"businessAccount"`
  Addable bool `thrift:"addable,5" db:"addable" json:"addable"`
  AcceptableContentTypes []C61914vb `thrift:"acceptableContentTypes,6" db:"acceptableContentTypes" json:"acceptableContentTypes"`
  CapableMyhome bool `thrift:"capableMyhome,7" db:"capableMyhome" json:"capableMyhome"`
  FreePhoneCallable bool `thrift:"freePhoneCallable,8" db:"freePhoneCallable" json:"freePhoneCallable"`
  PhoneNumberToDial string `thrift:"phoneNumberToDial,9" db:"phoneNumberToDial" json:"phoneNumberToDial"`
  NeedPermissionApproval bool `thrift:"needPermissionApproval,10" db:"needPermissionApproval" json:"needPermissionApproval"`
  ChannelId bool `thrift:"channelId,11" db:"channelId" json:"channelId"`
  ChannelProviderName string `thrift:"channelProviderName,12" db:"channelProviderName" json:"channelProviderName"`
  IconType int32 `thrift:"iconType,13" db:"iconType" json:"iconType"`
  BotType BotType `thrift:"botType,14" db:"botType" json:"botType"`
  ShowRichMenu bool `thrift:"showRichMenu,15" db:"showRichMenu" json:"showRichMenu"`
  RichMenuRevision bool `thrift:"richMenuRevision,16" db:"richMenuRevision" json:"richMenuRevision"`
  OnAirLabel OnAirLabel `thrift:"onAirLabel,17" db:"onAirLabel" json:"onAirLabel"`
  UseTheme int32 `thrift:"useTheme,18" db:"useTheme" json:"useTheme"`
  ThemeId string `thrift:"themeId,19" db:"themeId" json:"themeId"`
  UseBar bool `thrift:"useBar,20" db:"useBar" json:"useBar"`
  BarRevision bool `thrift:"barRevision,21" db:"barRevision" json:"barRevision"`
  UseBackground int64 `thrift:"useBackground,22" db:"useBackground" json:"useBackground"`
  BackgroundId string `thrift:"backgroundId,23" db:"backgroundId" json:"backgroundId"`
  StatusBarEnabled bool `thrift:"statusBarEnabled,24" db:"statusBarEnabled" json:"statusBarEnabled"`
  StatusBarRevision bool `thrift:"statusBarRevision,25" db:"statusBarRevision" json:"statusBarRevision"`
  SearchId string `thrift:"searchId,26" db:"searchId" json:"searchId"`
  OnAirVersion int32 `thrift:"onAirVersion,27" db:"onAirVersion" json:"onAirVersion"`
  Blockable bool `thrift:"blockable,28" db:"blockable" json:"blockable"`
}

func NewBuddyDetail() *BuddyDetail {
  return &BuddyDetail{}
}


func (p *BuddyDetail) GetMid() string {
  return p.Mid
}

func (p *BuddyDetail) GetMemberCount() int64 {
  return p.MemberCount
}

func (p *BuddyDetail) GetOnAir() int64 {
  return p.OnAir
}

func (p *BuddyDetail) GetBusinessAccount() bool {
  return p.BusinessAccount
}

func (p *BuddyDetail) GetAddable() bool {
  return p.Addable
}

func (p *BuddyDetail) GetAcceptableContentTypes() []C61914vb {
  return p.AcceptableContentTypes
}

func (p *BuddyDetail) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *BuddyDetail) GetFreePhoneCallable() bool {
  return p.FreePhoneCallable
}

func (p *BuddyDetail) GetPhoneNumberToDial() string {
  return p.PhoneNumberToDial
}

func (p *BuddyDetail) GetNeedPermissionApproval() bool {
  return p.NeedPermissionApproval
}

func (p *BuddyDetail) GetChannelId() bool {
  return p.ChannelId
}

func (p *BuddyDetail) GetChannelProviderName() string {
  return p.ChannelProviderName
}

func (p *BuddyDetail) GetIconType() int32 {
  return p.IconType
}

func (p *BuddyDetail) GetBotType() BotType {
  return p.BotType
}

func (p *BuddyDetail) GetShowRichMenu() bool {
  return p.ShowRichMenu
}

func (p *BuddyDetail) GetRichMenuRevision() bool {
  return p.RichMenuRevision
}

func (p *BuddyDetail) GetOnAirLabel() OnAirLabel {
  return p.OnAirLabel
}

func (p *BuddyDetail) GetUseTheme() int32 {
  return p.UseTheme
}

func (p *BuddyDetail) GetThemeId() string {
  return p.ThemeId
}

func (p *BuddyDetail) GetUseBar() bool {
  return p.UseBar
}

func (p *BuddyDetail) GetBarRevision() bool {
  return p.BarRevision
}

func (p *BuddyDetail) GetUseBackground() int64 {
  return p.UseBackground
}

func (p *BuddyDetail) GetBackgroundId() string {
  return p.BackgroundId
}

func (p *BuddyDetail) GetStatusBarEnabled() bool {
  return p.StatusBarEnabled
}

func (p *BuddyDetail) GetStatusBarRevision() bool {
  return p.StatusBarRevision
}

func (p *BuddyDetail) GetSearchId() string {
  return p.SearchId
}

func (p *BuddyDetail) GetOnAirVersion() int32 {
  return p.OnAirVersion
}

func (p *BuddyDetail) GetBlockable() bool {
  return p.Blockable
}
func (p *BuddyDetail) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyDetail)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *BuddyDetail)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MemberCount = v
}
  return nil
}

func (p *BuddyDetail)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OnAir = v
}
  return nil
}

func (p *BuddyDetail)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BusinessAccount = v
}
  return nil
}

func (p *BuddyDetail)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Addable = v
}
  return nil
}

func (p *BuddyDetail)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C61914vb, 0, size)
  p.AcceptableContentTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem80 C61914vb
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C61914vb(v)
    _elem80 = temp
}
    p.AcceptableContentTypes = append(p.AcceptableContentTypes, _elem80)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BuddyDetail)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *BuddyDetail)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FreePhoneCallable = v
}
  return nil
}

func (p *BuddyDetail)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PhoneNumberToDial = v
}
  return nil
}

func (p *BuddyDetail)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NeedPermissionApproval = v
}
  return nil
}

func (p *BuddyDetail)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ChannelProviderName = v
}
  return nil
}

func (p *BuddyDetail)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *BuddyDetail)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := BotType(v)
  p.BotType = temp
}
  return nil
}

func (p *BuddyDetail)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ShowRichMenu = v
}
  return nil
}

func (p *BuddyDetail)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.RichMenuRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := OnAirLabel(v)
  p.OnAirLabel = temp
}
  return nil
}

func (p *BuddyDetail)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.UseTheme = v
}
  return nil
}

func (p *BuddyDetail)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ThemeId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.UseBar = v
}
  return nil
}

func (p *BuddyDetail)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.BarRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.UseBackground = v
}
  return nil
}

func (p *BuddyDetail)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.BackgroundId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusBarEnabled = v
}
  return nil
}

func (p *BuddyDetail)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.StatusBarRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.OnAirVersion = v
}
  return nil
}

func (p *BuddyDetail)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.Blockable = v
}
  return nil
}

func (p *BuddyDetail) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BuddyDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyDetail) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberCount", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MemberCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberCount: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onAir", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:onAir: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.OnAir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:onAir: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "businessAccount", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:businessAccount: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BusinessAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.businessAccount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:businessAccount: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addable", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:addable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Addable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addable (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:addable: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "acceptableContentTypes", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:acceptableContentTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AcceptableContentTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AcceptableContentTypes); i++ {
    for j := i+1; j<len(p.AcceptableContentTypes); j++ {
      if func(tgt, src C61914vb) bool {
        if tgt != src { return false }
        return true
      }(p.AcceptableContentTypes[i], p.AcceptableContentTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AcceptableContentTypes))
      }
    }
  }
  for _, v := range p.AcceptableContentTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:acceptableContentTypes: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableMyhome", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:capableMyhome: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "freePhoneCallable", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:freePhoneCallable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.FreePhoneCallable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freePhoneCallable (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:freePhoneCallable: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberToDial", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:phoneNumberToDial: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneNumberToDial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberToDial (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:phoneNumberToDial: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "needPermissionApproval", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:needPermissionApproval: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NeedPermissionApproval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.needPermissionApproval (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:needPermissionApproval: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:channelId: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:channelId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelProviderName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:channelProviderName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelProviderName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelProviderName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:channelProviderName: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconType", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:iconType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:iconType: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botType", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:botType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BotType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botType (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:botType: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "showRichMenu", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:showRichMenu: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ShowRichMenu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.showRichMenu (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:showRichMenu: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "richMenuRevision", thrift.BOOL, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:richMenuRevision: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RichMenuRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.richMenuRevision (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:richMenuRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onAirLabel", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:onAirLabel: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OnAirLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAirLabel (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:onAirLabel: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useTheme", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:useTheme: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UseTheme)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useTheme (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:useTheme: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "themeId", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:themeId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThemeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.themeId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:themeId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useBar", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:useBar: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UseBar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useBar (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:useBar: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "barRevision", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:barRevision: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BarRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.barRevision (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:barRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useBackground", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:useBackground: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UseBackground)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useBackground (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:useBackground: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "backgroundId", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:backgroundId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BackgroundId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.backgroundId (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:backgroundId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusBarEnabled", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusBarEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StatusBarEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusBarEnabled (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusBarEnabled: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusBarRevision", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:statusBarRevision: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StatusBarRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusBarRevision (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:statusBarRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:searchId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onAirVersion", thrift.I32, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:onAirVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OnAirVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAirVersion (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:onAirVersion: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "blockable", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:blockable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Blockable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockable (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:blockable: ", p), err) }
  return err
}

func (p *BuddyDetail) Equals(other *BuddyDetail) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.MemberCount != other.MemberCount { return false }
  if p.OnAir != other.OnAir { return false }
  if p.BusinessAccount != other.BusinessAccount { return false }
  if p.Addable != other.Addable { return false }
  if len(p.AcceptableContentTypes) != len(other.AcceptableContentTypes) { return false }
  for i, _tgt := range p.AcceptableContentTypes {
    _src81 := other.AcceptableContentTypes[i]
    if _tgt != _src81 { return false }
  }
  if p.CapableMyhome != other.CapableMyhome { return false }
  if p.FreePhoneCallable != other.FreePhoneCallable { return false }
  if p.PhoneNumberToDial != other.PhoneNumberToDial { return false }
  if p.NeedPermissionApproval != other.NeedPermissionApproval { return false }
  if p.ChannelId != other.ChannelId { return false }
  if p.ChannelProviderName != other.ChannelProviderName { return false }
  if p.IconType != other.IconType { return false }
  if p.BotType != other.BotType { return false }
  if p.ShowRichMenu != other.ShowRichMenu { return false }
  if p.RichMenuRevision != other.RichMenuRevision { return false }
  if p.OnAirLabel != other.OnAirLabel { return false }
  if p.UseTheme != other.UseTheme { return false }
  if p.ThemeId != other.ThemeId { return false }
  if p.UseBar != other.UseBar { return false }
  if p.BarRevision != other.BarRevision { return false }
  if p.UseBackground != other.UseBackground { return false }
  if p.BackgroundId != other.BackgroundId { return false }
  if p.StatusBarEnabled != other.StatusBarEnabled { return false }
  if p.StatusBarRevision != other.StatusBarRevision { return false }
  if p.SearchId != other.SearchId { return false }
  if p.OnAirVersion != other.OnAirVersion { return false }
  if p.Blockable != other.Blockable { return false }
  return true
}

func (p *BuddyDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyDetail(%+v)", *p)
}

// Attributes:
//  - Contact
//  - BuddyDetail
type ProximityMatchCandidateEntry struct {
  Contact *Contact `thrift:"contact,1" db:"contact" json:"contact"`
  // unused fields # 2 to 10
  BuddyDetail *BuddyDetail `thrift:"buddyDetail,11" db:"buddyDetail" json:"buddyDetail"`
}

func NewProximityMatchCandidateEntry() *ProximityMatchCandidateEntry {
  return &ProximityMatchCandidateEntry{}
}

var ProximityMatchCandidateEntry_Contact_DEFAULT *Contact
func (p *ProximityMatchCandidateEntry) GetContact() *Contact {
  if !p.IsSetContact() {
    return ProximityMatchCandidateEntry_Contact_DEFAULT
  }
return p.Contact
}
var ProximityMatchCandidateEntry_BuddyDetail_DEFAULT *BuddyDetail
func (p *ProximityMatchCandidateEntry) GetBuddyDetail() *BuddyDetail {
  if !p.IsSetBuddyDetail() {
    return ProximityMatchCandidateEntry_BuddyDetail_DEFAULT
  }
return p.BuddyDetail
}
func (p *ProximityMatchCandidateEntry) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ProximityMatchCandidateEntry) IsSetBuddyDetail() bool {
  return p.BuddyDetail != nil
}

func (p *ProximityMatchCandidateEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProximityMatchCandidateEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ProximityMatchCandidateEntry)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.BuddyDetail = &BuddyDetail{}
  if err := p.BuddyDetail.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BuddyDetail), err)
  }
  return nil
}

func (p *ProximityMatchCandidateEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProximityMatchCandidateEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProximityMatchCandidateEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contact", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err) }
  if err := p.Contact.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateEntry) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buddyDetail", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:buddyDetail: ", p), err) }
  if err := p.BuddyDetail.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BuddyDetail), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:buddyDetail: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateEntry) Equals(other *ProximityMatchCandidateEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Contact.Equals(other.Contact) { return false }
  if !p.BuddyDetail.Equals(other.BuddyDetail) { return false }
  return true
}

func (p *ProximityMatchCandidateEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProximityMatchCandidateEntry(%+v)", *p)
}

// Attributes:
//  - Users
//  - Buddies
//  - EndOfResult_
type ProximityMatchCandidateResult_ struct {
  Users []*ProximityMatchCandidateEntry `thrift:"users,1" db:"users" json:"users"`
  Buddies []*ProximityMatchCandidateEntry `thrift:"buddies,2" db:"buddies" json:"buddies"`
  // unused fields # 3 to 90
  EndOfResult_ bool `thrift:"endOfResult,91" db:"endOfResult" json:"endOfResult"`
}

func NewProximityMatchCandidateResult_() *ProximityMatchCandidateResult_ {
  return &ProximityMatchCandidateResult_{}
}


func (p *ProximityMatchCandidateResult_) GetUsers() []*ProximityMatchCandidateEntry {
  return p.Users
}

func (p *ProximityMatchCandidateResult_) GetBuddies() []*ProximityMatchCandidateEntry {
  return p.Buddies
}

func (p *ProximityMatchCandidateResult_) GetEndOfResult_() bool {
  return p.EndOfResult_
}
func (p *ProximityMatchCandidateResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProximityMatchCandidateResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProximityMatchCandidateEntry, 0, size)
  p.Users =  tSlice
  for i := 0; i < size; i ++ {
    _elem82 := &ProximityMatchCandidateEntry{}
    if err := _elem82.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem82), err)
    }
    p.Users = append(p.Users, _elem82)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProximityMatchCandidateResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProximityMatchCandidateEntry, 0, size)
  p.Buddies =  tSlice
  for i := 0; i < size; i ++ {
    _elem83 := &ProximityMatchCandidateEntry{}
    if err := _elem83.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
    }
    p.Buddies = append(p.Buddies, _elem83)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProximityMatchCandidateResult_)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.EndOfResult_ = v
}
  return nil
}

func (p *ProximityMatchCandidateResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProximityMatchCandidateResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProximityMatchCandidateResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "users", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:users: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Users)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Users {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:users: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buddies", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:buddies: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Buddies)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Buddies {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:buddies: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateResult_) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endOfResult", thrift.BOOL, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:endOfResult: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EndOfResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endOfResult (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:endOfResult: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateResult_) Equals(other *ProximityMatchCandidateResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Users) != len(other.Users) { return false }
  for i, _tgt := range p.Users {
    _src84 := other.Users[i]
    if !_tgt.Equals(_src84) { return false }
  }
  if len(p.Buddies) != len(other.Buddies) { return false }
  for i, _tgt := range p.Buddies {
    _src85 := other.Buddies[i]
    if !_tgt.Equals(_src85) { return false }
  }
  if p.EndOfResult_ != other.EndOfResult_ { return false }
  return true
}

func (p *ProximityMatchCandidateResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProximityMatchCandidateResult_(%+v)", *p)
}

// Attributes:
//  - PendingAgreements
type PendingAgreementsResponse struct {
  PendingAgreements []C59756ii `thrift:"pendingAgreements,1" db:"pendingAgreements" json:"pendingAgreements"`
}

func NewPendingAgreementsResponse() *PendingAgreementsResponse {
  return &PendingAgreementsResponse{}
}


func (p *PendingAgreementsResponse) GetPendingAgreements() []C59756ii {
  return p.PendingAgreements
}
func (p *PendingAgreementsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PendingAgreementsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]C59756ii, 0, size)
  p.PendingAgreements =  tSlice
  for i := 0; i < size; i ++ {
var _elem86 C59756ii
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59756ii(v)
    _elem86 = temp
}
    p.PendingAgreements = append(p.PendingAgreements, _elem86)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PendingAgreementsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PendingAgreementsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PendingAgreementsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pendingAgreements", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pendingAgreements: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.PendingAgreements)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PendingAgreements {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pendingAgreements: ", p), err) }
  return err
}

func (p *PendingAgreementsResponse) Equals(other *PendingAgreementsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PendingAgreements) != len(other.PendingAgreements) { return false }
  for i, _tgt := range p.PendingAgreements {
    _src87 := other.PendingAgreements[i]
    if _tgt != _src87 { return false }
  }
  return true
}

func (p *PendingAgreementsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PendingAgreementsResponse(%+v)", *p)
}

// Attributes:
//  - PushTrackingId
//  - RecvTimestamp
//  - Battery
//  - BatteryMode
//  - ClientNetworkType
//  - CarrierCode
//  - DisplayTimestamp
type PushRecvReport struct {
  PushTrackingId string `thrift:"pushTrackingId,1" db:"pushTrackingId" json:"pushTrackingId"`
  RecvTimestamp int64 `thrift:"recvTimestamp,2" db:"recvTimestamp" json:"recvTimestamp"`
  Battery int64 `thrift:"battery,3" db:"battery" json:"battery"`
  BatteryMode BatteryMode `thrift:"batteryMode,4" db:"batteryMode" json:"batteryMode"`
  ClientNetworkType NetworkType `thrift:"clientNetworkType,5" db:"clientNetworkType" json:"clientNetworkType"`
  CarrierCode string `thrift:"carrierCode,6" db:"carrierCode" json:"carrierCode"`
  DisplayTimestamp int64 `thrift:"displayTimestamp,7" db:"displayTimestamp" json:"displayTimestamp"`
}

func NewPushRecvReport() *PushRecvReport {
  return &PushRecvReport{}
}


func (p *PushRecvReport) GetPushTrackingId() string {
  return p.PushTrackingId
}

func (p *PushRecvReport) GetRecvTimestamp() int64 {
  return p.RecvTimestamp
}

func (p *PushRecvReport) GetBattery() int64 {
  return p.Battery
}

func (p *PushRecvReport) GetBatteryMode() BatteryMode {
  return p.BatteryMode
}

func (p *PushRecvReport) GetClientNetworkType() NetworkType {
  return p.ClientNetworkType
}

func (p *PushRecvReport) GetCarrierCode() string {
  return p.CarrierCode
}

func (p *PushRecvReport) GetDisplayTimestamp() int64 {
  return p.DisplayTimestamp
}
func (p *PushRecvReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PushRecvReport)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PushTrackingId = v
}
  return nil
}

func (p *PushRecvReport)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecvTimestamp = v
}
  return nil
}

func (p *PushRecvReport)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Battery = v
}
  return nil
}

func (p *PushRecvReport)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := BatteryMode(v)
  p.BatteryMode = temp
}
  return nil
}

func (p *PushRecvReport)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := NetworkType(v)
  p.ClientNetworkType = temp
}
  return nil
}

func (p *PushRecvReport)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CarrierCode = v
}
  return nil
}

func (p *PushRecvReport)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DisplayTimestamp = v
}
  return nil
}

func (p *PushRecvReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PushRecvReport"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PushRecvReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pushTrackingId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pushTrackingId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PushTrackingId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pushTrackingId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pushTrackingId: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recvTimestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recvTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RecvTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recvTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recvTimestamp: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "battery", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:battery: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Battery)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.battery (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:battery: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "batteryMode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:batteryMode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BatteryMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.batteryMode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:batteryMode: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clientNetworkType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clientNetworkType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ClientNetworkType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientNetworkType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clientNetworkType: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierCode", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrierCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrierCode: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayTimestamp", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DisplayTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayTimestamp (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayTimestamp: ", p), err) }
  return err
}

func (p *PushRecvReport) Equals(other *PushRecvReport) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PushTrackingId != other.PushTrackingId { return false }
  if p.RecvTimestamp != other.RecvTimestamp { return false }
  if p.Battery != other.Battery { return false }
  if p.BatteryMode != other.BatteryMode { return false }
  if p.ClientNetworkType != other.ClientNetworkType { return false }
  if p.CarrierCode != other.CarrierCode { return false }
  if p.DisplayTimestamp != other.DisplayTimestamp { return false }
  return true
}

func (p *PushRecvReport) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PushRecvReport(%+v)", *p)
}

// Attributes:
//  - FollowMid
type RemoveFollowerRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewRemoveFollowerRequest() *RemoveFollowerRequest {
  return &RemoveFollowerRequest{}
}

var RemoveFollowerRequest_FollowMid_DEFAULT *FollowMid
func (p *RemoveFollowerRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return RemoveFollowerRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *RemoveFollowerRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *RemoveFollowerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveFollowerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *RemoveFollowerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveFollowerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveFollowerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *RemoveFollowerRequest) Equals(other *RemoveFollowerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  return true
}

func (p *RemoveFollowerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveFollowerRequest(%+v)", *p)
}

// Attributes:
//  - UUID
//  - TrackId
//  - Title
//  - Oid
//  - Tids
//  - Sid
//  - Artist
//  - ChannelId
type RingbackTone struct {
  UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
  TrackId string `thrift:"trackId,2" db:"trackId" json:"trackId"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Oid string `thrift:"oid,4" db:"oid" json:"oid"`
  Tids map[string]string `thrift:"tids,5" db:"tids" json:"tids"`
  Sid string `thrift:"sid,6" db:"sid" json:"sid"`
  Artist string `thrift:"artist,7" db:"artist" json:"artist"`
  ChannelId string `thrift:"channelId,8" db:"channelId" json:"channelId"`
}

func NewRingbackTone() *RingbackTone {
  return &RingbackTone{}
}


func (p *RingbackTone) GetUUID() string {
  return p.UUID
}

func (p *RingbackTone) GetTrackId() string {
  return p.TrackId
}

func (p *RingbackTone) GetTitle() string {
  return p.Title
}

func (p *RingbackTone) GetOid() string {
  return p.Oid
}

func (p *RingbackTone) GetTids() map[string]string {
  return p.Tids
}

func (p *RingbackTone) GetSid() string {
  return p.Sid
}

func (p *RingbackTone) GetArtist() string {
  return p.Artist
}

func (p *RingbackTone) GetChannelId() string {
  return p.ChannelId
}
func (p *RingbackTone) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RingbackTone)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *RingbackTone)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TrackId = v
}
  return nil
}

func (p *RingbackTone)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *RingbackTone)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *RingbackTone)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Tids =  tMap
  for i := 0; i < size; i ++ {
var _key88 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key88 = v
}
var _val89 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val89 = v
}
    p.Tids[_key88] = _val89
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RingbackTone)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *RingbackTone)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Artist = v
}
  return nil
}

func (p *RingbackTone)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *RingbackTone) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RingbackTone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RingbackTone) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uuid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *RingbackTone) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trackId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trackId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TrackId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trackId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trackId: ", p), err) }
  return err
}

func (p *RingbackTone) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *RingbackTone) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:oid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:oid: ", p), err) }
  return err
}

func (p *RingbackTone) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tids", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Tids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Tids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tids: ", p), err) }
  return err
}

func (p *RingbackTone) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sid", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sid: ", p), err) }
  return err
}

func (p *RingbackTone) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "artist", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:artist: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Artist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.artist (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:artist: ", p), err) }
  return err
}

func (p *RingbackTone) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:channelId: ", p), err) }
  return err
}

func (p *RingbackTone) Equals(other *RingbackTone) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UUID != other.UUID { return false }
  if p.TrackId != other.TrackId { return false }
  if p.Title != other.Title { return false }
  if p.Oid != other.Oid { return false }
  if len(p.Tids) != len(other.Tids) { return false }
  for k, _tgt := range p.Tids {
    _src90 := other.Tids[k]
    if _tgt != _src90 { return false }
  }
  if p.Sid != other.Sid { return false }
  if p.Artist != other.Artist { return false }
  if p.ChannelId != other.ChannelId { return false }
  return true
}

func (p *RingbackTone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RingbackTone(%+v)", *p)
}

// Attributes:
//  - FollowMid
type UnfollowRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewUnfollowRequest() *UnfollowRequest {
  return &UnfollowRequest{}
}

var UnfollowRequest_FollowMid_DEFAULT *FollowMid
func (p *UnfollowRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return UnfollowRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *UnfollowRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *UnfollowRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnfollowRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *UnfollowRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnfollowRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnfollowRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *UnfollowRequest) Equals(other *UnfollowRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  return true
}

func (p *UnfollowRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnfollowRequest(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - RecommendEmailRegistration
//  - Certificate
type RegisterWithPhoneNumberResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  RecommendEmailRegistration bool `thrift:"recommendEmailRegistration,2" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
  Certificate string `thrift:"certificate,3" db:"certificate" json:"certificate"`
}

func NewRegisterWithPhoneNumberResult_() *RegisterWithPhoneNumberResult_ {
  return &RegisterWithPhoneNumberResult_{}
}


func (p *RegisterWithPhoneNumberResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *RegisterWithPhoneNumberResult_) GetRecommendEmailRegistration() bool {
  return p.RecommendEmailRegistration
}

func (p *RegisterWithPhoneNumberResult_) GetCertificate() string {
  return p.Certificate
}
func (p *RegisterWithPhoneNumberResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecommendEmailRegistration = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterWithPhoneNumberResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterWithPhoneNumberResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendEmailRegistration", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recommendEmailRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendEmailRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recommendEmailRegistration: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "certificate", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:certificate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:certificate: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) Equals(other *RegisterWithPhoneNumberResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  if p.RecommendEmailRegistration != other.RecommendEmailRegistration { return false }
  if p.Certificate != other.Certificate { return false }
  return true
}

func (p *RegisterWithPhoneNumberResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterWithPhoneNumberResult_(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowersRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowersRequest() *GetFollowersRequest {
  return &GetFollowersRequest{}
}

var GetFollowersRequest_FollowMid_DEFAULT *FollowMid
func (p *GetFollowersRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return GetFollowersRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *GetFollowersRequest) GetCursor() string {
  return p.Cursor
}
func (p *GetFollowersRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *GetFollowersRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowersRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *GetFollowersRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowersRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowersRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowersRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *GetFollowersRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowersRequest) Equals(other *GetFollowersRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  if p.Cursor != other.Cursor { return false }
  return true
}

func (p *GetFollowersRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowersRequest(%+v)", *p)
}

// Attributes:
//  - IconType
type FollowBuddyDetail struct {
  IconType int32 `thrift:"iconType,1" db:"iconType" json:"iconType"`
}

func NewFollowBuddyDetail() *FollowBuddyDetail {
  return &FollowBuddyDetail{}
}


func (p *FollowBuddyDetail) GetIconType() int32 {
  return p.IconType
}
func (p *FollowBuddyDetail) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowBuddyDetail)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *FollowBuddyDetail) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowBuddyDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowBuddyDetail) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iconType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iconType: ", p), err) }
  return err
}

func (p *FollowBuddyDetail) Equals(other *FollowBuddyDetail) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IconType != other.IconType { return false }
  return true
}

func (p *FollowBuddyDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowBuddyDetail(%+v)", *p)
}

// Attributes:
//  - ProfileAttributes
type UpdateProfileAttributesRequest struct {
  ProfileAttributes map[ProfileAttribute]*ProfileContent `thrift:"profileAttributes,1" db:"profileAttributes" json:"profileAttributes"`
}

func NewUpdateProfileAttributesRequest() *UpdateProfileAttributesRequest {
  return &UpdateProfileAttributesRequest{}
}


func (p *UpdateProfileAttributesRequest) GetProfileAttributes() map[ProfileAttribute]*ProfileContent {
  return p.ProfileAttributes
}
func (p *UpdateProfileAttributesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateProfileAttributesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[ProfileAttribute]*ProfileContent, size)
  p.ProfileAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key91 ProfileAttribute
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ProfileAttribute(v)
    _key91 = temp
}
    _val92 := &ProfileContent{}
    if err := _val92.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val92), err)
    }
    p.ProfileAttributes[_key91] = _val92
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateProfileAttributesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateProfileAttributesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateProfileAttributesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profileAttributes", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profileAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.ProfileAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ProfileAttributes {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profileAttributes: ", p), err) }
  return err
}

func (p *UpdateProfileAttributesRequest) Equals(other *UpdateProfileAttributesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ProfileAttributes) != len(other.ProfileAttributes) { return false }
  for k, _tgt := range p.ProfileAttributes {
    _src93 := other.ProfileAttributes[k]
    if !_tgt.Equals(_src93) { return false }
  }
  return true
}

func (p *UpdateProfileAttributesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateProfileAttributesRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Meta
type ProfileContent struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
  Meta map[string]string `thrift:"meta,2" db:"meta" json:"meta"`
}

func NewProfileContent() *ProfileContent {
  return &ProfileContent{}
}


func (p *ProfileContent) GetValue() string {
  return p.Value
}

func (p *ProfileContent) GetMeta() map[string]string {
  return p.Meta
}
func (p *ProfileContent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProfileContent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ProfileContent)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Meta =  tMap
  for i := 0; i < size; i ++ {
var _key94 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key94 = v
}
var _val95 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val95 = v
}
    p.Meta[_key94] = _val95
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfileContent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProfileContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfileContent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *ProfileContent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Meta)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Meta {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta: ", p), err) }
  return err
}

func (p *ProfileContent) Equals(other *ProfileContent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Value != other.Value { return false }
  if len(p.Meta) != len(other.Meta) { return false }
  for k, _tgt := range p.Meta {
    _src96 := other.Meta[k]
    if _tgt != _src96 { return false }
  }
  return true
}

func (p *ProfileContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfileContent(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - DisplayName
//  - PicturePath
//  - Following
//  - AllowFollow
//  - FollowBuddyDetail
type FollowProfile struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,3" db:"picturePath" json:"picturePath"`
  Following bool `thrift:"following,4" db:"following" json:"following"`
  AllowFollow bool `thrift:"allowFollow,5" db:"allowFollow" json:"allowFollow"`
  FollowBuddyDetail *FollowBuddyDetail `thrift:"followBuddyDetail,6" db:"followBuddyDetail" json:"followBuddyDetail"`
}

func NewFollowProfile() *FollowProfile {
  return &FollowProfile{}
}

var FollowProfile_FollowMid_DEFAULT *FollowMid
func (p *FollowProfile) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return FollowProfile_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *FollowProfile) GetDisplayName() string {
  return p.DisplayName
}

func (p *FollowProfile) GetPicturePath() string {
  return p.PicturePath
}

func (p *FollowProfile) GetFollowing() bool {
  return p.Following
}

func (p *FollowProfile) GetAllowFollow() bool {
  return p.AllowFollow
}
var FollowProfile_FollowBuddyDetail_DEFAULT *FollowBuddyDetail
func (p *FollowProfile) GetFollowBuddyDetail() *FollowBuddyDetail {
  if !p.IsSetFollowBuddyDetail() {
    return FollowProfile_FollowBuddyDetail_DEFAULT
  }
return p.FollowBuddyDetail
}
func (p *FollowProfile) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *FollowProfile) IsSetFollowBuddyDetail() bool {
  return p.FollowBuddyDetail != nil
}

func (p *FollowProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *FollowProfile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FollowProfile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FollowProfile)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Following = v
}
  return nil
}

func (p *FollowProfile)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllowFollow = v
}
  return nil
}

func (p *FollowProfile)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowBuddyDetail = &FollowBuddyDetail{}
  if err := p.FollowBuddyDetail.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowBuddyDetail), err)
  }
  return nil
}

func (p *FollowProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *FollowProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *FollowProfile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:picturePath: ", p), err) }
  return err
}

func (p *FollowProfile) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "following", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:following: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Following)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.following (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:following: ", p), err) }
  return err
}

func (p *FollowProfile) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowFollow", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:allowFollow: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowFollow (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:allowFollow: ", p), err) }
  return err
}

func (p *FollowProfile) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followBuddyDetail", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:followBuddyDetail: ", p), err) }
  if err := p.FollowBuddyDetail.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowBuddyDetail), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:followBuddyDetail: ", p), err) }
  return err
}

func (p *FollowProfile) Equals(other *FollowProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.Following != other.Following { return false }
  if p.AllowFollow != other.AllowFollow { return false }
  if !p.FollowBuddyDetail.Equals(other.FollowBuddyDetail) { return false }
  return true
}

func (p *FollowProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowProfile(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowersResponse struct {
  Profiles []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
  FollowingCount int64 `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
  FollowerCount int64 `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowersResponse() *GetFollowersResponse {
  return &GetFollowersResponse{}
}


func (p *GetFollowersResponse) GetProfiles() []*FollowProfile {
  return p.Profiles
}

func (p *GetFollowersResponse) GetCursor() string {
  return p.Cursor
}

func (p *GetFollowersResponse) GetFollowingCount() int64 {
  return p.FollowingCount
}

func (p *GetFollowersResponse) GetFollowerCount() int64 {
  return p.FollowerCount
}
func (p *GetFollowersResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowersResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FollowProfile, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem97 := &FollowProfile{}
    if err := _elem97.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem97), err)
    }
    p.Profiles = append(p.Profiles, _elem97)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFollowersResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowersResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FollowingCount = v
}
  return nil
}

func (p *GetFollowersResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FollowerCount = v
}
  return nil
}

func (p *GetFollowersResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowersResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowersResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profiles", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Profiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Profiles {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followingCount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followerCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowerCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err) }
  return err
}

func (p *GetFollowersResponse) Equals(other *GetFollowersResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Profiles) != len(other.Profiles) { return false }
  for i, _tgt := range p.Profiles {
    _src98 := other.Profiles[i]
    if !_tgt.Equals(_src98) { return false }
  }
  if p.Cursor != other.Cursor { return false }
  if p.FollowingCount != other.FollowingCount { return false }
  if p.FollowerCount != other.FollowerCount { return false }
  return true
}

func (p *GetFollowersResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowersResponse(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowingsRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowingsRequest() *GetFollowingsRequest {
  return &GetFollowingsRequest{}
}

var GetFollowingsRequest_FollowMid_DEFAULT *FollowMid
func (p *GetFollowingsRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return GetFollowingsRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *GetFollowingsRequest) GetCursor() string {
  return p.Cursor
}
func (p *GetFollowingsRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *GetFollowingsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowingsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *GetFollowingsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowingsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowingsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowingsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *GetFollowingsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowingsRequest) Equals(other *GetFollowingsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FollowMid.Equals(other.FollowMid) { return false }
  if p.Cursor != other.Cursor { return false }
  return true
}

func (p *GetFollowingsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowingsRequest(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowingsResponse struct {
  Profiles []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
  FollowingCount int64 `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
  FollowerCount int64 `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowingsResponse() *GetFollowingsResponse {
  return &GetFollowingsResponse{}
}


func (p *GetFollowingsResponse) GetProfiles() []*FollowProfile {
  return p.Profiles
}

func (p *GetFollowingsResponse) GetCursor() string {
  return p.Cursor
}

func (p *GetFollowingsResponse) GetFollowingCount() int64 {
  return p.FollowingCount
}

func (p *GetFollowingsResponse) GetFollowerCount() int64 {
  return p.FollowerCount
}
func (p *GetFollowingsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowingsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FollowProfile, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem99 := &FollowProfile{}
    if err := _elem99.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem99), err)
    }
    p.Profiles = append(p.Profiles, _elem99)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFollowingsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowingsResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FollowingCount = v
}
  return nil
}

func (p *GetFollowingsResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FollowerCount = v
}
  return nil
}

func (p *GetFollowingsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowingsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowingsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profiles", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Profiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Profiles {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followingCount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followerCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FollowerCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) Equals(other *GetFollowingsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Profiles) != len(other.Profiles) { return false }
  for i, _tgt := range p.Profiles {
    _src100 := other.Profiles[i]
    if !_tgt.Equals(_src100) { return false }
  }
  if p.Cursor != other.Cursor { return false }
  if p.FollowingCount != other.FollowingCount { return false }
  if p.FollowerCount != other.FollowerCount { return false }
  return true
}

func (p *GetFollowingsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowingsResponse(%+v)", *p)
}

// Attributes:
//  - Emid
//  - Distance
//  - LastUpdatedInSec
//  - Property
//  - Profile
type NearbyEntry struct {
  Emid string `thrift:"emid,1" db:"emid" json:"emid"`
  Distance float64 `thrift:"distance,2" db:"distance" json:"distance"`
  LastUpdatedInSec float64 `thrift:"lastUpdatedInSec,3" db:"lastUpdatedInSec" json:"lastUpdatedInSec"`
  Property map[string]string `thrift:"property,4" db:"property" json:"property"`
  Profile *Profile `thrift:"profile,5" db:"profile" json:"profile"`
}

func NewNearbyEntry() *NearbyEntry {
  return &NearbyEntry{}
}


func (p *NearbyEntry) GetEmid() string {
  return p.Emid
}

func (p *NearbyEntry) GetDistance() float64 {
  return p.Distance
}

func (p *NearbyEntry) GetLastUpdatedInSec() float64 {
  return p.LastUpdatedInSec
}

func (p *NearbyEntry) GetProperty() map[string]string {
  return p.Property
}
var NearbyEntry_Profile_DEFAULT *Profile
func (p *NearbyEntry) GetProfile() *Profile {
  if !p.IsSetProfile() {
    return NearbyEntry_Profile_DEFAULT
  }
return p.Profile
}
func (p *NearbyEntry) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *NearbyEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NearbyEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Emid = v
}
  return nil
}

func (p *NearbyEntry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Distance = v
}
  return nil
}

func (p *NearbyEntry)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastUpdatedInSec = v
}
  return nil
}

func (p *NearbyEntry)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Property =  tMap
  for i := 0; i < size; i ++ {
var _key101 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key101 = v
}
var _val102 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val102 = v
}
    p.Property[_key101] = _val102
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NearbyEntry)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Profile = &Profile{}
  if err := p.Profile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *NearbyEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NearbyEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NearbyEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "emid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:emid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Emid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:emid: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "distance", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:distance: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Distance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.distance (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:distance: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastUpdatedInSec", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastUpdatedInSec: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.LastUpdatedInSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastUpdatedInSec (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastUpdatedInSec: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "property", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:property: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Property)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Property {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:property: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profile", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:profile: ", p), err) }
  if err := p.Profile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:profile: ", p), err) }
  return err
}

func (p *NearbyEntry) Equals(other *NearbyEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Emid != other.Emid { return false }
  if p.Distance != other.Distance { return false }
  if p.LastUpdatedInSec != other.LastUpdatedInSec { return false }
  if len(p.Property) != len(other.Property) { return false }
  for k, _tgt := range p.Property {
    _src103 := other.Property[k]
    if _tgt != _src103 { return false }
  }
  if !p.Profile.Equals(other.Profile) { return false }
  return true
}

func (p *NearbyEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NearbyEntry(%+v)", *p)
}

// Attributes:
//  - StartMessageId
//  - EndMessageId
//  - StartTime
//  - EndTime
type TMessageReadRangeEntry struct {
  StartMessageId int64 `thrift:"startMessageId,1" db:"startMessageId" json:"startMessageId"`
  EndMessageId int64 `thrift:"endMessageId,2" db:"endMessageId" json:"endMessageId"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
}

func NewTMessageReadRangeEntry() *TMessageReadRangeEntry {
  return &TMessageReadRangeEntry{}
}


func (p *TMessageReadRangeEntry) GetStartMessageId() int64 {
  return p.StartMessageId
}

func (p *TMessageReadRangeEntry) GetEndMessageId() int64 {
  return p.EndMessageId
}

func (p *TMessageReadRangeEntry) GetStartTime() int64 {
  return p.StartTime
}

func (p *TMessageReadRangeEntry) GetEndTime() int64 {
  return p.EndTime
}
func (p *TMessageReadRangeEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartMessageId = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EndMessageId = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TMessageReadRangeEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMessageReadRangeEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessageReadRangeEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startMessageId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startMessageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startMessageId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startMessageId: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endMessageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endMessageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endMessageId: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) Equals(other *TMessageReadRangeEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StartMessageId != other.StartMessageId { return false }
  if p.EndMessageId != other.EndMessageId { return false }
  if p.StartTime != other.StartTime { return false }
  if p.EndTime != other.EndTime { return false }
  return true
}

func (p *TMessageReadRangeEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessageReadRangeEntry(%+v)", *p)
}

// Attributes:
//  - ChatId
//  - Ranges
type TMessageReadRange struct {
  ChatId string `thrift:"chatId,1" db:"chatId" json:"chatId"`
  Ranges map[string][]*TMessageReadRangeEntry `thrift:"ranges,2" db:"ranges" json:"ranges"`
}

func NewTMessageReadRange() *TMessageReadRange {
  return &TMessageReadRange{}
}


func (p *TMessageReadRange) GetChatId() string {
  return p.ChatId
}

func (p *TMessageReadRange) GetRanges() map[string][]*TMessageReadRangeEntry {
  return p.Ranges
}
func (p *TMessageReadRange) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessageReadRange)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChatId = v
}
  return nil
}

func (p *TMessageReadRange)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*TMessageReadRangeEntry, size)
  p.Ranges =  tMap
  for i := 0; i < size; i ++ {
var _key104 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key104 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*TMessageReadRangeEntry, 0, size)
    _val105 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem106 := &TMessageReadRangeEntry{}
      if err := _elem106.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem106), err)
      }
      _val105 = append(_val105, _elem106)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Ranges[_key104] = _val105
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TMessageReadRange) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMessageReadRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessageReadRange) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatId: ", p), err) }
  return err
}

func (p *TMessageReadRange) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ranges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ranges: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.Ranges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Ranges {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ranges: ", p), err) }
  return err
}

func (p *TMessageReadRange) Equals(other *TMessageReadRange) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ChatId != other.ChatId { return false }
  if len(p.Ranges) != len(other.Ranges) { return false }
  for k, _tgt := range p.Ranges {
    _src107 := other.Ranges[k]
    if len(_tgt) != len(_src107) { return false }
    for i, _tgt := range _tgt {
      _src108 := _src107[i]
      if !_tgt.Equals(_src108) { return false }
    }
  }
  return true
}

func (p *TMessageReadRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessageReadRange(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type ChannelException struct {
  Code ChannelErrorCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewChannelException() *ChannelException {
  return &ChannelException{}
}


func (p *ChannelException) GetCode() ChannelErrorCode {
  return p.Code
}

func (p *ChannelException) GetReason() string {
  return p.Reason
}

func (p *ChannelException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *ChannelException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChannelErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ChannelException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *ChannelException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key109 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key109 = v
}
var _val110 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val110 = v
}
    p.ParameterMap[_key109] = _val110
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChannelException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ChannelException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *ChannelException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *ChannelException) Equals(other *ChannelException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Reason != other.Reason { return false }
  if len(p.ParameterMap) != len(other.ParameterMap) { return false }
  for k, _tgt := range p.ParameterMap {
    _src111 := other.ParameterMap[k]
    if _tgt != _src111 { return false }
  }
  return true
}

func (p *ChannelException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelException(%+v)", *p)
}

func (p *ChannelException) Error() string {
  return p.String()
}

func (ChannelException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ChannelException)(nil)

// Attributes:
//  - Token
//  - ObsToken
//  - Expiration
//  - RefreshToken
//  - ChannelAccessToken
type ChannelToken struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ObsToken string `thrift:"obsToken,2" db:"obsToken" json:"obsToken"`
  Expiration int64 `thrift:"expiration,3" db:"expiration" json:"expiration"`
  RefreshToken string `thrift:"refreshToken,4" db:"refreshToken" json:"refreshToken"`
  ChannelAccessToken string `thrift:"channelAccessToken,5" db:"channelAccessToken" json:"channelAccessToken"`
}

func NewChannelToken() *ChannelToken {
  return &ChannelToken{}
}


func (p *ChannelToken) GetToken() string {
  return p.Token
}

func (p *ChannelToken) GetObsToken() string {
  return p.ObsToken
}

func (p *ChannelToken) GetExpiration() int64 {
  return p.Expiration
}

func (p *ChannelToken) GetRefreshToken() string {
  return p.RefreshToken
}

func (p *ChannelToken) GetChannelAccessToken() string {
  return p.ChannelAccessToken
}
func (p *ChannelToken) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelToken)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *ChannelToken)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ObsToken = v
}
  return nil
}

func (p *ChannelToken)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expiration = v
}
  return nil
}

func (p *ChannelToken)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RefreshToken = v
}
  return nil
}

func (p *ChannelToken)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ChannelAccessToken = v
}
  return nil
}

func (p *ChannelToken) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelToken"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelToken) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *ChannelToken) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "obsToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:obsToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ObsToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.obsToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:obsToken: ", p), err) }
  return err
}

func (p *ChannelToken) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expiration", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Expiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expiration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiration: ", p), err) }
  return err
}

func (p *ChannelToken) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refreshToken", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refreshToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefreshToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refreshToken (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refreshToken: ", p), err) }
  return err
}

func (p *ChannelToken) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelAccessToken", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:channelAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelAccessToken (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:channelAccessToken: ", p), err) }
  return err
}

func (p *ChannelToken) Equals(other *ChannelToken) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Token != other.Token { return false }
  if p.ObsToken != other.ObsToken { return false }
  if p.Expiration != other.Expiration { return false }
  if p.RefreshToken != other.RefreshToken { return false }
  if p.ChannelAccessToken != other.ChannelAccessToken { return false }
  return true
}

func (p *ChannelToken) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelToken(%+v)", *p)
}

// Attributes:
//  - ReturnUrl
//  - OptionalReturnUrl
//  - RedirectConfirmationPageUrl
type WebLoginResponse struct {
  ReturnUrl string `thrift:"returnUrl,1" db:"returnUrl" json:"returnUrl"`
  OptionalReturnUrl string `thrift:"optionalReturnUrl,2" db:"optionalReturnUrl" json:"optionalReturnUrl"`
  RedirectConfirmationPageUrl string `thrift:"redirectConfirmationPageUrl,3" db:"redirectConfirmationPageUrl" json:"redirectConfirmationPageUrl"`
}

func NewWebLoginResponse() *WebLoginResponse {
  return &WebLoginResponse{}
}


func (p *WebLoginResponse) GetReturnUrl() string {
  return p.ReturnUrl
}

func (p *WebLoginResponse) GetOptionalReturnUrl() string {
  return p.OptionalReturnUrl
}

func (p *WebLoginResponse) GetRedirectConfirmationPageUrl() string {
  return p.RedirectConfirmationPageUrl
}
func (p *WebLoginResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebLoginResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnUrl = v
}
  return nil
}

func (p *WebLoginResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OptionalReturnUrl = v
}
  return nil
}

func (p *WebLoginResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RedirectConfirmationPageUrl = v
}
  return nil
}

func (p *WebLoginResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WebLoginResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebLoginResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "returnUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnUrl: ", p), err) }
  return err
}

func (p *WebLoginResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "optionalReturnUrl", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:optionalReturnUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OptionalReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optionalReturnUrl (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:optionalReturnUrl: ", p), err) }
  return err
}

func (p *WebLoginResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "redirectConfirmationPageUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:redirectConfirmationPageUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RedirectConfirmationPageUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redirectConfirmationPageUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:redirectConfirmationPageUrl: ", p), err) }
  return err
}

func (p *WebLoginResponse) Equals(other *WebLoginResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReturnUrl != other.ReturnUrl { return false }
  if p.OptionalReturnUrl != other.OptionalReturnUrl { return false }
  if p.RedirectConfirmationPageUrl != other.RedirectConfirmationPageUrl { return false }
  return true
}

func (p *WebLoginResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebLoginResponse(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Name
//  - NotificationReceivable
//  - MessageReceivable
//  - ShowDefault
type ChannelNotificationSetting struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  NotificationReceivable bool `thrift:"notificationReceivable,3" db:"notificationReceivable" json:"notificationReceivable"`
  MessageReceivable bool `thrift:"messageReceivable,4" db:"messageReceivable" json:"messageReceivable"`
  ShowDefault bool `thrift:"showDefault,5" db:"showDefault" json:"showDefault"`
}

func NewChannelNotificationSetting() *ChannelNotificationSetting {
  return &ChannelNotificationSetting{}
}


func (p *ChannelNotificationSetting) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelNotificationSetting) GetName() string {
  return p.Name
}

func (p *ChannelNotificationSetting) GetNotificationReceivable() bool {
  return p.NotificationReceivable
}

func (p *ChannelNotificationSetting) GetMessageReceivable() bool {
  return p.MessageReceivable
}

func (p *ChannelNotificationSetting) GetShowDefault() bool {
  return p.ShowDefault
}
func (p *ChannelNotificationSetting) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelNotificationSetting)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelNotificationSetting)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChannelNotificationSetting)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NotificationReceivable = v
}
  return nil
}

func (p *ChannelNotificationSetting)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MessageReceivable = v
}
  return nil
}

func (p *ChannelNotificationSetting)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ShowDefault = v
}
  return nil
}

func (p *ChannelNotificationSetting) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelNotificationSetting"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelNotificationSetting) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelNotificationSetting) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ChannelNotificationSetting) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationReceivable", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notificationReceivable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationReceivable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationReceivable (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notificationReceivable: ", p), err) }
  return err
}

func (p *ChannelNotificationSetting) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageReceivable", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:messageReceivable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.MessageReceivable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageReceivable (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:messageReceivable: ", p), err) }
  return err
}

func (p *ChannelNotificationSetting) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "showDefault", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:showDefault: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ShowDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.showDefault (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:showDefault: ", p), err) }
  return err
}

func (p *ChannelNotificationSetting) Equals(other *ChannelNotificationSetting) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ChannelId != other.ChannelId { return false }
  if p.Name != other.Name { return false }
  if p.NotificationReceivable != other.NotificationReceivable { return false }
  if p.MessageReceivable != other.MessageReceivable { return false }
  if p.ShowDefault != other.ShowDefault { return false }
  return true
}

func (p *ChannelNotificationSetting) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelNotificationSetting(%+v)", *p)
}

// Attributes:
//  - HookedFullUrl
//  - SessionString
//  - FromIAB
//  - SourceApplication
type WebLoginRequest struct {
  HookedFullUrl string `thrift:"hookedFullUrl,1" db:"hookedFullUrl" json:"hookedFullUrl"`
  SessionString string `thrift:"sessionString,2" db:"sessionString" json:"sessionString"`
  FromIAB bool `thrift:"fromIAB,3" db:"fromIAB" json:"fromIAB"`
  SourceApplication string `thrift:"sourceApplication,4" db:"sourceApplication" json:"sourceApplication"`
}

func NewWebLoginRequest() *WebLoginRequest {
  return &WebLoginRequest{}
}


func (p *WebLoginRequest) GetHookedFullUrl() string {
  return p.HookedFullUrl
}

func (p *WebLoginRequest) GetSessionString() string {
  return p.SessionString
}

func (p *WebLoginRequest) GetFromIAB() bool {
  return p.FromIAB
}

func (p *WebLoginRequest) GetSourceApplication() string {
  return p.SourceApplication
}
func (p *WebLoginRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebLoginRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HookedFullUrl = v
}
  return nil
}

func (p *WebLoginRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionString = v
}
  return nil
}

func (p *WebLoginRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FromIAB = v
}
  return nil
}

func (p *WebLoginRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SourceApplication = v
}
  return nil
}

func (p *WebLoginRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WebLoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebLoginRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hookedFullUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hookedFullUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HookedFullUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hookedFullUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hookedFullUrl: ", p), err) }
  return err
}

func (p *WebLoginRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionString", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionString: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionString (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionString: ", p), err) }
  return err
}

func (p *WebLoginRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIAB", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromIAB: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.FromIAB)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIAB (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromIAB: ", p), err) }
  return err
}

func (p *WebLoginRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sourceApplication", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sourceApplication: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceApplication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceApplication (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sourceApplication: ", p), err) }
  return err
}

func (p *WebLoginRequest) Equals(other *WebLoginRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HookedFullUrl != other.HookedFullUrl { return false }
  if p.SessionString != other.SessionString { return false }
  if p.FromIAB != other.FromIAB { return false }
  if p.SourceApplication != other.SourceApplication { return false }
  return true
}

func (p *WebLoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebLoginRequest(%+v)", *p)
}

// Attributes:
//  - OtpId
//  - Otp
type OTPResult_ struct {
  OtpId string `thrift:"otpId,1" db:"otpId" json:"otpId"`
  Otp string `thrift:"otp,2" db:"otp" json:"otp"`
}

func NewOTPResult_() *OTPResult_ {
  return &OTPResult_{}
}


func (p *OTPResult_) GetOtpId() string {
  return p.OtpId
}

func (p *OTPResult_) GetOtp() string {
  return p.Otp
}
func (p *OTPResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OTPResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OtpId = v
}
  return nil
}

func (p *OTPResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Otp = v
}
  return nil
}

func (p *OTPResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OTPResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OTPResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "otpId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:otpId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OtpId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otpId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:otpId: ", p), err) }
  return err
}

func (p *OTPResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "otp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otp: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Otp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otp: ", p), err) }
  return err
}

func (p *OTPResult_) Equals(other *OTPResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.OtpId != other.OtpId { return false }
  if p.Otp != other.Otp { return false }
  return true
}

func (p *OTPResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OTPResult_(%+v)", *p)
}

// Attributes:
//  - ID
//  - _from
//  - To
//  - FromChannel
//  - ToChannel
//  - Revision
//  - CreatedTime
//  - Content
type NotificationItem struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  _from string `thrift:"_from,2" db:"_from" json:"_from"`
  To string `thrift:"to,3" db:"to" json:"to"`
  FromChannel string `thrift:"fromChannel,4" db:"fromChannel" json:"fromChannel"`
  ToChannel string `thrift:"toChannel,5" db:"toChannel" json:"toChannel"`
  // unused field # 6
  Revision int64 `thrift:"revision,7" db:"revision" json:"revision"`
  CreatedTime int64 `thrift:"createdTime,8" db:"createdTime" json:"createdTime"`
  Content map[string]string `thrift:"content,9" db:"content" json:"content"`
}

func NewNotificationItem() *NotificationItem {
  return &NotificationItem{}
}


func (p *NotificationItem) GetID() string {
  return p.ID
}

func (p *NotificationItem) Get_from() string {
  return p._from
}

func (p *NotificationItem) GetTo() string {
  return p.To
}

func (p *NotificationItem) GetFromChannel() string {
  return p.FromChannel
}

func (p *NotificationItem) GetToChannel() string {
  return p.ToChannel
}

func (p *NotificationItem) GetRevision() int64 {
  return p.Revision
}

func (p *NotificationItem) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *NotificationItem) GetContent() map[string]string {
  return p.Content
}
func (p *NotificationItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotificationItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *NotificationItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p._from = v
}
  return nil
}

func (p *NotificationItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *NotificationItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FromChannel = v
}
  return nil
}

func (p *NotificationItem)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ToChannel = v
}
  return nil
}

func (p *NotificationItem)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *NotificationItem)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *NotificationItem)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Content =  tMap
  for i := 0; i < size; i ++ {
var _key112 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key112 = v
}
var _val113 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val113 = v
}
    p.Content[_key112] = _val113
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NotificationItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *NotificationItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "_from", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:_from: ", p), err) }
  if err := oprot.WriteString(ctx, string(p._from)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T._from (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:_from: ", p), err) }
  return err
}

func (p *NotificationItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:to: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:to: ", p), err) }
  return err
}

func (p *NotificationItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromChannel", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromChannel: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FromChannel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromChannel (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromChannel: ", p), err) }
  return err
}

func (p *NotificationItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toChannel", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toChannel: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ToChannel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toChannel (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toChannel: ", p), err) }
  return err
}

func (p *NotificationItem) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:revision: ", p), err) }
  return err
}

func (p *NotificationItem) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createdTime: ", p), err) }
  return err
}

func (p *NotificationItem) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "content", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:content: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Content)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Content {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:content: ", p), err) }
  return err
}

func (p *NotificationItem) Equals(other *NotificationItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p._from != other._from { return false }
  if p.To != other.To { return false }
  if p.FromChannel != other.FromChannel { return false }
  if p.ToChannel != other.ToChannel { return false }
  if p.Revision != other.Revision { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if len(p.Content) != len(other.Content) { return false }
  for k, _tgt := range p.Content {
    _src114 := other.Content[k]
    if _tgt != _src114 { return false }
  }
  return true
}

func (p *NotificationItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationItem(%+v)", *p)
}

// Attributes:
//  - FetchMode
//  - ItemList
type NotificationFetchResult_ struct {
  FetchMode NotificationItemFetchMode `thrift:"fetchMode,1" db:"fetchMode" json:"fetchMode"`
  ItemList []*NotificationItem `thrift:"itemList,2" db:"itemList" json:"itemList"`
}

func NewNotificationFetchResult_() *NotificationFetchResult_ {
  return &NotificationFetchResult_{}
}


func (p *NotificationFetchResult_) GetFetchMode() NotificationItemFetchMode {
  return p.FetchMode
}

func (p *NotificationFetchResult_) GetItemList() []*NotificationItem {
  return p.ItemList
}
func (p *NotificationFetchResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotificationFetchResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NotificationItemFetchMode(v)
  p.FetchMode = temp
}
  return nil
}

func (p *NotificationFetchResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NotificationItem, 0, size)
  p.ItemList =  tSlice
  for i := 0; i < size; i ++ {
    _elem115 := &NotificationItem{}
    if err := _elem115.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem115), err)
    }
    p.ItemList = append(p.ItemList, _elem115)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NotificationFetchResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationFetchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationFetchResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fetchMode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fetchMode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FetchMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fetchMode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fetchMode: ", p), err) }
  return err
}

func (p *NotificationFetchResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ItemList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ItemList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemList: ", p), err) }
  return err
}

func (p *NotificationFetchResult_) Equals(other *NotificationFetchResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FetchMode != other.FetchMode { return false }
  if len(p.ItemList) != len(other.ItemList) { return false }
  for i, _tgt := range p.ItemList {
    _src116 := other.ItemList[i]
    if !_tgt.Equals(_src116) { return false }
  }
  return true
}

func (p *NotificationFetchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationFetchResult_(%+v)", *p)
}

// Attributes:
//  - Name
type ChannelProvider struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewChannelProvider() *ChannelProvider {
  return &ChannelProvider{}
}


func (p *ChannelProvider) GetName() string {
  return p.Name
}
func (p *ChannelProvider) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelProvider)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChannelProvider) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelProvider"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelProvider) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ChannelProvider) Equals(other *ChannelProvider) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  return true
}

func (p *ChannelProvider) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelProvider(%+v)", *p)
}

// Attributes:
//  - Host
//  - Removed
type ChannelDomain struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Removed bool `thrift:"removed,2" db:"removed" json:"removed"`
}

func NewChannelDomain() *ChannelDomain {
  return &ChannelDomain{}
}


func (p *ChannelDomain) GetHost() string {
  return p.Host
}

func (p *ChannelDomain) GetRemoved() bool {
  return p.Removed
}
func (p *ChannelDomain) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelDomain)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *ChannelDomain)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Removed = v
}
  return nil
}

func (p *ChannelDomain) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelDomain"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelDomain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *ChannelDomain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "removed", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removed: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Removed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.removed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removed: ", p), err) }
  return err
}

func (p *ChannelDomain) Equals(other *ChannelDomain) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Host != other.Host { return false }
  if p.Removed != other.Removed { return false }
  return true
}

func (p *ChannelDomain) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelDomain(%+v)", *p)
}

// Attributes:
//  - ChannelDomains
//  - Revision
type ChannelDomains struct {
  ChannelDomains []*ChannelDomain `thrift:"channelDomains,1" db:"channelDomains" json:"channelDomains"`
  Revision int64 `thrift:"revision,2" db:"revision" json:"revision"`
}

func NewChannelDomains() *ChannelDomains {
  return &ChannelDomains{}
}


func (p *ChannelDomains) GetChannelDomains() []*ChannelDomain {
  return p.ChannelDomains
}

func (p *ChannelDomains) GetRevision() int64 {
  return p.Revision
}
func (p *ChannelDomains) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelDomains)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelDomain, 0, size)
  p.ChannelDomains =  tSlice
  for i := 0; i < size; i ++ {
    _elem117 := &ChannelDomain{}
    if err := _elem117.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem117), err)
    }
    p.ChannelDomains = append(p.ChannelDomains, _elem117)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelDomains)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *ChannelDomains) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelDomains"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelDomains) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelDomains", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelDomains: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ChannelDomains)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelDomains {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelDomains: ", p), err) }
  return err
}

func (p *ChannelDomains) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err) }
  return err
}

func (p *ChannelDomains) Equals(other *ChannelDomains) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ChannelDomains) != len(other.ChannelDomains) { return false }
  for i, _tgt := range p.ChannelDomains {
    _src118 := other.ChannelDomains[i]
    if !_tgt.Equals(_src118) { return false }
  }
  if p.Revision != other.Revision { return false }
  return true
}

func (p *ChannelDomains) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelDomains(%+v)", *p)
}

// Attributes:
//  - ChannelInfos
//  - Revision
type ChannelInfos struct {
  ChannelInfos []*ChannelInfo `thrift:"channelInfos,1" db:"channelInfos" json:"channelInfos"`
  Revision int64 `thrift:"revision,2" db:"revision" json:"revision"`
}

func NewChannelInfos() *ChannelInfos {
  return &ChannelInfos{}
}


func (p *ChannelInfos) GetChannelInfos() []*ChannelInfo {
  return p.ChannelInfos
}

func (p *ChannelInfos) GetRevision() int64 {
  return p.Revision
}
func (p *ChannelInfos) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelInfos)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelInfo, 0, size)
  p.ChannelInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem119 := &ChannelInfo{}
    if err := _elem119.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem119), err)
    }
    p.ChannelInfos = append(p.ChannelInfos, _elem119)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfos)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *ChannelInfos) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelInfos"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelInfos) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelInfos", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelInfos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ChannelInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelInfos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelInfos: ", p), err) }
  return err
}

func (p *ChannelInfos) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err) }
  return err
}

func (p *ChannelInfos) Equals(other *ChannelInfos) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ChannelInfos) != len(other.ChannelInfos) { return false }
  for i, _tgt := range p.ChannelInfos {
    _src120 := other.ChannelInfos[i]
    if !_tgt.Equals(_src120) { return false }
  }
  if p.Revision != other.Revision { return false }
  return true
}

func (p *ChannelInfos) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelInfos(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Name
//  - EntryPageUrl
//  - DescriptionText
//  - Provider
//  - PublicType
//  - IconImage
//  - Permissions
//  - IconThumbnailImage
//  - ChannelConfigurations
//  - LcsAllApiUsable
//  - AllowedPermissions
//  - ChannelDomains
//  - UpdatedTimestamp
type ChannelInfo struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  // unused field # 2
  Name string `thrift:"name,3" db:"name" json:"name"`
  EntryPageUrl string `thrift:"entryPageUrl,4" db:"entryPageUrl" json:"entryPageUrl"`
  DescriptionText string `thrift:"descriptionText,5" db:"descriptionText" json:"descriptionText"`
  Provider *ChannelProvider `thrift:"provider,6" db:"provider" json:"provider"`
  PublicType PublicType `thrift:"publicType,7" db:"publicType" json:"publicType"`
  IconImage string `thrift:"iconImage,8" db:"iconImage" json:"iconImage"`
  Permissions []string `thrift:"permissions,9" db:"permissions" json:"permissions"`
  // unused field # 10
  IconThumbnailImage string `thrift:"iconThumbnailImage,11" db:"iconThumbnailImage" json:"iconThumbnailImage"`
  ChannelConfigurations []ChannelConfiguration `thrift:"channelConfigurations,12" db:"channelConfigurations" json:"channelConfigurations"`
  LcsAllApiUsable bool `thrift:"lcsAllApiUsable,13" db:"lcsAllApiUsable" json:"lcsAllApiUsable"`
  AllowedPermissions []ChannelPermission `thrift:"allowedPermissions,14" db:"allowedPermissions" json:"allowedPermissions"`
  ChannelDomains []*ChannelDomain `thrift:"channelDomains,15" db:"channelDomains" json:"channelDomains"`
  UpdatedTimestamp int64 `thrift:"updatedTimestamp,16" db:"updatedTimestamp" json:"updatedTimestamp"`
}

func NewChannelInfo() *ChannelInfo {
  return &ChannelInfo{}
}


func (p *ChannelInfo) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelInfo) GetName() string {
  return p.Name
}

func (p *ChannelInfo) GetEntryPageUrl() string {
  return p.EntryPageUrl
}

func (p *ChannelInfo) GetDescriptionText() string {
  return p.DescriptionText
}
var ChannelInfo_Provider_DEFAULT *ChannelProvider
func (p *ChannelInfo) GetProvider() *ChannelProvider {
  if !p.IsSetProvider() {
    return ChannelInfo_Provider_DEFAULT
  }
return p.Provider
}

func (p *ChannelInfo) GetPublicType() PublicType {
  return p.PublicType
}

func (p *ChannelInfo) GetIconImage() string {
  return p.IconImage
}

func (p *ChannelInfo) GetPermissions() []string {
  return p.Permissions
}

func (p *ChannelInfo) GetIconThumbnailImage() string {
  return p.IconThumbnailImage
}

func (p *ChannelInfo) GetChannelConfigurations() []ChannelConfiguration {
  return p.ChannelConfigurations
}

func (p *ChannelInfo) GetLcsAllApiUsable() bool {
  return p.LcsAllApiUsable
}

func (p *ChannelInfo) GetAllowedPermissions() []ChannelPermission {
  return p.AllowedPermissions
}

func (p *ChannelInfo) GetChannelDomains() []*ChannelDomain {
  return p.ChannelDomains
}

func (p *ChannelInfo) GetUpdatedTimestamp() int64 {
  return p.UpdatedTimestamp
}
func (p *ChannelInfo) IsSetProvider() bool {
  return p.Provider != nil
}

func (p *ChannelInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChannelInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EntryPageUrl = v
}
  return nil
}

func (p *ChannelInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DescriptionText = v
}
  return nil
}

func (p *ChannelInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Provider = &ChannelProvider{}
  if err := p.Provider.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Provider), err)
  }
  return nil
}

func (p *ChannelInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PublicType(v)
  p.PublicType = temp
}
  return nil
}

func (p *ChannelInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IconImage = v
}
  return nil
}

func (p *ChannelInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Permissions =  tSlice
  for i := 0; i < size; i ++ {
var _elem121 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem121 = v
}
    p.Permissions = append(p.Permissions, _elem121)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IconThumbnailImage = v
}
  return nil
}

func (p *ChannelInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]ChannelConfiguration, 0, size)
  p.ChannelConfigurations =  tSlice
  for i := 0; i < size; i ++ {
var _elem122 ChannelConfiguration
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ChannelConfiguration(v)
    _elem122 = temp
}
    p.ChannelConfigurations = append(p.ChannelConfigurations, _elem122)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfo)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.LcsAllApiUsable = v
}
  return nil
}

func (p *ChannelInfo)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]ChannelPermission, 0, size)
  p.AllowedPermissions =  tSet
  for i := 0; i < size; i ++ {
var _elem123 ChannelPermission
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ChannelPermission(v)
    _elem123 = temp
}
    p.AllowedPermissions = append(p.AllowedPermissions, _elem123)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ChannelInfo)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelDomain, 0, size)
  p.ChannelDomains =  tSlice
  for i := 0; i < size; i ++ {
    _elem124 := &ChannelDomain{}
    if err := _elem124.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem124), err)
    }
    p.ChannelDomains = append(p.ChannelDomains, _elem124)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfo)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.UpdatedTimestamp = v
}
  return nil
}

func (p *ChannelInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entryPageUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entryPageUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EntryPageUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entryPageUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entryPageUrl: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "descriptionText", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:descriptionText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DescriptionText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.descriptionText (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:descriptionText: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:provider: ", p), err) }
  if err := p.Provider.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Provider), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:provider: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:publicType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PublicType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publicType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:publicType: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconImage", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:iconImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IconImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconImage (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:iconImage: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "permissions", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:permissions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Permissions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Permissions {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:permissions: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconThumbnailImage", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:iconThumbnailImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IconThumbnailImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconThumbnailImage (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:iconThumbnailImage: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelConfigurations", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:channelConfigurations: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.ChannelConfigurations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelConfigurations {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:channelConfigurations: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lcsAllApiUsable", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:lcsAllApiUsable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.LcsAllApiUsable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lcsAllApiUsable (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:lcsAllApiUsable: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowedPermissions", thrift.SET, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:allowedPermissions: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AllowedPermissions)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedPermissions); i++ {
    for j := i+1; j<len(p.AllowedPermissions); j++ {
      if func(tgt, src ChannelPermission) bool {
        if tgt != src { return false }
        return true
      }(p.AllowedPermissions[i], p.AllowedPermissions[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedPermissions))
      }
    }
  }
  for _, v := range p.AllowedPermissions {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:allowedPermissions: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelDomains", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:channelDomains: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ChannelDomains)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelDomains {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:channelDomains: ", p), err) }
  return err
}

func (p *ChannelInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedTimestamp", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:updatedTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UpdatedTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedTimestamp (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:updatedTimestamp: ", p), err) }
  return err
}

func (p *ChannelInfo) Equals(other *ChannelInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ChannelId != other.ChannelId { return false }
  if p.Name != other.Name { return false }
  if p.EntryPageUrl != other.EntryPageUrl { return false }
  if p.DescriptionText != other.DescriptionText { return false }
  if !p.Provider.Equals(other.Provider) { return false }
  if p.PublicType != other.PublicType { return false }
  if p.IconImage != other.IconImage { return false }
  if len(p.Permissions) != len(other.Permissions) { return false }
  for i, _tgt := range p.Permissions {
    _src125 := other.Permissions[i]
    if _tgt != _src125 { return false }
  }
  if p.IconThumbnailImage != other.IconThumbnailImage { return false }
  if len(p.ChannelConfigurations) != len(other.ChannelConfigurations) { return false }
  for i, _tgt := range p.ChannelConfigurations {
    _src126 := other.ChannelConfigurations[i]
    if _tgt != _src126 { return false }
  }
  if p.LcsAllApiUsable != other.LcsAllApiUsable { return false }
  if len(p.AllowedPermissions) != len(other.AllowedPermissions) { return false }
  for i, _tgt := range p.AllowedPermissions {
    _src127 := other.AllowedPermissions[i]
    if _tgt != _src127 { return false }
  }
  if len(p.ChannelDomains) != len(other.ChannelDomains) { return false }
  for i, _tgt := range p.ChannelDomains {
    _src128 := other.ChannelDomains[i]
    if !_tgt.Equals(_src128) { return false }
  }
  if p.UpdatedTimestamp != other.UpdatedTimestamp { return false }
  return true
}

func (p *ChannelInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelInfo(%+v)", *p)
}

// Attributes:
//  - ChannelInfo
//  - ApprovedAt
type ApprovedChannelInfo struct {
  ChannelInfo *ChannelInfo `thrift:"channelInfo,1" db:"channelInfo" json:"channelInfo"`
  ApprovedAt int64 `thrift:"approvedAt,2" db:"approvedAt" json:"approvedAt"`
}

func NewApprovedChannelInfo() *ApprovedChannelInfo {
  return &ApprovedChannelInfo{}
}

var ApprovedChannelInfo_ChannelInfo_DEFAULT *ChannelInfo
func (p *ApprovedChannelInfo) GetChannelInfo() *ChannelInfo {
  if !p.IsSetChannelInfo() {
    return ApprovedChannelInfo_ChannelInfo_DEFAULT
  }
return p.ChannelInfo
}

func (p *ApprovedChannelInfo) GetApprovedAt() int64 {
  return p.ApprovedAt
}
func (p *ApprovedChannelInfo) IsSetChannelInfo() bool {
  return p.ChannelInfo != nil
}

func (p *ApprovedChannelInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApprovedChannelInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChannelInfo = &ChannelInfo{}
  if err := p.ChannelInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChannelInfo), err)
  }
  return nil
}

func (p *ApprovedChannelInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ApprovedAt = v
}
  return nil
}

func (p *ApprovedChannelInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ApprovedChannelInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApprovedChannelInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelInfo: ", p), err) }
  if err := p.ChannelInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChannelInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelInfo: ", p), err) }
  return err
}

func (p *ApprovedChannelInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "approvedAt", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:approvedAt: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ApprovedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.approvedAt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:approvedAt: ", p), err) }
  return err
}

func (p *ApprovedChannelInfo) Equals(other *ApprovedChannelInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ChannelInfo.Equals(other.ChannelInfo) { return false }
  if p.ApprovedAt != other.ApprovedAt { return false }
  return true
}

func (p *ApprovedChannelInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApprovedChannelInfo(%+v)", *p)
}

// Attributes:
//  - ApprovedChannelInfos
//  - Revision
type ApprovedChannelInfos struct {
  ApprovedChannelInfos []*ApprovedChannelInfo `thrift:"approvedChannelInfos,1" db:"approvedChannelInfos" json:"approvedChannelInfos"`
  Revision int64 `thrift:"revision,2" db:"revision" json:"revision"`
}

func NewApprovedChannelInfos() *ApprovedChannelInfos {
  return &ApprovedChannelInfos{}
}


func (p *ApprovedChannelInfos) GetApprovedChannelInfos() []*ApprovedChannelInfo {
  return p.ApprovedChannelInfos
}

func (p *ApprovedChannelInfos) GetRevision() int64 {
  return p.Revision
}
func (p *ApprovedChannelInfos) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApprovedChannelInfos)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ApprovedChannelInfo, 0, size)
  p.ApprovedChannelInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem129 := &ApprovedChannelInfo{}
    if err := _elem129.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem129), err)
    }
    p.ApprovedChannelInfos = append(p.ApprovedChannelInfos, _elem129)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApprovedChannelInfos)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *ApprovedChannelInfos) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ApprovedChannelInfos"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApprovedChannelInfos) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "approvedChannelInfos", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:approvedChannelInfos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ApprovedChannelInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ApprovedChannelInfos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:approvedChannelInfos: ", p), err) }
  return err
}

func (p *ApprovedChannelInfos) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err) }
  return err
}

func (p *ApprovedChannelInfos) Equals(other *ApprovedChannelInfos) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ApprovedChannelInfos) != len(other.ApprovedChannelInfos) { return false }
  for i, _tgt := range p.ApprovedChannelInfos {
    _src130 := other.ApprovedChannelInfos[i]
    if !_tgt.Equals(_src130) { return false }
  }
  if p.Revision != other.Revision { return false }
  return true
}

func (p *ApprovedChannelInfos) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApprovedChannelInfos(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreatedTime
//  - Name
//  - PictureStatus
//  - PreventedJoinByTicket
//  - GroupPreference
//  - Members
//  - Creator
//  - Invitee
//  - NotificationDisabled
type Group struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Name string `thrift:"name,10" db:"name" json:"name"`
  PictureStatus string `thrift:"pictureStatus,11" db:"pictureStatus" json:"pictureStatus"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,12" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  GroupPreference *GroupPreference `thrift:"groupPreference,13" db:"groupPreference" json:"groupPreference"`
  // unused fields # 14 to 19
  Members []*Contact `thrift:"members,20" db:"members" json:"members"`
  Creator *Contact `thrift:"creator,21" db:"creator" json:"creator"`
  Invitee []*Contact `thrift:"invitee,22" db:"invitee" json:"invitee"`
  // unused fields # 23 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
}

func NewGroup() *Group {
  return &Group{}
}


func (p *Group) GetID() string {
  return p.ID
}

func (p *Group) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Group) GetName() string {
  return p.Name
}

func (p *Group) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Group) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}
var Group_GroupPreference_DEFAULT *GroupPreference
func (p *Group) GetGroupPreference() *GroupPreference {
  if !p.IsSetGroupPreference() {
    return Group_GroupPreference_DEFAULT
  }
return p.GroupPreference
}

func (p *Group) GetMembers() []*Contact {
  return p.Members
}
var Group_Creator_DEFAULT *Contact
func (p *Group) GetCreator() *Contact {
  if !p.IsSetCreator() {
    return Group_Creator_DEFAULT
  }
return p.Creator
}

func (p *Group) GetInvitee() []*Contact {
  return p.Invitee
}

func (p *Group) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}
func (p *Group) IsSetGroupPreference() bool {
  return p.GroupPreference != nil
}

func (p *Group) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *Group) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Group)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Group)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Group)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Group)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Group)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *Group)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.GroupPreference = &GroupPreference{}
  if err := p.GroupPreference.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupPreference), err)
  }
  return nil
}

func (p *Group)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _elem131 := &Contact{}
    if err := _elem131.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem131), err)
    }
    p.Members = append(p.Members, _elem131)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  p.Creator = &Contact{}
  if err := p.Creator.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
  }
  return nil
}

func (p *Group)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Invitee =  tSlice
  for i := 0; i < size; i ++ {
    _elem132 := &Contact{}
    if err := _elem132.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem132), err)
    }
    p.Invitee = append(p.Invitee, _elem132)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Group) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Group"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Group) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Group) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Group) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  return err
}

func (p *Group) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pictureStatus: ", p), err) }
  return err
}

func (p *Group) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preventedJoinByTicket", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *Group) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupPreference", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:groupPreference: ", p), err) }
  if err := p.GroupPreference.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupPreference), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:groupPreference: ", p), err) }
  return err
}

func (p *Group) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:members: ", p), err) }
  return err
}

func (p *Group) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRUCT, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:creator: ", p), err) }
  if err := p.Creator.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:creator: ", p), err) }
  return err
}

func (p *Group) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitee", thrift.LIST, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:invitee: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Invitee)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Invitee {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:invitee: ", p), err) }
  return err
}

func (p *Group) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *Group) Equals(other *Group) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Name != other.Name { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.PreventedJoinByTicket != other.PreventedJoinByTicket { return false }
  if !p.GroupPreference.Equals(other.GroupPreference) { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src133 := other.Members[i]
    if !_tgt.Equals(_src133) { return false }
  }
  if !p.Creator.Equals(other.Creator) { return false }
  if len(p.Invitee) != len(other.Invitee) { return false }
  for i, _tgt := range p.Invitee {
    _src134 := other.Invitee[i]
    if !_tgt.Equals(_src134) { return false }
  }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  return true
}

func (p *Group) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - InvitationTicket
//  - FavoriteTimestamp
type GroupPreference struct {
  InvitationTicket string `thrift:"invitationTicket,1" db:"invitationTicket" json:"invitationTicket"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,2" db:"favoriteTimestamp" json:"favoriteTimestamp"`
}

func NewGroupPreference() *GroupPreference {
  return &GroupPreference{}
}


func (p *GroupPreference) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupPreference) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}
func (p *GroupPreference) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupPreference)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupPreference)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *GroupPreference) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupPreference"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupPreference) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitationTicket", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invitationTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invitationTicket: ", p), err) }
  return err
}

func (p *GroupPreference) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTimestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:favoriteTimestamp: ", p), err) }
  return err
}

func (p *GroupPreference) Equals(other *GroupPreference) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.InvitationTicket != other.InvitationTicket { return false }
  if p.FavoriteTimestamp != other.FavoriteTimestamp { return false }
  return true
}

func (p *GroupPreference) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupPreference(%+v)", *p)
}

// Attributes:
//  - RequestToken
//  - ReturnUrl
type RequestTokenResponse struct {
  RequestToken string `thrift:"requestToken,1" db:"requestToken" json:"requestToken"`
  ReturnUrl string `thrift:"returnUrl,2" db:"returnUrl" json:"returnUrl"`
}

func NewRequestTokenResponse() *RequestTokenResponse {
  return &RequestTokenResponse{}
}


func (p *RequestTokenResponse) GetRequestToken() string {
  return p.RequestToken
}

func (p *RequestTokenResponse) GetReturnUrl() string {
  return p.ReturnUrl
}
func (p *RequestTokenResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestTokenResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestToken = v
}
  return nil
}

func (p *RequestTokenResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReturnUrl = v
}
  return nil
}

func (p *RequestTokenResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequestTokenResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestTokenResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RequestToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestToken: ", p), err) }
  return err
}

func (p *RequestTokenResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "returnUrl", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:returnUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnUrl (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:returnUrl: ", p), err) }
  return err
}

func (p *RequestTokenResponse) Equals(other *RequestTokenResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestToken != other.RequestToken { return false }
  if p.ReturnUrl != other.ReturnUrl { return false }
  return true
}

func (p *RequestTokenResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestTokenResponse(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - LastUpdated
type ChannelIdWithLastUpdated struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  LastUpdated int64 `thrift:"lastUpdated,2" db:"lastUpdated" json:"lastUpdated"`
}

func NewChannelIdWithLastUpdated() *ChannelIdWithLastUpdated {
  return &ChannelIdWithLastUpdated{}
}


func (p *ChannelIdWithLastUpdated) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelIdWithLastUpdated) GetLastUpdated() int64 {
  return p.LastUpdated
}
func (p *ChannelIdWithLastUpdated) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelIdWithLastUpdated)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelIdWithLastUpdated)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastUpdated = v
}
  return nil
}

func (p *ChannelIdWithLastUpdated) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelIdWithLastUpdated"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelIdWithLastUpdated) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelIdWithLastUpdated) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastUpdated", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastUpdated: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastUpdated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastUpdated (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastUpdated: ", p), err) }
  return err
}

func (p *ChannelIdWithLastUpdated) Equals(other *ChannelIdWithLastUpdated) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ChannelId != other.ChannelId { return false }
  if p.LastUpdated != other.LastUpdated { return false }
  return true
}

func (p *ChannelIdWithLastUpdated) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelIdWithLastUpdated(%+v)", *p)
}

// Attributes:
//  - ChannelInfos
//  - ChannelDomains
//  - Revision
//  - Expires
type ChannelSyncDatas struct {
  ChannelInfos []*ChannelInfo `thrift:"channelInfos,1" db:"channelInfos" json:"channelInfos"`
  ChannelDomains []*ChannelDomain `thrift:"channelDomains,2" db:"channelDomains" json:"channelDomains"`
  Revision int64 `thrift:"revision,3" db:"revision" json:"revision"`
  Expires int64 `thrift:"expires,4" db:"expires" json:"expires"`
}

func NewChannelSyncDatas() *ChannelSyncDatas {
  return &ChannelSyncDatas{}
}


func (p *ChannelSyncDatas) GetChannelInfos() []*ChannelInfo {
  return p.ChannelInfos
}

func (p *ChannelSyncDatas) GetChannelDomains() []*ChannelDomain {
  return p.ChannelDomains
}

func (p *ChannelSyncDatas) GetRevision() int64 {
  return p.Revision
}

func (p *ChannelSyncDatas) GetExpires() int64 {
  return p.Expires
}
func (p *ChannelSyncDatas) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelSyncDatas)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelInfo, 0, size)
  p.ChannelInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem135 := &ChannelInfo{}
    if err := _elem135.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem135), err)
    }
    p.ChannelInfos = append(p.ChannelInfos, _elem135)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelSyncDatas)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelDomain, 0, size)
  p.ChannelDomains =  tSlice
  for i := 0; i < size; i ++ {
    _elem136 := &ChannelDomain{}
    if err := _elem136.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem136), err)
    }
    p.ChannelDomains = append(p.ChannelDomains, _elem136)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelSyncDatas)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *ChannelSyncDatas)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Expires = v
}
  return nil
}

func (p *ChannelSyncDatas) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelSyncDatas"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelSyncDatas) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelInfos", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelInfos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ChannelInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelInfos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelInfos: ", p), err) }
  return err
}

func (p *ChannelSyncDatas) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelDomains", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelDomains: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ChannelDomains)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelDomains {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelDomains: ", p), err) }
  return err
}

func (p *ChannelSyncDatas) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:revision: ", p), err) }
  return err
}

func (p *ChannelSyncDatas) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expires", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expires: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Expires)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expires (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expires: ", p), err) }
  return err
}

func (p *ChannelSyncDatas) Equals(other *ChannelSyncDatas) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ChannelInfos) != len(other.ChannelInfos) { return false }
  for i, _tgt := range p.ChannelInfos {
    _src137 := other.ChannelInfos[i]
    if !_tgt.Equals(_src137) { return false }
  }
  if len(p.ChannelDomains) != len(other.ChannelDomains) { return false }
  for i, _tgt := range p.ChannelDomains {
    _src138 := other.ChannelDomains[i]
    if !_tgt.Equals(_src138) { return false }
  }
  if p.Revision != other.Revision { return false }
  if p.Expires != other.Expires { return false }
  return true
}

func (p *ChannelSyncDatas) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelSyncDatas(%+v)", *p)
}

type TalkService interface {
  // Parameters:
  //  - LocalRev
  //  - Count
  //  - GlobalRev
  //  - IndividualRev
  FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Profile
  UpdateProfile(ctx context.Context, reqSeq int32, profile *Profile) (_err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  FetchOperations(ctx context.Context, localRev int64, count int32) (_r []*Operation, _err error)
  // Parameters:
  //  - SyncReason
  GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (_r *FriendRequestsInfo, _err error)
  // Parameters:
  //  - Request
  GetChats(ctx context.Context, request *GetChatsRequest) (_r *GetChatsResponse, _err error)
  // Parameters:
  //  - MessageBoxId
  //  - MessagesCount
  GetRecentMessages(ctx context.Context, messageBoxId string, messagesCount int32) (_r []*Message, _err error)
  // Parameters:
  //  - MessageBoxId
  //  - MessagesCount
  GetRecentMessagesV2(ctx context.Context, messageBoxId string, messagesCount int32) (_r []*Message, _err error)
  GetCountryWithRequestIp(ctx context.Context) (_r string, _err error)
  // Parameters:
  //  - ChatRoomMid
  GetChatRoomAnnouncements(ctx context.Context, chatRoomMid string) (_r []*ChatRoomAnnouncement, _err error)
  // Parameters:
  //  - GroupId
  GetGroupWithoutMembers(ctx context.Context, groupId string) (_r *Group, _err error)
  // Parameters:
  //  - GroupId
  GetGroup(ctx context.Context, groupId string) (_r *Group, _err error)
  // Parameters:
  //  - GroupIds
  GetGroups(ctx context.Context, groupIds []string) (_r []*Group, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Flag
  //  - Value
  UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSetting, value string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Group
  UpdateGroup(ctx context.Context, reqSeq int32, group *Group) (_err error)
  // Parameters:
  //  - ID
  GetContact(ctx context.Context, id string) (_r *Contact, _err error)
  // Parameters:
  //  - ChatMid
  GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (_r map[string]*E2EEPublicKey, _err error)
  GetRingtone(ctx context.Context) (_r *Ringtone, _err error)
  // Parameters:
  //  - Mid
  NegotiateE2EEPublicKey(ctx context.Context, mid string) (_r *E2EENegotiationResult_, _err error)
  // Parameters:
  //  - SearchId
  FindContactByUserid(ctx context.Context, searchId string) (_r *Contact, _err error)
  // Parameters:
  //  - Oid
  ClearRingtone(ctx context.Context, oid string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Type
  //  - Target
  //  - Enablement
  SetNotificationsEnabled(ctx context.Context, reqSeq int32, type_a1 MidType, target string, enablement bool) (_err error)
  // Parameters:
  //  - Request
  DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (_r *DeleteOtherFromChatResponse, _err error)
  // Parameters:
  //  - Request
  InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (_r *InviteIntoChatResponse, _err error)
  // Parameters:
  //  - Request
  AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (_r *AcceptChatInvitationByTicketResponse, _err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (_err error)
  // Parameters:
  //  - Request
  DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (_r *DeleteSelfFromChatResponse, _err error)
  // Parameters:
  //  - Request
  FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (_r *FindChatByTicketResponse, _err error)
  // Parameters:
  //  - Request
  CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (_r *CancelChatInvitationResponse, _err error)
  // Parameters:
  //  - Request
  AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (_r *AcceptChatInvitationResponse, _err error)
  // Parameters:
  //  - MessageBoxListRequest
  //  - SyncReason
  GetMessageBoxes(ctx context.Context, messageBoxListRequest *MessageBoxListRequest, syncReason SyncReason) (_r *MessageBoxList, _err error)
  // Parameters:
  //  - Request
  UpdateChat(ctx context.Context, request *UpdateChatRequest) (_r *UpdateChatResponse, _err error)
  // Parameters:
  //  - Request
  ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (_r *ReissueChatTicketResponse, _err error)
  // Parameters:
  //  - Request
  //  - SyncReason
  GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (_r *GetAllChatMidsResponse, _err error)
  // Parameters:
  //  - Request
  RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (_r *RejectChatInvitationResponse, _err error)
  // Parameters:
  //  - Request
  CreateChat(ctx context.Context, request *CreateChatRequest) (_r *CreateChatResponse, _err error)
  // Parameters:
  //  - ChatRoomMids
  //  - SyncReason
  GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (_r map[string][]*ChatRoomAnnouncement, _err error)
  // Parameters:
  //  - Region
  //  - Carrier
  //  - Phone
  //  - UdidHash
  //  - DeviceInfo
  //  - NetworkCode
  //  - Locale
  //  - SimInfo
  StartUpdateVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string, simInfo *SIMInfo) (_r *VerificationSessionData, _err error)
  // Parameters:
  //  - Region
  //  - Carrier
  //  - Phone
  //  - UdidHash
  //  - DeviceInfo
  //  - NetworkCode
  //  - Mid
  //  - Locale
  //  - SimInfo
  //  - OldUdidHash
  StartVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string, simInfo *SIMInfo, oldUdidHash string) (_r *VerificationSessionData, _err error)
  // Parameters:
  //  - SessionId
  //  - Method
  ChangeVerificationMethod(ctx context.Context, sessionId string, method Y30) (_r *VerificationSessionData, _err error)
  GetEncryptedIdentityV3(ctx context.Context) (_r *GetEncryptedIdentityV3Response, _err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - GroupKeyId
  GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (_r *E2EEGroupSharedKey, _err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - Members
  //  - KeyIds
  //  - EncryptedSharedKeys
  RegisterE2EEGroupKey(ctx context.Context, keyVersion int32, chatMid string, members []string, keyIds []int32, encryptedSharedKeys [][]byte) (_r *E2EEGroupSharedKey, _err error)
  // Parameters:
  //  - ExpirationTime
  //  - MaxUseCount
  GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (_r *Ticket, _err error)
  // Parameters:
  //  - ReqSeq
  //  - PublicKey
  RegisterE2EEPublicKey(ctx context.Context, reqSeq int32, publicKey *E2EEPublicKey) (_r *E2EEPublicKey, _err error)
  // Parameters:
  //  - Mid
  //  - KeyVersion
  //  - KeyId
  GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (_r *E2EEPublicKey, _err error)
  // Parameters:
  //  - Provider
  GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (_r *RSAKey, _err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - Region
  //  - UdidHash
  //  - DeviceInfo
  //  - Mid
  //  - MigrationPincodeSessionId
  RegisterWithSnsId(ctx context.Context, snsIdType C60759oi, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (_r *RegisterWithSnsIdResult_, _err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - UdidHash
  //  - MigrationPincodeSessionId
  //  - OldUdidHash
  FindSnsIdUserStatus(ctx context.Context, snsIdType C60759oi, snsAccessToken string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *SnsIdUserStatus, _err error)
  // Parameters:
  //  - ID
  //  - Type
  GetContactRegistration(ctx context.Context, id string, type_a1 ContactType) (_r *ContactRegistration, _err error)
  // Parameters:
  //  - SessionId
  //  - PinCode
  //  - UdidHash
  //  - MigrationPincodeSessionId
  //  - OldUdidHash
  VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *PhoneVerificationResult_, _err error)
  // Parameters:
  //  - FeatureType
  AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (_r string, _err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - IdentityCredential
  //  - Region
  //  - UdidHash
  //  - DeviceInfo
  //  - MigrationPincodeSessionId
  RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType C60759oi, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (_r string, _err error)
  // Parameters:
  //  - Location
  GetShakeEventV1(ctx context.Context, location *Geolocation) (_r string, _err error)
  // Parameters:
  //  - SessionId
  //  - Identifier
  //  - Verifier
  //  - Provider
  //  - MigrationPincodeSessionId
  RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, identifier string, verifier string, provider IdentityProvider, migrationPincodeSessionId string) (_r string, _err error)
  // Parameters:
  //  - Latitude
  //  - Longitude
  //  - Accuracy
  //  - NetworkStatus
  //  - AltitudeMeters
  //  - VelocityMetersPerSecond
  //  - BearingDegrees
  UpdateAndGetNearby(ctx context.Context, latitude float64, longitude float64, accuracy *GeolocationAccuracy, networkStatus *ClientNetworkStatus, altitudeMeters float64, velocityMetersPerSecond float64, bearingDegrees float64) (_r []*NearbyEntry, _err error)
  // Parameters:
  //  - Direction
  //  - LastSeenSeqId
  GetFriendRequests(ctx context.Context, direction Direction, lastSeenSeqId int64) (_r []*FriendRequest, _err error)
  // Parameters:
  //  - Seq
  //  - MessageId
  UnsendMessage(ctx context.Context, seq int32, messageId string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Type
  //  - Reference
  FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactType, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - ReqSeq
  //  - SenderMid
  //  - MessageId
  RequestResendMessage(ctx context.Context, reqSeq int32, senderMid string, messageId string) (_err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ReceiverMid
  //  - OriginalMessageId
  //  - ResendMessage
  //  - ErrorCode
  RespondResendMessage(ctx context.Context, reqSeq int32, receiverMid string, originalMessageId string, resendMessage *Message, errorCode TalkExceptionCode) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  //  - ContactIds
  InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - EncryptedKeyChain
  //  - HashKeyChain
  RespondE2EEKeyExchange(ctx context.Context, reqSeq int32, encryptedKeyChain []byte, hashKeyChain []byte) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - LocalContacts
  SyncContacts(ctx context.Context, reqSeq int32, localContacts []*ContactModification) (_r map[string]*ContactRegistration, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Phones
  //  - Reference
  FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - LastRev
  //  - Badge
  NotifySleep(ctx context.Context, lastRev int64, badge int32) (_err error)
  // Parameters:
  //  - SyncOpRevision
  //  - Profile
  ReportProfile(ctx context.Context, syncOpRevision int64, profile *Profile) (_err error)
  // Parameters:
  //  - LastRev
  //  - DeviceInfo
  //  - UdidHash
  //  - OldUdidHash
  NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (_err error)
  // Parameters:
  //  - SyncOpRevision
  //  - Settings
  ReportSettings(ctx context.Context, syncOpRevision int64, settings *Settings) (_err error)
  // Parameters:
  //  - SyncReason
  GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - Location
  //  - NetworkStatus
  OpenProximityMatch(ctx context.Context, location *Location, networkStatus *ClientNetworkStatus) (_r string, _err error)
  // Parameters:
  //  - Direction
  //  - MidOrEMid
  RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (_err error)
  // Parameters:
  //  - Token
  //  - Type
  UpdateNotificationToken(ctx context.Context, token string, type_a1 UpdateNotificationTokenType) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - ExtendedProfile
  UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (_err error)
  // Parameters:
  //  - IdentityCredential
  //  - MigrationPincodeSessionId
  VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (_r *UserAuthStatus, _err error)
  // Parameters:
  //  - Identifier
  //  - Provider
  //  - Locale
  RequestAccountPasswordReset(ctx context.Context, identifier string, provider IdentityProvider, locale string) (_err error)
  // Parameters:
  //  - Request
  SendPostback(ctx context.Context, request *SendPostbackRequest) (_err error)
  // Parameters:
  //  - MidOrEMid
  //  - Method
  //  - FriendRequestParams
  TryFriendRequest(ctx context.Context, midOrEMid string, method FriendRequestMethod, friendRequestParams string) (_err error)
  // Parameters:
  //  - SessionId
  //  - Ids
  AcceptProximityMatches(ctx context.Context, sessionId string, ids []string) (_err error)
  // Parameters:
  //  - Ids
  GetContacts(ctx context.Context, ids []string) (_r []*Contact, _err error)
  // Parameters:
  //  - BooleanState
  //  - StringState
  ReportDeviceState(ctx context.Context, booleanState map[C59122ec]bool, stringState map[C59430gc]string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockContact(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - SyncReason
  GetExtendedProfile(ctx context.Context, syncReason SyncReason) (_r *ExtendedProfile, _err error)
  // Parameters:
  //  - SyncReason
  GetProfile(ctx context.Context, syncReason SyncReason) (_r *Profile, _err error)
  // Parameters:
  //  - AttributesToRetrieve
  GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []C59756ii) (_r *Settings, _err error)
  // Parameters:
  //  - SessionId
  GetProximityMatchCandidateList(ctx context.Context, sessionId string) (_r *ProximityMatchCandidateResult_, _err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  //  - Reference
  FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (_r *PendingAgreementsResponse, _err error)
  // Parameters:
  //  - ChatIds
  //  - SyncReason
  GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (_r []*TMessageReadRange, _err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  RegisterUserid(ctx context.Context, reqSeq int32, searchId string) (_r bool, _err error)
  // Parameters:
  //  - ReqSeq
  //  - PushRecvReports
  ReportPushRecvReports(ctx context.Context, reqSeq int32, pushRecvReports []*PushRecvReport) (_err error)
  Noop(ctx context.Context) (_err error)
  // Parameters:
  //  - SyncReason
  GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - RemoveFollowerRequest
  RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (_err error)
  // Parameters:
  //  - MigrationSessionId
  VerifyAccountMigration(ctx context.Context, migrationSessionId string) (_err error)
  // Parameters:
  //  - SyncReason
  GetSettings(ctx context.Context, syncReason SyncReason) (_r *Settings, _err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  GetLastE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string) (_r *E2EEGroupSharedKey, _err error)
  GetRingbackTone(ctx context.Context) (_r *RingbackTone, _err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (_err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  //  - Reference
  FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - SyncReason
  GetAllContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - UnfollowRequest
  Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (_err error)
  // Parameters:
  //  - SessionId
  CloseProximityMatch(ctx context.Context, sessionId string) (_err error)
  // Parameters:
  //  - PhoneNumberList
  InviteFriendsBySms(ctx context.Context, phoneNumberList []string) (_err error)
  // Parameters:
  //  - Categories
  GetChatEffectMetaList(ctx context.Context, categories []C58964da) (_r []*ChatEffectMeta, _err error)
  // Parameters:
  //  - Seq
  //  - LastMessageId
  RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  //  - Reference
  UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (_err error)
  GetAnalyticsInfo(ctx context.Context) (_r *AnalyticsInfo, _err error)
  // Parameters:
  //  - SyncReason
  GetRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - UdidHash
  //  - ApplicationTypeWithExtensions
  NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (_err error)
  // Parameters:
  //  - ClientRevision
  WakeUpLongPolling(ctx context.Context, clientRevision int64) (_r bool, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - Seq
  //  - Message
  SendMessage(ctx context.Context, seq int32, message *Message) (_r *Message, _err error)
  // Parameters:
  //  - Text
  SendEchoPush(ctx context.Context, text string) (_err error)
  // Parameters:
  //  - MigrationPincodeSessionId
  //  - AccountMigrationPincode
  VerifyAccountMigrationPincode(ctx context.Context, migrationPincodeSessionId string, accountMigrationPincode string) (_err error)
  // Parameters:
  //  - UdidHash
  //  - ApplicationTypeWithExtensions
  NotifyInstalled(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (_err error)
  // Parameters:
  //  - Verifier
  //  - PinCode
  VerifyQrcode(ctx context.Context, verifier string, pinCode string) (_r string, _err error)
  // Parameters:
  //  - SearchId
  //  - Reference
  FindContactByMetaTag(ctx context.Context, searchId string, reference string) (_r *Contact, _err error)
  // Parameters:
  //  - Phones
  FindContactsByPhone(ctx context.Context, phones []string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - SessionId
  //  - MigrationPincodeSessionId
  RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (_r *RegisterWithPhoneNumberResult_, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - Value
  UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr ProfileAttribute, value string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Request
  UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - AttributesToUpdate
  //  - Settings
  UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributeEx, settings *Settings) (_r []SettingsAttributeEx, _err error)
  // Parameters:
  //  - EMid
  DecryptFollowEMid(ctx context.Context, eMid string) (_r string, _err error)
  // Parameters:
  //  - AccountMigrationPincode
  UpdateAccountMigrationPincode(ctx context.Context, accountMigrationPincode string) (_err error)
  // Parameters:
  //  - SearchId
  IsUseridAvailable(ctx context.Context, searchId string) (_r bool, _err error)
  // Parameters:
  //  - GetFollowersRequest
  GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (_r *GetFollowersResponse, _err error)
  CreateAccountMigrationPincodeSession(ctx context.Context) (_r string, _err error)
  // Parameters:
  //  - SessionId
  ResendPinCode(ctx context.Context, sessionId string) (_err error)
  // Parameters:
  //  - GetFollowingsRequest
  GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (_r *GetFollowingsResponse, _err error)
  GetServerTime(ctx context.Context) (_r int64, _err error)
  GetLastOpRevision(ctx context.Context) (_r int64, _err error)
  // Parameters:
  //  - TicketIdWithTag
  FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (_r *Contact, _err error)
  // Parameters:
  //  - SessionId
  FinishUpdateVerification(ctx context.Context, sessionId string) (_err error)
  // Parameters:
  //  - SessionId
  GetAcceptedProximityMatches(ctx context.Context, sessionId string) (_r []string, _err error)
  ClearRingbackTone(ctx context.Context) (_err error)
  UnregisterUserAndDevice(ctx context.Context) (_r string, _err error)
}

type TalkServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTalkServiceClient(c thrift.TClient) *TalkServiceClient {
  return &TalkServiceClient{
    c: c,
  }
}

func (p *TalkServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TalkServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TalkServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error) {
  var _args139 TalkServiceFetchOpsArgs
  _args139.LocalRev = localRev
  _args139.Count = count
  _args139.GlobalRev = globalRev
  _args139.IndividualRev = individualRev
  var _result141 TalkServiceFetchOpsResult
  var _meta140 thrift.ResponseMeta
  _meta140, _err = p.Client_().Call(ctx, "fetchOps", &_args139, &_result141)
  p.SetLastResponseMeta_(_meta140)
  if _err != nil {
    return
  }
  switch {
  case _result141.E!= nil:
    return _r, _result141.E
  }

  return _result141.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Profile
func (p *TalkServiceClient) UpdateProfile(ctx context.Context, reqSeq int32, profile *Profile) (_err error) {
  var _args142 TalkServiceUpdateProfileArgs
  _args142.ReqSeq = reqSeq
  _args142.Profile = profile
  var _result144 TalkServiceUpdateProfileResult
  var _meta143 thrift.ResponseMeta
  _meta143, _err = p.Client_().Call(ctx, "updateProfile", &_args142, &_result144)
  p.SetLastResponseMeta_(_meta143)
  if _err != nil {
    return
  }
  switch {
  case _result144.E!= nil:
    return _result144.E
  }

  return nil
}

// Parameters:
//  - LocalRev
//  - Count
func (p *TalkServiceClient) FetchOperations(ctx context.Context, localRev int64, count int32) (_r []*Operation, _err error) {
  var _args145 TalkServiceFetchOperationsArgs
  _args145.LocalRev = localRev
  _args145.Count = count
  var _result147 TalkServiceFetchOperationsResult
  var _meta146 thrift.ResponseMeta
  _meta146, _err = p.Client_().Call(ctx, "fetchOperations", &_args145, &_result147)
  p.SetLastResponseMeta_(_meta146)
  if _err != nil {
    return
  }
  switch {
  case _result147.E!= nil:
    return _r, _result147.E
  }

  return _result147.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (_r *FriendRequestsInfo, _err error) {
  var _args148 TalkServiceGetRecentFriendRequestsArgs
  _args148.SyncReason = syncReason
  var _result150 TalkServiceGetRecentFriendRequestsResult
  var _meta149 thrift.ResponseMeta
  _meta149, _err = p.Client_().Call(ctx, "getRecentFriendRequests", &_args148, &_result150)
  p.SetLastResponseMeta_(_meta149)
  if _err != nil {
    return
  }
  switch {
  case _result150.E!= nil:
    return _r, _result150.E
  }

  return _result150.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetChats(ctx context.Context, request *GetChatsRequest) (_r *GetChatsResponse, _err error) {
  var _args151 TalkServiceGetChatsArgs
  _args151.Request = request
  var _result153 TalkServiceGetChatsResult
  var _meta152 thrift.ResponseMeta
  _meta152, _err = p.Client_().Call(ctx, "getChats", &_args151, &_result153)
  p.SetLastResponseMeta_(_meta152)
  if _err != nil {
    return
  }
  switch {
  case _result153.E!= nil:
    return _r, _result153.E
  }

  return _result153.GetSuccess(), nil
}

// Parameters:
//  - MessageBoxId
//  - MessagesCount
func (p *TalkServiceClient) GetRecentMessages(ctx context.Context, messageBoxId string, messagesCount int32) (_r []*Message, _err error) {
  var _args154 TalkServiceGetRecentMessagesArgs
  _args154.MessageBoxId = messageBoxId
  _args154.MessagesCount = messagesCount
  var _result156 TalkServiceGetRecentMessagesResult
  var _meta155 thrift.ResponseMeta
  _meta155, _err = p.Client_().Call(ctx, "getRecentMessages", &_args154, &_result156)
  p.SetLastResponseMeta_(_meta155)
  if _err != nil {
    return
  }
  switch {
  case _result156.E!= nil:
    return _r, _result156.E
  }

  return _result156.GetSuccess(), nil
}

// Parameters:
//  - MessageBoxId
//  - MessagesCount
func (p *TalkServiceClient) GetRecentMessagesV2(ctx context.Context, messageBoxId string, messagesCount int32) (_r []*Message, _err error) {
  var _args157 TalkServiceGetRecentMessagesV2Args
  _args157.MessageBoxId = messageBoxId
  _args157.MessagesCount = messagesCount
  var _result159 TalkServiceGetRecentMessagesV2Result
  var _meta158 thrift.ResponseMeta
  _meta158, _err = p.Client_().Call(ctx, "getRecentMessagesV2", &_args157, &_result159)
  p.SetLastResponseMeta_(_meta158)
  if _err != nil {
    return
  }
  switch {
  case _result159.E!= nil:
    return _r, _result159.E
  }

  return _result159.GetSuccess(), nil
}

func (p *TalkServiceClient) GetCountryWithRequestIp(ctx context.Context) (_r string, _err error) {
  var _args160 TalkServiceGetCountryWithRequestIpArgs
  var _result162 TalkServiceGetCountryWithRequestIpResult
  var _meta161 thrift.ResponseMeta
  _meta161, _err = p.Client_().Call(ctx, "getCountryWithRequestIp", &_args160, &_result162)
  p.SetLastResponseMeta_(_meta161)
  if _err != nil {
    return
  }
  switch {
  case _result162.E!= nil:
    return _r, _result162.E
  }

  return _result162.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMid
func (p *TalkServiceClient) GetChatRoomAnnouncements(ctx context.Context, chatRoomMid string) (_r []*ChatRoomAnnouncement, _err error) {
  var _args163 TalkServiceGetChatRoomAnnouncementsArgs
  _args163.ChatRoomMid = chatRoomMid
  var _result165 TalkServiceGetChatRoomAnnouncementsResult
  var _meta164 thrift.ResponseMeta
  _meta164, _err = p.Client_().Call(ctx, "getChatRoomAnnouncements", &_args163, &_result165)
  p.SetLastResponseMeta_(_meta164)
  if _err != nil {
    return
  }
  switch {
  case _result165.E!= nil:
    return _r, _result165.E
  }

  return _result165.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroupWithoutMembers(ctx context.Context, groupId string) (_r *Group, _err error) {
  var _args166 TalkServiceGetGroupWithoutMembersArgs
  _args166.GroupId = groupId
  var _result168 TalkServiceGetGroupWithoutMembersResult
  var _meta167 thrift.ResponseMeta
  _meta167, _err = p.Client_().Call(ctx, "getGroupWithoutMembers", &_args166, &_result168)
  p.SetLastResponseMeta_(_meta167)
  if _err != nil {
    return
  }
  switch {
  case _result168.E!= nil:
    return _r, _result168.E
  }

  return _result168.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroup(ctx context.Context, groupId string) (_r *Group, _err error) {
  var _args169 TalkServiceGetGroupArgs
  _args169.GroupId = groupId
  var _result171 TalkServiceGetGroupResult
  var _meta170 thrift.ResponseMeta
  _meta170, _err = p.Client_().Call(ctx, "getGroup", &_args169, &_result171)
  p.SetLastResponseMeta_(_meta170)
  if _err != nil {
    return
  }
  switch {
  case _result171.E!= nil:
    return _r, _result171.E
  }

  return _result171.GetSuccess(), nil
}

// Parameters:
//  - GroupIds
func (p *TalkServiceClient) GetGroups(ctx context.Context, groupIds []string) (_r []*Group, _err error) {
  var _args172 TalkServiceGetGroupsArgs
  _args172.GroupIds = groupIds
  var _result174 TalkServiceGetGroupsResult
  var _meta173 thrift.ResponseMeta
  _meta173, _err = p.Client_().Call(ctx, "getGroups", &_args172, &_result174)
  p.SetLastResponseMeta_(_meta173)
  if _err != nil {
    return
  }
  switch {
  case _result174.E!= nil:
    return _r, _result174.E
  }

  return _result174.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSetting, value string) (_err error) {
  var _args175 TalkServiceUpdateContactSettingArgs
  _args175.ReqSeq = reqSeq
  _args175.Mid = mid
  _args175.Flag = flag
  _args175.Value = value
  var _result177 TalkServiceUpdateContactSettingResult
  var _meta176 thrift.ResponseMeta
  _meta176, _err = p.Client_().Call(ctx, "updateContactSetting", &_args175, &_result177)
  p.SetLastResponseMeta_(_meta176)
  if _err != nil {
    return
  }
  switch {
  case _result177.E!= nil:
    return _result177.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Group
func (p *TalkServiceClient) UpdateGroup(ctx context.Context, reqSeq int32, group *Group) (_err error) {
  var _args178 TalkServiceUpdateGroupArgs
  _args178.ReqSeq = reqSeq
  _args178.Group = group
  var _result180 TalkServiceUpdateGroupResult
  var _meta179 thrift.ResponseMeta
  _meta179, _err = p.Client_().Call(ctx, "updateGroup", &_args178, &_result180)
  p.SetLastResponseMeta_(_meta179)
  if _err != nil {
    return
  }
  switch {
  case _result180.E!= nil:
    return _result180.E
  }

  return nil
}

// Parameters:
//  - ID
func (p *TalkServiceClient) GetContact(ctx context.Context, id string) (_r *Contact, _err error) {
  var _args181 TalkServiceGetContactArgs
  _args181.ID = id
  var _result183 TalkServiceGetContactResult
  var _meta182 thrift.ResponseMeta
  _meta182, _err = p.Client_().Call(ctx, "getContact", &_args181, &_result183)
  p.SetLastResponseMeta_(_meta182)
  if _err != nil {
    return
  }
  switch {
  case _result183.E!= nil:
    return _r, _result183.E
  }

  return _result183.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (_r map[string]*E2EEPublicKey, _err error) {
  var _args184 TalkServiceGetLastE2EEPublicKeysArgs
  _args184.ChatMid = chatMid
  var _result186 TalkServiceGetLastE2EEPublicKeysResult
  var _meta185 thrift.ResponseMeta
  _meta185, _err = p.Client_().Call(ctx, "getLastE2EEPublicKeys", &_args184, &_result186)
  p.SetLastResponseMeta_(_meta185)
  if _err != nil {
    return
  }
  switch {
  case _result186.E!= nil:
    return _r, _result186.E
  }

  return _result186.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingtone(ctx context.Context) (_r *Ringtone, _err error) {
  var _args187 TalkServiceGetRingtoneArgs
  var _result189 TalkServiceGetRingtoneResult
  var _meta188 thrift.ResponseMeta
  _meta188, _err = p.Client_().Call(ctx, "getRingtone", &_args187, &_result189)
  p.SetLastResponseMeta_(_meta188)
  if _err != nil {
    return
  }
  switch {
  case _result189.E!= nil:
    return _r, _result189.E
  }

  return _result189.GetSuccess(), nil
}

// Parameters:
//  - Mid
func (p *TalkServiceClient) NegotiateE2EEPublicKey(ctx context.Context, mid string) (_r *E2EENegotiationResult_, _err error) {
  var _args190 TalkServiceNegotiateE2EEPublicKeyArgs
  _args190.Mid = mid
  var _result192 TalkServiceNegotiateE2EEPublicKeyResult
  var _meta191 thrift.ResponseMeta
  _meta191, _err = p.Client_().Call(ctx, "negotiateE2EEPublicKey", &_args190, &_result192)
  p.SetLastResponseMeta_(_meta191)
  if _err != nil {
    return
  }
  switch {
  case _result192.E!= nil:
    return _r, _result192.E
  }

  return _result192.GetSuccess(), nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) FindContactByUserid(ctx context.Context, searchId string) (_r *Contact, _err error) {
  var _args193 TalkServiceFindContactByUseridArgs
  _args193.SearchId = searchId
  var _result195 TalkServiceFindContactByUseridResult
  var _meta194 thrift.ResponseMeta
  _meta194, _err = p.Client_().Call(ctx, "findContactByUserid", &_args193, &_result195)
  p.SetLastResponseMeta_(_meta194)
  if _err != nil {
    return
  }
  switch {
  case _result195.E!= nil:
    return _r, _result195.E
  }

  return _result195.GetSuccess(), nil
}

// Parameters:
//  - Oid
func (p *TalkServiceClient) ClearRingtone(ctx context.Context, oid string) (_err error) {
  var _args196 TalkServiceClearRingtoneArgs
  _args196.Oid = oid
  var _result198 TalkServiceClearRingtoneResult
  var _meta197 thrift.ResponseMeta
  _meta197, _err = p.Client_().Call(ctx, "clearRingtone", &_args196, &_result198)
  p.SetLastResponseMeta_(_meta197)
  if _err != nil {
    return
  }
  switch {
  case _result198.E!= nil:
    return _result198.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Type
//  - Target
//  - Enablement
func (p *TalkServiceClient) SetNotificationsEnabled(ctx context.Context, reqSeq int32, type_a1 MidType, target string, enablement bool) (_err error) {
  var _args199 TalkServiceSetNotificationsEnabledArgs
  _args199.ReqSeq = reqSeq
  _args199.Type = type_a1
  _args199.Target = target
  _args199.Enablement = enablement
  var _result201 TalkServiceSetNotificationsEnabledResult
  var _meta200 thrift.ResponseMeta
  _meta200, _err = p.Client_().Call(ctx, "setNotificationsEnabled", &_args199, &_result201)
  p.SetLastResponseMeta_(_meta200)
  if _err != nil {
    return
  }
  switch {
  case _result201.E!= nil:
    return _result201.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (_r *DeleteOtherFromChatResponse, _err error) {
  var _args202 TalkServiceDeleteOtherFromChatArgs
  _args202.Request = request
  var _result204 TalkServiceDeleteOtherFromChatResult
  var _meta203 thrift.ResponseMeta
  _meta203, _err = p.Client_().Call(ctx, "deleteOtherFromChat", &_args202, &_result204)
  p.SetLastResponseMeta_(_meta203)
  if _err != nil {
    return
  }
  switch {
  case _result204.E!= nil:
    return _r, _result204.E
  }

  return _result204.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (_r *InviteIntoChatResponse, _err error) {
  var _args205 TalkServiceInviteIntoChatArgs
  _args205.Request = request
  var _result207 TalkServiceInviteIntoChatResult
  var _meta206 thrift.ResponseMeta
  _meta206, _err = p.Client_().Call(ctx, "inviteIntoChat", &_args205, &_result207)
  p.SetLastResponseMeta_(_meta206)
  if _err != nil {
    return
  }
  switch {
  case _result207.E!= nil:
    return _r, _result207.E
  }

  return _result207.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (_r *AcceptChatInvitationByTicketResponse, _err error) {
  var _args208 TalkServiceAcceptChatInvitationByTicketArgs
  _args208.Request = request
  var _result210 TalkServiceAcceptChatInvitationByTicketResult
  var _meta209 thrift.ResponseMeta
  _meta209, _err = p.Client_().Call(ctx, "acceptChatInvitationByTicket", &_args208, &_result210)
  p.SetLastResponseMeta_(_meta209)
  if _err != nil {
    return
  }
  switch {
  case _result210.E!= nil:
    return _r, _result210.E
  }

  return _result210.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (_err error) {
  var _args211 TalkServiceAcceptGroupInvitationArgs
  _args211.ReqSeq = reqSeq
  _args211.GroupId = groupId
  var _result213 TalkServiceAcceptGroupInvitationResult
  var _meta212 thrift.ResponseMeta
  _meta212, _err = p.Client_().Call(ctx, "acceptGroupInvitation", &_args211, &_result213)
  p.SetLastResponseMeta_(_meta212)
  if _err != nil {
    return
  }
  switch {
  case _result213.E!= nil:
    return _result213.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (_r *DeleteSelfFromChatResponse, _err error) {
  var _args214 TalkServiceDeleteSelfFromChatArgs
  _args214.Request = request
  var _result216 TalkServiceDeleteSelfFromChatResult
  var _meta215 thrift.ResponseMeta
  _meta215, _err = p.Client_().Call(ctx, "deleteSelfFromChat", &_args214, &_result216)
  p.SetLastResponseMeta_(_meta215)
  if _err != nil {
    return
  }
  switch {
  case _result216.E!= nil:
    return _r, _result216.E
  }

  return _result216.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (_r *FindChatByTicketResponse, _err error) {
  var _args217 TalkServiceFindChatByTicketArgs
  _args217.Request = request
  var _result219 TalkServiceFindChatByTicketResult
  var _meta218 thrift.ResponseMeta
  _meta218, _err = p.Client_().Call(ctx, "findChatByTicket", &_args217, &_result219)
  p.SetLastResponseMeta_(_meta218)
  if _err != nil {
    return
  }
  switch {
  case _result219.E!= nil:
    return _r, _result219.E
  }

  return _result219.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (_r *CancelChatInvitationResponse, _err error) {
  var _args220 TalkServiceCancelChatInvitationArgs
  _args220.Request = request
  var _result222 TalkServiceCancelChatInvitationResult
  var _meta221 thrift.ResponseMeta
  _meta221, _err = p.Client_().Call(ctx, "cancelChatInvitation", &_args220, &_result222)
  p.SetLastResponseMeta_(_meta221)
  if _err != nil {
    return
  }
  switch {
  case _result222.E!= nil:
    return _r, _result222.E
  }

  return _result222.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (_r *AcceptChatInvitationResponse, _err error) {
  var _args223 TalkServiceAcceptChatInvitationArgs
  _args223.Request = request
  var _result225 TalkServiceAcceptChatInvitationResult
  var _meta224 thrift.ResponseMeta
  _meta224, _err = p.Client_().Call(ctx, "acceptChatInvitation", &_args223, &_result225)
  p.SetLastResponseMeta_(_meta224)
  if _err != nil {
    return
  }
  switch {
  case _result225.E!= nil:
    return _r, _result225.E
  }

  return _result225.GetSuccess(), nil
}

// Parameters:
//  - MessageBoxListRequest
//  - SyncReason
func (p *TalkServiceClient) GetMessageBoxes(ctx context.Context, messageBoxListRequest *MessageBoxListRequest, syncReason SyncReason) (_r *MessageBoxList, _err error) {
  var _args226 TalkServiceGetMessageBoxesArgs
  _args226.MessageBoxListRequest = messageBoxListRequest
  _args226.SyncReason = syncReason
  var _result228 TalkServiceGetMessageBoxesResult
  var _meta227 thrift.ResponseMeta
  _meta227, _err = p.Client_().Call(ctx, "getMessageBoxes", &_args226, &_result228)
  p.SetLastResponseMeta_(_meta227)
  if _err != nil {
    return
  }
  switch {
  case _result228.E!= nil:
    return _r, _result228.E
  }

  return _result228.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) UpdateChat(ctx context.Context, request *UpdateChatRequest) (_r *UpdateChatResponse, _err error) {
  var _args229 TalkServiceUpdateChatArgs
  _args229.Request = request
  var _result231 TalkServiceUpdateChatResult
  var _meta230 thrift.ResponseMeta
  _meta230, _err = p.Client_().Call(ctx, "updateChat", &_args229, &_result231)
  p.SetLastResponseMeta_(_meta230)
  if _err != nil {
    return
  }
  switch {
  case _result231.E!= nil:
    return _r, _result231.E
  }

  return _result231.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (_r *ReissueChatTicketResponse, _err error) {
  var _args232 TalkServiceReissueChatTicketArgs
  _args232.Request = request
  var _result234 TalkServiceReissueChatTicketResult
  var _meta233 thrift.ResponseMeta
  _meta233, _err = p.Client_().Call(ctx, "reissueChatTicket", &_args232, &_result234)
  p.SetLastResponseMeta_(_meta233)
  if _err != nil {
    return
  }
  switch {
  case _result234.E!= nil:
    return _r, _result234.E
  }

  return _result234.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (_r *GetAllChatMidsResponse, _err error) {
  var _args235 TalkServiceGetAllChatMidsArgs
  _args235.Request = request
  _args235.SyncReason = syncReason
  var _result237 TalkServiceGetAllChatMidsResult
  var _meta236 thrift.ResponseMeta
  _meta236, _err = p.Client_().Call(ctx, "getAllChatMids", &_args235, &_result237)
  p.SetLastResponseMeta_(_meta236)
  if _err != nil {
    return
  }
  switch {
  case _result237.E!= nil:
    return _r, _result237.E
  }

  return _result237.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (_r *RejectChatInvitationResponse, _err error) {
  var _args238 TalkServiceRejectChatInvitationArgs
  _args238.Request = request
  var _result240 TalkServiceRejectChatInvitationResult
  var _meta239 thrift.ResponseMeta
  _meta239, _err = p.Client_().Call(ctx, "rejectChatInvitation", &_args238, &_result240)
  p.SetLastResponseMeta_(_meta239)
  if _err != nil {
    return
  }
  switch {
  case _result240.E!= nil:
    return _r, _result240.E
  }

  return _result240.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CreateChat(ctx context.Context, request *CreateChatRequest) (_r *CreateChatResponse, _err error) {
  var _args241 TalkServiceCreateChatArgs
  _args241.Request = request
  var _result243 TalkServiceCreateChatResult
  var _meta242 thrift.ResponseMeta
  _meta242, _err = p.Client_().Call(ctx, "createChat", &_args241, &_result243)
  p.SetLastResponseMeta_(_meta242)
  if _err != nil {
    return
  }
  switch {
  case _result243.E!= nil:
    return _r, _result243.E
  }

  return _result243.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
//  - SyncReason
func (p *TalkServiceClient) GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (_r map[string][]*ChatRoomAnnouncement, _err error) {
  var _args244 TalkServiceGetChatRoomAnnouncementsBulkArgs
  _args244.ChatRoomMids = chatRoomMids
  _args244.SyncReason = syncReason
  var _result246 TalkServiceGetChatRoomAnnouncementsBulkResult
  var _meta245 thrift.ResponseMeta
  _meta245, _err = p.Client_().Call(ctx, "getChatRoomAnnouncementsBulk", &_args244, &_result246)
  p.SetLastResponseMeta_(_meta245)
  if _err != nil {
    return
  }
  switch {
  case _result246.E!= nil:
    return _r, _result246.E
  }

  return _result246.GetSuccess(), nil
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
//  - SimInfo
func (p *TalkServiceClient) StartUpdateVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string, simInfo *SIMInfo) (_r *VerificationSessionData, _err error) {
  var _args247 TalkServiceStartUpdateVerificationArgs
  _args247.Region = region
  _args247.Carrier = carrier
  _args247.Phone = phone
  _args247.UdidHash = udidHash
  _args247.DeviceInfo = deviceInfo
  _args247.NetworkCode = networkCode
  _args247.Locale = locale
  _args247.SimInfo = simInfo
  var _result249 TalkServiceStartUpdateVerificationResult
  var _meta248 thrift.ResponseMeta
  _meta248, _err = p.Client_().Call(ctx, "startUpdateVerification", &_args247, &_result249)
  p.SetLastResponseMeta_(_meta248)
  if _err != nil {
    return
  }
  switch {
  case _result249.E!= nil:
    return _r, _result249.E
  }

  return _result249.GetSuccess(), nil
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Mid
//  - Locale
//  - SimInfo
//  - OldUdidHash
func (p *TalkServiceClient) StartVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string, simInfo *SIMInfo, oldUdidHash string) (_r *VerificationSessionData, _err error) {
  var _args250 TalkServiceStartVerificationArgs
  _args250.Region = region
  _args250.Carrier = carrier
  _args250.Phone = phone
  _args250.UdidHash = udidHash
  _args250.DeviceInfo = deviceInfo
  _args250.NetworkCode = networkCode
  _args250.Mid = mid
  _args250.Locale = locale
  _args250.SimInfo = simInfo
  _args250.OldUdidHash = oldUdidHash
  var _result252 TalkServiceStartVerificationResult
  var _meta251 thrift.ResponseMeta
  _meta251, _err = p.Client_().Call(ctx, "startVerification", &_args250, &_result252)
  p.SetLastResponseMeta_(_meta251)
  if _err != nil {
    return
  }
  switch {
  case _result252.E!= nil:
    return _r, _result252.E
  }

  return _result252.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Method
func (p *TalkServiceClient) ChangeVerificationMethod(ctx context.Context, sessionId string, method Y30) (_r *VerificationSessionData, _err error) {
  var _args253 TalkServiceChangeVerificationMethodArgs
  _args253.SessionId = sessionId
  _args253.Method = method
  var _result255 TalkServiceChangeVerificationMethodResult
  var _meta254 thrift.ResponseMeta
  _meta254, _err = p.Client_().Call(ctx, "changeVerificationMethod", &_args253, &_result255)
  p.SetLastResponseMeta_(_meta254)
  if _err != nil {
    return
  }
  switch {
  case _result255.E!= nil:
    return _r, _result255.E
  }

  return _result255.GetSuccess(), nil
}

func (p *TalkServiceClient) GetEncryptedIdentityV3(ctx context.Context) (_r *GetEncryptedIdentityV3Response, _err error) {
  var _args256 TalkServiceGetEncryptedIdentityV3Args
  var _result258 TalkServiceGetEncryptedIdentityV3Result
  var _meta257 thrift.ResponseMeta
  _meta257, _err = p.Client_().Call(ctx, "getEncryptedIdentityV3", &_args256, &_result258)
  p.SetLastResponseMeta_(_meta257)
  if _err != nil {
    return
  }
  switch {
  case _result258.E!= nil:
    return _r, _result258.E
  }

  return _result258.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
func (p *TalkServiceClient) GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (_r *E2EEGroupSharedKey, _err error) {
  var _args259 TalkServiceGetE2EEGroupSharedKeyArgs
  _args259.KeyVersion = keyVersion
  _args259.ChatMid = chatMid
  _args259.GroupKeyId = groupKeyId
  var _result261 TalkServiceGetE2EEGroupSharedKeyResult
  var _meta260 thrift.ResponseMeta
  _meta260, _err = p.Client_().Call(ctx, "getE2EEGroupSharedKey", &_args259, &_result261)
  p.SetLastResponseMeta_(_meta260)
  if _err != nil {
    return
  }
  switch {
  case _result261.E!= nil:
    return _r, _result261.E
  }

  return _result261.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - Members
//  - KeyIds
//  - EncryptedSharedKeys
func (p *TalkServiceClient) RegisterE2EEGroupKey(ctx context.Context, keyVersion int32, chatMid string, members []string, keyIds []int32, encryptedSharedKeys [][]byte) (_r *E2EEGroupSharedKey, _err error) {
  var _args262 TalkServiceRegisterE2EEGroupKeyArgs
  _args262.KeyVersion = keyVersion
  _args262.ChatMid = chatMid
  _args262.Members = members
  _args262.KeyIds = keyIds
  _args262.EncryptedSharedKeys = encryptedSharedKeys
  var _result264 TalkServiceRegisterE2EEGroupKeyResult
  var _meta263 thrift.ResponseMeta
  _meta263, _err = p.Client_().Call(ctx, "registerE2EEGroupKey", &_args262, &_result264)
  p.SetLastResponseMeta_(_meta263)
  if _err != nil {
    return
  }
  switch {
  case _result264.E!= nil:
    return _r, _result264.E
  }

  return _result264.GetSuccess(), nil
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (_r *Ticket, _err error) {
  var _args265 TalkServiceGenerateUserTicketArgs
  _args265.ExpirationTime = expirationTime
  _args265.MaxUseCount = maxUseCount
  var _result267 TalkServiceGenerateUserTicketResult
  var _meta266 thrift.ResponseMeta
  _meta266, _err = p.Client_().Call(ctx, "generateUserTicket", &_args265, &_result267)
  p.SetLastResponseMeta_(_meta266)
  if _err != nil {
    return
  }
  switch {
  case _result267.E!= nil:
    return _r, _result267.E
  }

  return _result267.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - PublicKey
func (p *TalkServiceClient) RegisterE2EEPublicKey(ctx context.Context, reqSeq int32, publicKey *E2EEPublicKey) (_r *E2EEPublicKey, _err error) {
  var _args268 TalkServiceRegisterE2EEPublicKeyArgs
  _args268.ReqSeq = reqSeq
  _args268.PublicKey = publicKey
  var _result270 TalkServiceRegisterE2EEPublicKeyResult
  var _meta269 thrift.ResponseMeta
  _meta269, _err = p.Client_().Call(ctx, "registerE2EEPublicKey", &_args268, &_result270)
  p.SetLastResponseMeta_(_meta269)
  if _err != nil {
    return
  }
  switch {
  case _result270.E!= nil:
    return _r, _result270.E
  }

  return _result270.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - KeyVersion
//  - KeyId
func (p *TalkServiceClient) GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (_r *E2EEPublicKey, _err error) {
  var _args271 TalkServiceGetE2EEPublicKeyArgs
  _args271.Mid = mid
  _args271.KeyVersion = keyVersion
  _args271.KeyId = keyId
  var _result273 TalkServiceGetE2EEPublicKeyResult
  var _meta272 thrift.ResponseMeta
  _meta272, _err = p.Client_().Call(ctx, "getE2EEPublicKey", &_args271, &_result273)
  p.SetLastResponseMeta_(_meta272)
  if _err != nil {
    return
  }
  switch {
  case _result273.E!= nil:
    return _r, _result273.E
  }

  return _result273.GetSuccess(), nil
}

// Parameters:
//  - Provider
func (p *TalkServiceClient) GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (_r *RSAKey, _err error) {
  var _args274 TalkServiceGetRSAKeyInfoArgs
  _args274.Provider = provider
  var _result276 TalkServiceGetRSAKeyInfoResult
  var _meta275 thrift.ResponseMeta
  _meta275, _err = p.Client_().Call(ctx, "getRSAKeyInfo", &_args274, &_result276)
  p.SetLastResponseMeta_(_meta275)
  if _err != nil {
    return
  }
  switch {
  case _result276.E!= nil:
    return _r, _result276.E
  }

  return _result276.GetSuccess(), nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsId(ctx context.Context, snsIdType C60759oi, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (_r *RegisterWithSnsIdResult_, _err error) {
  var _args277 TalkServiceRegisterWithSnsIdArgs
  _args277.SnsIdType = snsIdType
  _args277.SnsAccessToken = snsAccessToken
  _args277.Region = region
  _args277.UdidHash = udidHash
  _args277.DeviceInfo = deviceInfo
  _args277.Mid = mid
  _args277.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result279 TalkServiceRegisterWithSnsIdResult
  var _meta278 thrift.ResponseMeta
  _meta278, _err = p.Client_().Call(ctx, "registerWithSnsId", &_args277, &_result279)
  p.SetLastResponseMeta_(_meta278)
  if _err != nil {
    return
  }
  switch {
  case _result279.E!= nil:
    return _r, _result279.E
  }

  return _result279.GetSuccess(), nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) FindSnsIdUserStatus(ctx context.Context, snsIdType C60759oi, snsAccessToken string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *SnsIdUserStatus, _err error) {
  var _args280 TalkServiceFindSnsIdUserStatusArgs
  _args280.SnsIdType = snsIdType
  _args280.SnsAccessToken = snsAccessToken
  _args280.UdidHash = udidHash
  _args280.MigrationPincodeSessionId = migrationPincodeSessionId
  _args280.OldUdidHash = oldUdidHash
  var _result282 TalkServiceFindSnsIdUserStatusResult
  var _meta281 thrift.ResponseMeta
  _meta281, _err = p.Client_().Call(ctx, "findSnsIdUserStatus", &_args280, &_result282)
  p.SetLastResponseMeta_(_meta281)
  if _err != nil {
    return
  }
  switch {
  case _result282.E!= nil:
    return _r, _result282.E
  }

  return _result282.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Type
func (p *TalkServiceClient) GetContactRegistration(ctx context.Context, id string, type_a1 ContactType) (_r *ContactRegistration, _err error) {
  var _args283 TalkServiceGetContactRegistrationArgs
  _args283.ID = id
  _args283.Type = type_a1
  var _result285 TalkServiceGetContactRegistrationResult
  var _meta284 thrift.ResponseMeta
  _meta284, _err = p.Client_().Call(ctx, "getContactRegistration", &_args283, &_result285)
  p.SetLastResponseMeta_(_meta284)
  if _err != nil {
    return
  }
  switch {
  case _result285.E!= nil:
    return _r, _result285.E
  }

  return _result285.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *PhoneVerificationResult_, _err error) {
  var _args286 TalkServiceVerifyPhoneNumberArgs
  _args286.SessionId = sessionId
  _args286.PinCode = pinCode
  _args286.UdidHash = udidHash
  _args286.MigrationPincodeSessionId = migrationPincodeSessionId
  _args286.OldUdidHash = oldUdidHash
  var _result288 TalkServiceVerifyPhoneNumberResult
  var _meta287 thrift.ResponseMeta
  _meta287, _err = p.Client_().Call(ctx, "verifyPhoneNumber", &_args286, &_result288)
  p.SetLastResponseMeta_(_meta287)
  if _err != nil {
    return
  }
  switch {
  case _result288.E!= nil:
    return _r, _result288.E
  }

  return _result288.GetSuccess(), nil
}

// Parameters:
//  - FeatureType
func (p *TalkServiceClient) AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (_r string, _err error) {
  var _args289 TalkServiceAcquireEncryptedAccessTokenArgs
  _args289.FeatureType = featureType
  var _result291 TalkServiceAcquireEncryptedAccessTokenResult
  var _meta290 thrift.ResponseMeta
  _meta290, _err = p.Client_().Call(ctx, "acquireEncryptedAccessToken", &_args289, &_result291)
  p.SetLastResponseMeta_(_meta290)
  if _err != nil {
    return
  }
  switch {
  case _result291.E!= nil:
    return _r, _result291.E
  }

  return _result291.GetSuccess(), nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType C60759oi, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (_r string, _err error) {
  var _args292 TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs
  _args292.SnsIdType = snsIdType
  _args292.SnsAccessToken = snsAccessToken
  _args292.IdentityCredential = identityCredential
  _args292.Region = region
  _args292.UdidHash = udidHash
  _args292.DeviceInfo = deviceInfo
  _args292.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result294 TalkServiceRegisterWithSnsIdAndIdentityCredentialResult
  var _meta293 thrift.ResponseMeta
  _meta293, _err = p.Client_().Call(ctx, "registerWithSnsIdAndIdentityCredential", &_args292, &_result294)
  p.SetLastResponseMeta_(_meta293)
  if _err != nil {
    return
  }
  switch {
  case _result294.E!= nil:
    return _r, _result294.E
  }

  return _result294.GetSuccess(), nil
}

// Parameters:
//  - Location
func (p *TalkServiceClient) GetShakeEventV1(ctx context.Context, location *Geolocation) (_r string, _err error) {
  var _args295 TalkServiceGetShakeEventV1Args
  _args295.Location = location
  var _result297 TalkServiceGetShakeEventV1Result
  var _meta296 thrift.ResponseMeta
  _meta296, _err = p.Client_().Call(ctx, "getShakeEventV1", &_args295, &_result297)
  p.SetLastResponseMeta_(_meta296)
  if _err != nil {
    return
  }
  switch {
  case _result297.E!= nil:
    return _r, _result297.E
  }

  return _result297.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Identifier
//  - Verifier
//  - Provider
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, identifier string, verifier string, provider IdentityProvider, migrationPincodeSessionId string) (_r string, _err error) {
  var _args298 TalkServiceRegisterDeviceWithIdentityCredentialArgs
  _args298.SessionId = sessionId
  _args298.Identifier = identifier
  _args298.Verifier = verifier
  _args298.Provider = provider
  _args298.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result300 TalkServiceRegisterDeviceWithIdentityCredentialResult
  var _meta299 thrift.ResponseMeta
  _meta299, _err = p.Client_().Call(ctx, "registerDeviceWithIdentityCredential", &_args298, &_result300)
  p.SetLastResponseMeta_(_meta299)
  if _err != nil {
    return
  }
  switch {
  case _result300.E!= nil:
    return _r, _result300.E
  }

  return _result300.GetSuccess(), nil
}

// Parameters:
//  - Latitude
//  - Longitude
//  - Accuracy
//  - NetworkStatus
//  - AltitudeMeters
//  - VelocityMetersPerSecond
//  - BearingDegrees
func (p *TalkServiceClient) UpdateAndGetNearby(ctx context.Context, latitude float64, longitude float64, accuracy *GeolocationAccuracy, networkStatus *ClientNetworkStatus, altitudeMeters float64, velocityMetersPerSecond float64, bearingDegrees float64) (_r []*NearbyEntry, _err error) {
  var _args301 TalkServiceUpdateAndGetNearbyArgs
  _args301.Latitude = latitude
  _args301.Longitude = longitude
  _args301.Accuracy = accuracy
  _args301.NetworkStatus = networkStatus
  _args301.AltitudeMeters = altitudeMeters
  _args301.VelocityMetersPerSecond = velocityMetersPerSecond
  _args301.BearingDegrees = bearingDegrees
  var _result303 TalkServiceUpdateAndGetNearbyResult
  var _meta302 thrift.ResponseMeta
  _meta302, _err = p.Client_().Call(ctx, "updateAndGetNearby", &_args301, &_result303)
  p.SetLastResponseMeta_(_meta302)
  if _err != nil {
    return
  }
  switch {
  case _result303.E!= nil:
    return _r, _result303.E
  }

  return _result303.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - LastSeenSeqId
func (p *TalkServiceClient) GetFriendRequests(ctx context.Context, direction Direction, lastSeenSeqId int64) (_r []*FriendRequest, _err error) {
  var _args304 TalkServiceGetFriendRequestsArgs
  _args304.Direction = direction
  _args304.LastSeenSeqId = lastSeenSeqId
  var _result306 TalkServiceGetFriendRequestsResult
  var _meta305 thrift.ResponseMeta
  _meta305, _err = p.Client_().Call(ctx, "getFriendRequests", &_args304, &_result306)
  p.SetLastResponseMeta_(_meta305)
  if _err != nil {
    return
  }
  switch {
  case _result306.E!= nil:
    return _r, _result306.E
  }

  return _result306.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - MessageId
func (p *TalkServiceClient) UnsendMessage(ctx context.Context, seq int32, messageId string) (_err error) {
  var _args307 TalkServiceUnsendMessageArgs
  _args307.Seq = seq
  _args307.MessageId = messageId
  var _result309 TalkServiceUnsendMessageResult
  var _meta308 thrift.ResponseMeta
  _meta308, _err = p.Client_().Call(ctx, "unsendMessage", &_args307, &_result309)
  p.SetLastResponseMeta_(_meta308)
  if _err != nil {
    return
  }
  switch {
  case _result309.E!= nil:
    return _result309.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args310 TalkServiceBlockRecommendationArgs
  _args310.ReqSeq = reqSeq
  _args310.ID = id
  var _result312 TalkServiceBlockRecommendationResult
  var _meta311 thrift.ResponseMeta
  _meta311, _err = p.Client_().Call(ctx, "blockRecommendation", &_args310, &_result312)
  p.SetLastResponseMeta_(_meta311)
  if _err != nil {
    return
  }
  switch {
  case _result312.E!= nil:
    return _result312.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactType, reference string) (_r map[string]*Contact, _err error) {
  var _args313 TalkServiceFindAndAddContactsByMidArgs
  _args313.ReqSeq = reqSeq
  _args313.Mid = mid
  _args313.Type = type_a1
  _args313.Reference = reference
  var _result315 TalkServiceFindAndAddContactsByMidResult
  var _meta314 thrift.ResponseMeta
  _meta314, _err = p.Client_().Call(ctx, "findAndAddContactsByMid", &_args313, &_result315)
  p.SetLastResponseMeta_(_meta314)
  if _err != nil {
    return
  }
  switch {
  case _result315.E!= nil:
    return _r, _result315.E
  }

  return _result315.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SenderMid
//  - MessageId
func (p *TalkServiceClient) RequestResendMessage(ctx context.Context, reqSeq int32, senderMid string, messageId string) (_err error) {
  var _args316 TalkServiceRequestResendMessageArgs
  _args316.ReqSeq = reqSeq
  _args316.SenderMid = senderMid
  _args316.MessageId = messageId
  var _result318 TalkServiceRequestResendMessageResult
  var _meta317 thrift.ResponseMeta
  _meta317, _err = p.Client_().Call(ctx, "requestResendMessage", &_args316, &_result318)
  p.SetLastResponseMeta_(_meta317)
  if _err != nil {
    return
  }
  switch {
  case _result318.E!= nil:
    return _result318.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (_err error) {
  var _args319 TalkServiceSendChatRemovedArgs
  _args319.Seq = seq
  _args319.ChatMid = chatMid
  _args319.LastMessageId = lastMessageId
  _args319.SessionId = sessionId
  var _result321 TalkServiceSendChatRemovedResult
  var _meta320 thrift.ResponseMeta
  _meta320, _err = p.Client_().Call(ctx, "sendChatRemoved", &_args319, &_result321)
  p.SetLastResponseMeta_(_meta320)
  if _err != nil {
    return
  }
  switch {
  case _result321.E!= nil:
    return _result321.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ReceiverMid
//  - OriginalMessageId
//  - ResendMessage
//  - ErrorCode
func (p *TalkServiceClient) RespondResendMessage(ctx context.Context, reqSeq int32, receiverMid string, originalMessageId string, resendMessage *Message, errorCode TalkExceptionCode) (_err error) {
  var _args322 TalkServiceRespondResendMessageArgs
  _args322.ReqSeq = reqSeq
  _args322.ReceiverMid = receiverMid
  _args322.OriginalMessageId = originalMessageId
  _args322.ResendMessage = resendMessage
  _args322.ErrorCode = errorCode
  var _result324 TalkServiceRespondResendMessageResult
  var _meta323 thrift.ResponseMeta
  _meta323, _err = p.Client_().Call(ctx, "respondResendMessage", &_args322, &_result324)
  p.SetLastResponseMeta_(_meta323)
  if _err != nil {
    return
  }
  switch {
  case _result324.E!= nil:
    return _result324.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (_err error) {
  var _args325 TalkServiceInviteIntoRoomArgs
  _args325.ReqSeq = reqSeq
  _args325.RoomId = roomId
  _args325.ContactIds = contactIds
  var _result327 TalkServiceInviteIntoRoomResult
  var _meta326 thrift.ResponseMeta
  _meta326, _err = p.Client_().Call(ctx, "inviteIntoRoom", &_args325, &_result327)
  p.SetLastResponseMeta_(_meta326)
  if _err != nil {
    return
  }
  switch {
  case _result327.E!= nil:
    return _result327.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - EncryptedKeyChain
//  - HashKeyChain
func (p *TalkServiceClient) RespondE2EEKeyExchange(ctx context.Context, reqSeq int32, encryptedKeyChain []byte, hashKeyChain []byte) (_err error) {
  var _args328 TalkServiceRespondE2EEKeyExchangeArgs
  _args328.ReqSeq = reqSeq
  _args328.EncryptedKeyChain = encryptedKeyChain
  _args328.HashKeyChain = hashKeyChain
  var _result330 TalkServiceRespondE2EEKeyExchangeResult
  var _meta329 thrift.ResponseMeta
  _meta329, _err = p.Client_().Call(ctx, "respondE2EEKeyExchange", &_args328, &_result330)
  p.SetLastResponseMeta_(_meta329)
  if _err != nil {
    return
  }
  switch {
  case _result330.E!= nil:
    return _result330.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - LocalContacts
func (p *TalkServiceClient) SyncContacts(ctx context.Context, reqSeq int32, localContacts []*ContactModification) (_r map[string]*ContactRegistration, _err error) {
  var _args331 TalkServiceSyncContactsArgs
  _args331.ReqSeq = reqSeq
  _args331.LocalContacts = localContacts
  var _result333 TalkServiceSyncContactsResult
  var _meta332 thrift.ResponseMeta
  _meta332, _err = p.Client_().Call(ctx, "syncContacts", &_args331, &_result333)
  p.SetLastResponseMeta_(_meta332)
  if _err != nil {
    return
  }
  switch {
  case _result333.E!= nil:
    return _r, _result333.E
  }

  return _result333.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Phones
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (_r map[string]*Contact, _err error) {
  var _args334 TalkServiceFindAndAddContactsByPhoneArgs
  _args334.ReqSeq = reqSeq
  _args334.Phones = phones
  _args334.Reference = reference
  var _result336 TalkServiceFindAndAddContactsByPhoneResult
  var _meta335 thrift.ResponseMeta
  _meta335, _err = p.Client_().Call(ctx, "findAndAddContactsByPhone", &_args334, &_result336)
  p.SetLastResponseMeta_(_meta335)
  if _err != nil {
    return
  }
  switch {
  case _result336.E!= nil:
    return _r, _result336.E
  }

  return _result336.GetSuccess(), nil
}

// Parameters:
//  - LastRev
//  - Badge
func (p *TalkServiceClient) NotifySleep(ctx context.Context, lastRev int64, badge int32) (_err error) {
  var _args337 TalkServiceNotifySleepArgs
  _args337.LastRev = lastRev
  _args337.Badge = badge
  var _result339 TalkServiceNotifySleepResult
  var _meta338 thrift.ResponseMeta
  _meta338, _err = p.Client_().Call(ctx, "notifySleep", &_args337, &_result339)
  p.SetLastResponseMeta_(_meta338)
  if _err != nil {
    return
  }
  switch {
  case _result339.E!= nil:
    return _result339.E
  }

  return nil
}

// Parameters:
//  - SyncOpRevision
//  - Profile
func (p *TalkServiceClient) ReportProfile(ctx context.Context, syncOpRevision int64, profile *Profile) (_err error) {
  var _args340 TalkServiceReportProfileArgs
  _args340.SyncOpRevision = syncOpRevision
  _args340.Profile = profile
  var _result342 TalkServiceReportProfileResult
  var _meta341 thrift.ResponseMeta
  _meta341, _err = p.Client_().Call(ctx, "reportProfile", &_args340, &_result342)
  p.SetLastResponseMeta_(_meta341)
  if _err != nil {
    return
  }
  switch {
  case _result342.E!= nil:
    return _result342.E
  }

  return nil
}

// Parameters:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
func (p *TalkServiceClient) NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (_err error) {
  var _args343 TalkServiceNotifyUpdatedArgs
  _args343.LastRev = lastRev
  _args343.DeviceInfo = deviceInfo
  _args343.UdidHash = udidHash
  _args343.OldUdidHash = oldUdidHash
  var _result345 TalkServiceNotifyUpdatedResult
  var _meta344 thrift.ResponseMeta
  _meta344, _err = p.Client_().Call(ctx, "notifyUpdated", &_args343, &_result345)
  p.SetLastResponseMeta_(_meta344)
  if _err != nil {
    return
  }
  switch {
  case _result345.E!= nil:
    return _result345.E
  }

  return nil
}

// Parameters:
//  - SyncOpRevision
//  - Settings
func (p *TalkServiceClient) ReportSettings(ctx context.Context, syncOpRevision int64, settings *Settings) (_err error) {
  var _args346 TalkServiceReportSettingsArgs
  _args346.SyncOpRevision = syncOpRevision
  _args346.Settings = settings
  var _result348 TalkServiceReportSettingsResult
  var _meta347 thrift.ResponseMeta
  _meta347, _err = p.Client_().Call(ctx, "reportSettings", &_args346, &_result348)
  p.SetLastResponseMeta_(_meta347)
  if _err != nil {
    return
  }
  switch {
  case _result348.E!= nil:
    return _result348.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args349 TalkServiceGetBlockedContactIdsArgs
  _args349.SyncReason = syncReason
  var _result351 TalkServiceGetBlockedContactIdsResult
  var _meta350 thrift.ResponseMeta
  _meta350, _err = p.Client_().Call(ctx, "getBlockedContactIds", &_args349, &_result351)
  p.SetLastResponseMeta_(_meta350)
  if _err != nil {
    return
  }
  switch {
  case _result351.E!= nil:
    return _r, _result351.E
  }

  return _result351.GetSuccess(), nil
}

// Parameters:
//  - Location
//  - NetworkStatus
func (p *TalkServiceClient) OpenProximityMatch(ctx context.Context, location *Location, networkStatus *ClientNetworkStatus) (_r string, _err error) {
  var _args352 TalkServiceOpenProximityMatchArgs
  _args352.Location = location
  _args352.NetworkStatus = networkStatus
  var _result354 TalkServiceOpenProximityMatchResult
  var _meta353 thrift.ResponseMeta
  _meta353, _err = p.Client_().Call(ctx, "openProximityMatch", &_args352, &_result354)
  p.SetLastResponseMeta_(_meta353)
  if _err != nil {
    return
  }
  switch {
  case _result354.E!= nil:
    return _r, _result354.E
  }

  return _result354.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - MidOrEMid
func (p *TalkServiceClient) RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (_err error) {
  var _args355 TalkServiceRemoveFriendRequestArgs
  _args355.Direction = direction
  _args355.MidOrEMid = midOrEMid
  var _result357 TalkServiceRemoveFriendRequestResult
  var _meta356 thrift.ResponseMeta
  _meta356, _err = p.Client_().Call(ctx, "removeFriendRequest", &_args355, &_result357)
  p.SetLastResponseMeta_(_meta356)
  if _err != nil {
    return
  }
  switch {
  case _result357.E!= nil:
    return _result357.E
  }

  return nil
}

// Parameters:
//  - Token
//  - Type
func (p *TalkServiceClient) UpdateNotificationToken(ctx context.Context, token string, type_a1 UpdateNotificationTokenType) (_err error) {
  var _args358 TalkServiceUpdateNotificationTokenArgs
  _args358.Token = token
  _args358.Type = type_a1
  var _result360 TalkServiceUpdateNotificationTokenResult
  var _meta359 thrift.ResponseMeta
  _meta359, _err = p.Client_().Call(ctx, "updateNotificationToken", &_args358, &_result360)
  p.SetLastResponseMeta_(_meta359)
  if _err != nil {
    return
  }
  switch {
  case _result360.E!= nil:
    return _result360.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
func (p *TalkServiceClient) UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (_err error) {
  var _args361 TalkServiceUpdateExtendedProfileAttributeArgs
  _args361.ReqSeq = reqSeq
  _args361.Attr = attr
  _args361.ExtendedProfile = extendedProfile
  var _result363 TalkServiceUpdateExtendedProfileAttributeResult
  var _meta362 thrift.ResponseMeta
  _meta362, _err = p.Client_().Call(ctx, "updateExtendedProfileAttribute", &_args361, &_result363)
  p.SetLastResponseMeta_(_meta362)
  if _err != nil {
    return
  }
  switch {
  case _result363.E!= nil:
    return _result363.E
  }

  return nil
}

// Parameters:
//  - IdentityCredential
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (_r *UserAuthStatus, _err error) {
  var _args364 TalkServiceVerifyIdentityCredentialWithResultArgs
  _args364.IdentityCredential = identityCredential
  _args364.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result366 TalkServiceVerifyIdentityCredentialWithResultResult
  var _meta365 thrift.ResponseMeta
  _meta365, _err = p.Client_().Call(ctx, "verifyIdentityCredentialWithResult", &_args364, &_result366)
  p.SetLastResponseMeta_(_meta365)
  if _err != nil {
    return
  }
  switch {
  case _result366.E!= nil:
    return _r, _result366.E
  }

  return _result366.GetSuccess(), nil
}

// Parameters:
//  - Identifier
//  - Provider
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(ctx context.Context, identifier string, provider IdentityProvider, locale string) (_err error) {
  var _args367 TalkServiceRequestAccountPasswordResetArgs
  _args367.Identifier = identifier
  _args367.Provider = provider
  _args367.Locale = locale
  var _result369 TalkServiceRequestAccountPasswordResetResult
  var _meta368 thrift.ResponseMeta
  _meta368, _err = p.Client_().Call(ctx, "requestAccountPasswordReset", &_args367, &_result369)
  p.SetLastResponseMeta_(_meta368)
  if _err != nil {
    return
  }
  switch {
  case _result369.E!= nil:
    return _result369.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) SendPostback(ctx context.Context, request *SendPostbackRequest) (_err error) {
  var _args370 TalkServiceSendPostbackArgs
  _args370.Request = request
  var _result372 TalkServiceSendPostbackResult
  var _meta371 thrift.ResponseMeta
  _meta371, _err = p.Client_().Call(ctx, "sendPostback", &_args370, &_result372)
  p.SetLastResponseMeta_(_meta371)
  if _err != nil {
    return
  }
  switch {
  case _result372.E!= nil:
    return _result372.E
  }

  return nil
}

// Parameters:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
func (p *TalkServiceClient) TryFriendRequest(ctx context.Context, midOrEMid string, method FriendRequestMethod, friendRequestParams string) (_err error) {
  var _args373 TalkServiceTryFriendRequestArgs
  _args373.MidOrEMid = midOrEMid
  _args373.Method = method
  _args373.FriendRequestParams = friendRequestParams
  var _result375 TalkServiceTryFriendRequestResult
  var _meta374 thrift.ResponseMeta
  _meta374, _err = p.Client_().Call(ctx, "tryFriendRequest", &_args373, &_result375)
  p.SetLastResponseMeta_(_meta374)
  if _err != nil {
    return
  }
  switch {
  case _result375.E!= nil:
    return _result375.E
  }

  return nil
}

// Parameters:
//  - SessionId
//  - Ids
func (p *TalkServiceClient) AcceptProximityMatches(ctx context.Context, sessionId string, ids []string) (_err error) {
  var _args376 TalkServiceAcceptProximityMatchesArgs
  _args376.SessionId = sessionId
  _args376.Ids = ids
  var _result378 TalkServiceAcceptProximityMatchesResult
  var _meta377 thrift.ResponseMeta
  _meta377, _err = p.Client_().Call(ctx, "acceptProximityMatches", &_args376, &_result378)
  p.SetLastResponseMeta_(_meta377)
  if _err != nil {
    return
  }
  switch {
  case _result378.E!= nil:
    return _result378.E
  }

  return nil
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ctx context.Context, ids []string) (_r []*Contact, _err error) {
  var _args379 TalkServiceGetContactsArgs
  _args379.Ids = ids
  var _result381 TalkServiceGetContactsResult
  var _meta380 thrift.ResponseMeta
  _meta380, _err = p.Client_().Call(ctx, "getContacts", &_args379, &_result381)
  p.SetLastResponseMeta_(_meta380)
  if _err != nil {
    return
  }
  switch {
  case _result381.E!= nil:
    return _r, _result381.E
  }

  return _result381.GetSuccess(), nil
}

// Parameters:
//  - BooleanState
//  - StringState
func (p *TalkServiceClient) ReportDeviceState(ctx context.Context, booleanState map[C59122ec]bool, stringState map[C59430gc]string) (_err error) {
  var _args382 TalkServiceReportDeviceStateArgs
  _args382.BooleanState = booleanState
  _args382.StringState = stringState
  var _result384 TalkServiceReportDeviceStateResult
  var _meta383 thrift.ResponseMeta
  _meta383, _err = p.Client_().Call(ctx, "reportDeviceState", &_args382, &_result384)
  p.SetLastResponseMeta_(_meta383)
  if _err != nil {
    return
  }
  switch {
  case _result384.E!= nil:
    return _result384.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockContact(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args385 TalkServiceBlockContactArgs
  _args385.ReqSeq = reqSeq
  _args385.ID = id
  var _result387 TalkServiceBlockContactResult
  var _meta386 thrift.ResponseMeta
  _meta386, _err = p.Client_().Call(ctx, "blockContact", &_args385, &_result387)
  p.SetLastResponseMeta_(_meta386)
  if _err != nil {
    return
  }
  switch {
  case _result387.E!= nil:
    return _result387.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetExtendedProfile(ctx context.Context, syncReason SyncReason) (_r *ExtendedProfile, _err error) {
  var _args388 TalkServiceGetExtendedProfileArgs
  _args388.SyncReason = syncReason
  var _result390 TalkServiceGetExtendedProfileResult
  var _meta389 thrift.ResponseMeta
  _meta389, _err = p.Client_().Call(ctx, "getExtendedProfile", &_args388, &_result390)
  p.SetLastResponseMeta_(_meta389)
  if _err != nil {
    return
  }
  switch {
  case _result390.E!= nil:
    return _r, _result390.E
  }

  return _result390.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetProfile(ctx context.Context, syncReason SyncReason) (_r *Profile, _err error) {
  var _args391 TalkServiceGetProfileArgs
  _args391.SyncReason = syncReason
  var _result393 TalkServiceGetProfileResult
  var _meta392 thrift.ResponseMeta
  _meta392, _err = p.Client_().Call(ctx, "getProfile", &_args391, &_result393)
  p.SetLastResponseMeta_(_meta392)
  if _err != nil {
    return
  }
  switch {
  case _result393.E!= nil:
    return _r, _result393.E
  }

  return _result393.GetSuccess(), nil
}

// Parameters:
//  - AttributesToRetrieve
func (p *TalkServiceClient) GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []C59756ii) (_r *Settings, _err error) {
  var _args394 TalkServiceGetSettingsAttributes2Args
  _args394.AttributesToRetrieve = attributesToRetrieve
  var _result396 TalkServiceGetSettingsAttributes2Result
  var _meta395 thrift.ResponseMeta
  _meta395, _err = p.Client_().Call(ctx, "getSettingsAttributes2", &_args394, &_result396)
  p.SetLastResponseMeta_(_meta395)
  if _err != nil {
    return
  }
  return _result396.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetProximityMatchCandidateList(ctx context.Context, sessionId string) (_r *ProximityMatchCandidateResult_, _err error) {
  var _args397 TalkServiceGetProximityMatchCandidateListArgs
  _args397.SessionId = sessionId
  var _result399 TalkServiceGetProximityMatchCandidateListResult
  var _meta398 thrift.ResponseMeta
  _meta398, _err = p.Client_().Call(ctx, "getProximityMatchCandidateList", &_args397, &_result399)
  p.SetLastResponseMeta_(_meta398)
  if _err != nil {
    return
  }
  switch {
  case _result399.E!= nil:
    return _r, _result399.E
  }

  return _result399.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (_r *PendingAgreementsResponse, _err error) {
  var _args400 TalkServiceFindAndAddContactByMetaTagArgs
  _args400.ReqSeq = reqSeq
  _args400.SearchId = searchId
  _args400.Reference = reference
  var _result402 TalkServiceFindAndAddContactByMetaTagResult
  var _meta401 thrift.ResponseMeta
  _meta401, _err = p.Client_().Call(ctx, "findAndAddContactByMetaTag", &_args400, &_result402)
  p.SetLastResponseMeta_(_meta401)
  if _err != nil {
    return
  }
  switch {
  case _result402.E!= nil:
    return _r, _result402.E
  }

  return _result402.GetSuccess(), nil
}

// Parameters:
//  - ChatIds
//  - SyncReason
func (p *TalkServiceClient) GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (_r []*TMessageReadRange, _err error) {
  var _args403 TalkServiceGetMessageReadRangeArgs
  _args403.ChatIds = chatIds
  _args403.SyncReason = syncReason
  var _result405 TalkServiceGetMessageReadRangeResult
  var _meta404 thrift.ResponseMeta
  _meta404, _err = p.Client_().Call(ctx, "getMessageReadRange", &_args403, &_result405)
  p.SetLastResponseMeta_(_meta404)
  if _err != nil {
    return
  }
  switch {
  case _result405.E!= nil:
    return _r, _result405.E
  }

  return _result405.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
func (p *TalkServiceClient) RegisterUserid(ctx context.Context, reqSeq int32, searchId string) (_r bool, _err error) {
  var _args406 TalkServiceRegisterUseridArgs
  _args406.ReqSeq = reqSeq
  _args406.SearchId = searchId
  var _result408 TalkServiceRegisterUseridResult
  var _meta407 thrift.ResponseMeta
  _meta407, _err = p.Client_().Call(ctx, "registerUserid", &_args406, &_result408)
  p.SetLastResponseMeta_(_meta407)
  if _err != nil {
    return
  }
  switch {
  case _result408.E!= nil:
    return _r, _result408.E
  }

  return _result408.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - PushRecvReports
func (p *TalkServiceClient) ReportPushRecvReports(ctx context.Context, reqSeq int32, pushRecvReports []*PushRecvReport) (_err error) {
  var _args409 TalkServiceReportPushRecvReportsArgs
  _args409.ReqSeq = reqSeq
  _args409.PushRecvReports = pushRecvReports
  var _result411 TalkServiceReportPushRecvReportsResult
  var _meta410 thrift.ResponseMeta
  _meta410, _err = p.Client_().Call(ctx, "reportPushRecvReports", &_args409, &_result411)
  p.SetLastResponseMeta_(_meta410)
  if _err != nil {
    return
  }
  switch {
  case _result411.E!= nil:
    return _result411.E
  }

  return nil
}

func (p *TalkServiceClient) Noop(ctx context.Context) (_err error) {
  var _args412 TalkServiceNoopArgs
  var _result414 TalkServiceNoopResult
  var _meta413 thrift.ResponseMeta
  _meta413, _err = p.Client_().Call(ctx, "noop", &_args412, &_result414)
  p.SetLastResponseMeta_(_meta413)
  if _err != nil {
    return
  }
  switch {
  case _result414.E!= nil:
    return _result414.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args415 TalkServiceGetBlockedRecommendationIdsArgs
  _args415.SyncReason = syncReason
  var _result417 TalkServiceGetBlockedRecommendationIdsResult
  var _meta416 thrift.ResponseMeta
  _meta416, _err = p.Client_().Call(ctx, "getBlockedRecommendationIds", &_args415, &_result417)
  p.SetLastResponseMeta_(_meta416)
  if _err != nil {
    return
  }
  switch {
  case _result417.E!= nil:
    return _r, _result417.E
  }

  return _result417.GetSuccess(), nil
}

// Parameters:
//  - RemoveFollowerRequest
func (p *TalkServiceClient) RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (_err error) {
  var _args418 TalkServiceRemoveFollowerArgs
  _args418.RemoveFollowerRequest = removeFollowerRequest
  var _result420 TalkServiceRemoveFollowerResult
  var _meta419 thrift.ResponseMeta
  _meta419, _err = p.Client_().Call(ctx, "removeFollower", &_args418, &_result420)
  p.SetLastResponseMeta_(_meta419)
  if _err != nil {
    return
  }
  switch {
  case _result420.E!= nil:
    return _result420.E
  }

  return nil
}

// Parameters:
//  - MigrationSessionId
func (p *TalkServiceClient) VerifyAccountMigration(ctx context.Context, migrationSessionId string) (_err error) {
  var _args421 TalkServiceVerifyAccountMigrationArgs
  _args421.MigrationSessionId = migrationSessionId
  var _result423 TalkServiceVerifyAccountMigrationResult
  var _meta422 thrift.ResponseMeta
  _meta422, _err = p.Client_().Call(ctx, "verifyAccountMigration", &_args421, &_result423)
  p.SetLastResponseMeta_(_meta422)
  if _err != nil {
    return
  }
  switch {
  case _result423.E!= nil:
    return _result423.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetSettings(ctx context.Context, syncReason SyncReason) (_r *Settings, _err error) {
  var _args424 TalkServiceGetSettingsArgs
  _args424.SyncReason = syncReason
  var _result426 TalkServiceGetSettingsResult
  var _meta425 thrift.ResponseMeta
  _meta425, _err = p.Client_().Call(ctx, "getSettings", &_args424, &_result426)
  p.SetLastResponseMeta_(_meta425)
  if _err != nil {
    return
  }
  switch {
  case _result426.E!= nil:
    return _r, _result426.E
  }

  return _result426.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string) (_r *E2EEGroupSharedKey, _err error) {
  var _args427 TalkServiceGetLastE2EEGroupSharedKeyArgs
  _args427.KeyVersion = keyVersion
  _args427.ChatMid = chatMid
  var _result429 TalkServiceGetLastE2EEGroupSharedKeyResult
  var _meta428 thrift.ResponseMeta
  _meta428, _err = p.Client_().Call(ctx, "getLastE2EEGroupSharedKey", &_args427, &_result429)
  p.SetLastResponseMeta_(_meta428)
  if _err != nil {
    return
  }
  switch {
  case _result429.E!= nil:
    return _r, _result429.E
  }

  return _result429.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingbackTone(ctx context.Context) (_r *RingbackTone, _err error) {
  var _args430 TalkServiceGetRingbackToneArgs
  var _result432 TalkServiceGetRingbackToneResult
  var _meta431 thrift.ResponseMeta
  _meta431, _err = p.Client_().Call(ctx, "getRingbackTone", &_args430, &_result432)
  p.SetLastResponseMeta_(_meta431)
  if _err != nil {
    return
  }
  switch {
  case _result432.E!= nil:
    return _r, _result432.E
  }

  return _result432.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (_err error) {
  var _args433 TalkServiceLeaveRoomArgs
  _args433.ReqSeq = reqSeq
  _args433.RoomId = roomId
  var _result435 TalkServiceLeaveRoomResult
  var _meta434 thrift.ResponseMeta
  _meta434, _err = p.Client_().Call(ctx, "leaveRoom", &_args433, &_result435)
  p.SetLastResponseMeta_(_meta434)
  if _err != nil {
    return
  }
  switch {
  case _result435.E!= nil:
    return _result435.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (_err error) {
  var _args436 TalkServiceSendChatCheckedArgs
  _args436.Seq = seq
  _args436.ChatMid = chatMid
  _args436.LastMessageId = lastMessageId
  _args436.SessionId = sessionId
  var _result438 TalkServiceSendChatCheckedResult
  var _meta437 thrift.ResponseMeta
  _meta437, _err = p.Client_().Call(ctx, "sendChatChecked", &_args436, &_result438)
  p.SetLastResponseMeta_(_meta437)
  if _err != nil {
    return
  }
  switch {
  case _result438.E!= nil:
    return _result438.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (_r map[string]*Contact, _err error) {
  var _args439 TalkServiceFindAndAddContactsByUseridArgs
  _args439.ReqSeq = reqSeq
  _args439.SearchId = searchId
  _args439.Reference = reference
  var _result441 TalkServiceFindAndAddContactsByUseridResult
  var _meta440 thrift.ResponseMeta
  _meta440, _err = p.Client_().Call(ctx, "findAndAddContactsByUserid", &_args439, &_result441)
  p.SetLastResponseMeta_(_meta440)
  if _err != nil {
    return
  }
  switch {
  case _result441.E!= nil:
    return _r, _result441.E
  }

  return _result441.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetAllContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args442 TalkServiceGetAllContactIdsArgs
  _args442.SyncReason = syncReason
  var _result444 TalkServiceGetAllContactIdsResult
  var _meta443 thrift.ResponseMeta
  _meta443, _err = p.Client_().Call(ctx, "getAllContactIds", &_args442, &_result444)
  p.SetLastResponseMeta_(_meta443)
  if _err != nil {
    return
  }
  switch {
  case _result444.E!= nil:
    return _r, _result444.E
  }

  return _result444.GetSuccess(), nil
}

// Parameters:
//  - UnfollowRequest
func (p *TalkServiceClient) Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (_err error) {
  var _args445 TalkServiceUnfollowArgs
  _args445.UnfollowRequest = unfollowRequest
  var _result447 TalkServiceUnfollowResult
  var _meta446 thrift.ResponseMeta
  _meta446, _err = p.Client_().Call(ctx, "unfollow", &_args445, &_result447)
  p.SetLastResponseMeta_(_meta446)
  if _err != nil {
    return
  }
  switch {
  case _result447.E!= nil:
    return _result447.E
  }

  return nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) CloseProximityMatch(ctx context.Context, sessionId string) (_err error) {
  var _args448 TalkServiceCloseProximityMatchArgs
  _args448.SessionId = sessionId
  var _result450 TalkServiceCloseProximityMatchResult
  var _meta449 thrift.ResponseMeta
  _meta449, _err = p.Client_().Call(ctx, "closeProximityMatch", &_args448, &_result450)
  p.SetLastResponseMeta_(_meta449)
  if _err != nil {
    return
  }
  switch {
  case _result450.E!= nil:
    return _result450.E
  }

  return nil
}

// Parameters:
//  - PhoneNumberList
func (p *TalkServiceClient) InviteFriendsBySms(ctx context.Context, phoneNumberList []string) (_err error) {
  var _args451 TalkServiceInviteFriendsBySmsArgs
  _args451.PhoneNumberList = phoneNumberList
  var _result453 TalkServiceInviteFriendsBySmsResult
  var _meta452 thrift.ResponseMeta
  _meta452, _err = p.Client_().Call(ctx, "inviteFriendsBySms", &_args451, &_result453)
  p.SetLastResponseMeta_(_meta452)
  if _err != nil {
    return
  }
  switch {
  case _result453.E!= nil:
    return _result453.E
  }

  return nil
}

// Parameters:
//  - Categories
func (p *TalkServiceClient) GetChatEffectMetaList(ctx context.Context, categories []C58964da) (_r []*ChatEffectMeta, _err error) {
  var _args454 TalkServiceGetChatEffectMetaListArgs
  _args454.Categories = categories
  var _result456 TalkServiceGetChatEffectMetaListResult
  var _meta455 thrift.ResponseMeta
  _meta455, _err = p.Client_().Call(ctx, "getChatEffectMetaList", &_args454, &_result456)
  p.SetLastResponseMeta_(_meta455)
  if _err != nil {
    return
  }
  switch {
  case _result456.E!= nil:
    return _r, _result456.E
  }

  return _result456.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *TalkServiceClient) RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (_err error) {
  var _args457 TalkServiceRemoveAllMessagesArgs
  _args457.Seq = seq
  _args457.LastMessageId = lastMessageId
  var _result459 TalkServiceRemoveAllMessagesResult
  var _meta458 thrift.ResponseMeta
  _meta458, _err = p.Client_().Call(ctx, "removeAllMessages", &_args457, &_result459)
  p.SetLastResponseMeta_(_meta458)
  if _err != nil {
    return
  }
  switch {
  case _result459.E!= nil:
    return _result459.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
//  - Reference
func (p *TalkServiceClient) UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (_err error) {
  var _args460 TalkServiceUnblockContactArgs
  _args460.ReqSeq = reqSeq
  _args460.ID = id
  _args460.Reference = reference
  var _result462 TalkServiceUnblockContactResult
  var _meta461 thrift.ResponseMeta
  _meta461, _err = p.Client_().Call(ctx, "unblockContact", &_args460, &_result462)
  p.SetLastResponseMeta_(_meta461)
  if _err != nil {
    return
  }
  switch {
  case _result462.E!= nil:
    return _result462.E
  }

  return nil
}

func (p *TalkServiceClient) GetAnalyticsInfo(ctx context.Context) (_r *AnalyticsInfo, _err error) {
  var _args463 TalkServiceGetAnalyticsInfoArgs
  var _result465 TalkServiceGetAnalyticsInfoResult
  var _meta464 thrift.ResponseMeta
  _meta464, _err = p.Client_().Call(ctx, "getAnalyticsInfo", &_args463, &_result465)
  p.SetLastResponseMeta_(_meta464)
  if _err != nil {
    return
  }
  switch {
  case _result465.E!= nil:
    return _r, _result465.E
  }

  return _result465.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args466 TalkServiceGetRecommendationIdsArgs
  _args466.SyncReason = syncReason
  var _result468 TalkServiceGetRecommendationIdsResult
  var _meta467 thrift.ResponseMeta
  _meta467, _err = p.Client_().Call(ctx, "getRecommendationIds", &_args466, &_result468)
  p.SetLastResponseMeta_(_meta467)
  if _err != nil {
    return
  }
  switch {
  case _result468.E!= nil:
    return _r, _result468.E
  }

  return _result468.GetSuccess(), nil
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (_err error) {
  var _args469 TalkServiceNotifyRegistrationCompleteArgs
  _args469.UdidHash = udidHash
  _args469.ApplicationTypeWithExtensions = applicationTypeWithExtensions
  var _result471 TalkServiceNotifyRegistrationCompleteResult
  var _meta470 thrift.ResponseMeta
  _meta470, _err = p.Client_().Call(ctx, "notifyRegistrationComplete", &_args469, &_result471)
  p.SetLastResponseMeta_(_meta470)
  if _err != nil {
    return
  }
  switch {
  case _result471.E!= nil:
    return _result471.E
  }

  return nil
}

// Parameters:
//  - ClientRevision
func (p *TalkServiceClient) WakeUpLongPolling(ctx context.Context, clientRevision int64) (_r bool, _err error) {
  var _args472 TalkServiceWakeUpLongPollingArgs
  _args472.ClientRevision = clientRevision
  var _result474 TalkServiceWakeUpLongPollingResult
  var _meta473 thrift.ResponseMeta
  _meta473, _err = p.Client_().Call(ctx, "wakeUpLongPolling", &_args472, &_result474)
  p.SetLastResponseMeta_(_meta473)
  if _err != nil {
    return
  }
  switch {
  case _result474.E!= nil:
    return _r, _result474.E
  }

  return _result474.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args475 TalkServiceUnblockRecommendationArgs
  _args475.ReqSeq = reqSeq
  _args475.ID = id
  var _result477 TalkServiceUnblockRecommendationResult
  var _meta476 thrift.ResponseMeta
  _meta476, _err = p.Client_().Call(ctx, "unblockRecommendation", &_args475, &_result477)
  p.SetLastResponseMeta_(_meta476)
  if _err != nil {
    return
  }
  switch {
  case _result477.E!= nil:
    return _result477.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(ctx context.Context, seq int32, message *Message) (_r *Message, _err error) {
  var _args478 TalkServiceSendMessageArgs
  _args478.Seq = seq
  _args478.Message = message
  var _result480 TalkServiceSendMessageResult
  var _meta479 thrift.ResponseMeta
  _meta479, _err = p.Client_().Call(ctx, "sendMessage", &_args478, &_result480)
  p.SetLastResponseMeta_(_meta479)
  if _err != nil {
    return
  }
  switch {
  case _result480.E!= nil:
    return _r, _result480.E
  }

  return _result480.GetSuccess(), nil
}

// Parameters:
//  - Text
func (p *TalkServiceClient) SendEchoPush(ctx context.Context, text string) (_err error) {
  var _args481 TalkServiceSendEchoPushArgs
  _args481.Text = text
  var _result483 TalkServiceSendEchoPushResult
  var _meta482 thrift.ResponseMeta
  _meta482, _err = p.Client_().Call(ctx, "sendEchoPush", &_args481, &_result483)
  p.SetLastResponseMeta_(_meta482)
  if _err != nil {
    return
  }
  switch {
  case _result483.E!= nil:
    return _result483.E
  }

  return nil
}

// Parameters:
//  - MigrationPincodeSessionId
//  - AccountMigrationPincode
func (p *TalkServiceClient) VerifyAccountMigrationPincode(ctx context.Context, migrationPincodeSessionId string, accountMigrationPincode string) (_err error) {
  var _args484 TalkServiceVerifyAccountMigrationPincodeArgs
  _args484.MigrationPincodeSessionId = migrationPincodeSessionId
  _args484.AccountMigrationPincode = accountMigrationPincode
  var _result486 TalkServiceVerifyAccountMigrationPincodeResult
  var _meta485 thrift.ResponseMeta
  _meta485, _err = p.Client_().Call(ctx, "verifyAccountMigrationPincode", &_args484, &_result486)
  p.SetLastResponseMeta_(_meta485)
  if _err != nil {
    return
  }
  switch {
  case _result486.E!= nil:
    return _result486.E
  }

  return nil
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyInstalled(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (_err error) {
  var _args487 TalkServiceNotifyInstalledArgs
  _args487.UdidHash = udidHash
  _args487.ApplicationTypeWithExtensions = applicationTypeWithExtensions
  var _result489 TalkServiceNotifyInstalledResult
  var _meta488 thrift.ResponseMeta
  _meta488, _err = p.Client_().Call(ctx, "notifyInstalled", &_args487, &_result489)
  p.SetLastResponseMeta_(_meta488)
  if _err != nil {
    return
  }
  switch {
  case _result489.E!= nil:
    return _result489.E
  }

  return nil
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) VerifyQrcode(ctx context.Context, verifier string, pinCode string) (_r string, _err error) {
  var _args490 TalkServiceVerifyQrcodeArgs
  _args490.Verifier = verifier
  _args490.PinCode = pinCode
  var _result492 TalkServiceVerifyQrcodeResult
  var _meta491 thrift.ResponseMeta
  _meta491, _err = p.Client_().Call(ctx, "verifyQrcode", &_args490, &_result492)
  p.SetLastResponseMeta_(_meta491)
  if _err != nil {
    return
  }
  switch {
  case _result492.E!= nil:
    return _r, _result492.E
  }

  return _result492.GetSuccess(), nil
}

// Parameters:
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindContactByMetaTag(ctx context.Context, searchId string, reference string) (_r *Contact, _err error) {
  var _args493 TalkServiceFindContactByMetaTagArgs
  _args493.SearchId = searchId
  _args493.Reference = reference
  var _result495 TalkServiceFindContactByMetaTagResult
  var _meta494 thrift.ResponseMeta
  _meta494, _err = p.Client_().Call(ctx, "findContactByMetaTag", &_args493, &_result495)
  p.SetLastResponseMeta_(_meta494)
  if _err != nil {
    return
  }
  switch {
  case _result495.E!= nil:
    return _r, _result495.E
  }

  return _result495.GetSuccess(), nil
}

// Parameters:
//  - Phones
func (p *TalkServiceClient) FindContactsByPhone(ctx context.Context, phones []string) (_r map[string]*Contact, _err error) {
  var _args496 TalkServiceFindContactsByPhoneArgs
  _args496.Phones = phones
  var _result498 TalkServiceFindContactsByPhoneResult
  var _meta497 thrift.ResponseMeta
  _meta497, _err = p.Client_().Call(ctx, "findContactsByPhone", &_args496, &_result498)
  p.SetLastResponseMeta_(_meta497)
  if _err != nil {
    return
  }
  switch {
  case _result498.E!= nil:
    return _r, _result498.E
  }

  return _result498.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (_r *RegisterWithPhoneNumberResult_, _err error) {
  var _args499 TalkServiceRegisterWithPhoneNumberArgs
  _args499.SessionId = sessionId
  _args499.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result501 TalkServiceRegisterWithPhoneNumberResult
  var _meta500 thrift.ResponseMeta
  _meta500, _err = p.Client_().Call(ctx, "registerWithPhoneNumber", &_args499, &_result501)
  p.SetLastResponseMeta_(_meta500)
  if _err != nil {
    return
  }
  switch {
  case _result501.E!= nil:
    return _r, _result501.E
  }

  return _result501.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr ProfileAttribute, value string) (_err error) {
  var _args502 TalkServiceUpdateProfileAttributeArgs
  _args502.ReqSeq = reqSeq
  _args502.Attr = attr
  _args502.Value = value
  var _result504 TalkServiceUpdateProfileAttributeResult
  var _meta503 thrift.ResponseMeta
  _meta503, _err = p.Client_().Call(ctx, "updateProfileAttribute", &_args502, &_result504)
  p.SetLastResponseMeta_(_meta503)
  if _err != nil {
    return
  }
  switch {
  case _result504.E!= nil:
    return _result504.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Request
func (p *TalkServiceClient) UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (_err error) {
  var _args505 TalkServiceUpdateProfileAttributesArgs
  _args505.ReqSeq = reqSeq
  _args505.Request = request
  var _result507 TalkServiceUpdateProfileAttributesResult
  var _meta506 thrift.ResponseMeta
  _meta506, _err = p.Client_().Call(ctx, "updateProfileAttributes", &_args505, &_result507)
  p.SetLastResponseMeta_(_meta506)
  if _err != nil {
    return
  }
  switch {
  case _result507.E!= nil:
    return _result507.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributeEx, settings *Settings) (_r []SettingsAttributeEx, _err error) {
  var _args508 TalkServiceUpdateSettingsAttributes2Args
  _args508.ReqSeq = reqSeq
  _args508.AttributesToUpdate = attributesToUpdate
  _args508.Settings = settings
  var _result510 TalkServiceUpdateSettingsAttributes2Result
  var _meta509 thrift.ResponseMeta
  _meta509, _err = p.Client_().Call(ctx, "updateSettingsAttributes2", &_args508, &_result510)
  p.SetLastResponseMeta_(_meta509)
  if _err != nil {
    return
  }
  switch {
  case _result510.E!= nil:
    return _r, _result510.E
  }

  return _result510.GetSuccess(), nil
}

// Parameters:
//  - EMid
func (p *TalkServiceClient) DecryptFollowEMid(ctx context.Context, eMid string) (_r string, _err error) {
  var _args511 TalkServiceDecryptFollowEMidArgs
  _args511.EMid = eMid
  var _result513 TalkServiceDecryptFollowEMidResult
  var _meta512 thrift.ResponseMeta
  _meta512, _err = p.Client_().Call(ctx, "decryptFollowEMid", &_args511, &_result513)
  p.SetLastResponseMeta_(_meta512)
  if _err != nil {
    return
  }
  switch {
  case _result513.E!= nil:
    return _r, _result513.E
  }

  return _result513.GetSuccess(), nil
}

// Parameters:
//  - AccountMigrationPincode
func (p *TalkServiceClient) UpdateAccountMigrationPincode(ctx context.Context, accountMigrationPincode string) (_err error) {
  var _args514 TalkServiceUpdateAccountMigrationPincodeArgs
  _args514.AccountMigrationPincode = accountMigrationPincode
  var _result516 TalkServiceUpdateAccountMigrationPincodeResult
  var _meta515 thrift.ResponseMeta
  _meta515, _err = p.Client_().Call(ctx, "updateAccountMigrationPincode", &_args514, &_result516)
  p.SetLastResponseMeta_(_meta515)
  if _err != nil {
    return
  }
  switch {
  case _result516.E!= nil:
    return _result516.E
  }

  return nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) IsUseridAvailable(ctx context.Context, searchId string) (_r bool, _err error) {
  var _args517 TalkServiceIsUseridAvailableArgs
  _args517.SearchId = searchId
  var _result519 TalkServiceIsUseridAvailableResult
  var _meta518 thrift.ResponseMeta
  _meta518, _err = p.Client_().Call(ctx, "isUseridAvailable", &_args517, &_result519)
  p.SetLastResponseMeta_(_meta518)
  if _err != nil {
    return
  }
  switch {
  case _result519.E!= nil:
    return _r, _result519.E
  }

  return _result519.GetSuccess(), nil
}

// Parameters:
//  - GetFollowersRequest
func (p *TalkServiceClient) GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (_r *GetFollowersResponse, _err error) {
  var _args520 TalkServiceGetFollowersArgs
  _args520.GetFollowersRequest = getFollowersRequest
  var _result522 TalkServiceGetFollowersResult
  var _meta521 thrift.ResponseMeta
  _meta521, _err = p.Client_().Call(ctx, "getFollowers", &_args520, &_result522)
  p.SetLastResponseMeta_(_meta521)
  if _err != nil {
    return
  }
  switch {
  case _result522.E!= nil:
    return _r, _result522.E
  }

  return _result522.GetSuccess(), nil
}

func (p *TalkServiceClient) CreateAccountMigrationPincodeSession(ctx context.Context) (_r string, _err error) {
  var _args523 TalkServiceCreateAccountMigrationPincodeSessionArgs
  var _result525 TalkServiceCreateAccountMigrationPincodeSessionResult
  var _meta524 thrift.ResponseMeta
  _meta524, _err = p.Client_().Call(ctx, "createAccountMigrationPincodeSession", &_args523, &_result525)
  p.SetLastResponseMeta_(_meta524)
  if _err != nil {
    return
  }
  switch {
  case _result525.E!= nil:
    return _r, _result525.E
  }

  return _result525.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) ResendPinCode(ctx context.Context, sessionId string) (_err error) {
  var _args526 TalkServiceResendPinCodeArgs
  _args526.SessionId = sessionId
  var _result528 TalkServiceResendPinCodeResult
  var _meta527 thrift.ResponseMeta
  _meta527, _err = p.Client_().Call(ctx, "resendPinCode", &_args526, &_result528)
  p.SetLastResponseMeta_(_meta527)
  if _err != nil {
    return
  }
  switch {
  case _result528.E!= nil:
    return _result528.E
  }

  return nil
}

// Parameters:
//  - GetFollowingsRequest
func (p *TalkServiceClient) GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (_r *GetFollowingsResponse, _err error) {
  var _args529 TalkServiceGetFollowingsArgs
  _args529.GetFollowingsRequest = getFollowingsRequest
  var _result531 TalkServiceGetFollowingsResult
  var _meta530 thrift.ResponseMeta
  _meta530, _err = p.Client_().Call(ctx, "getFollowings", &_args529, &_result531)
  p.SetLastResponseMeta_(_meta530)
  if _err != nil {
    return
  }
  switch {
  case _result531.E!= nil:
    return _r, _result531.E
  }

  return _result531.GetSuccess(), nil
}

func (p *TalkServiceClient) GetServerTime(ctx context.Context) (_r int64, _err error) {
  var _args532 TalkServiceGetServerTimeArgs
  var _result534 TalkServiceGetServerTimeResult
  var _meta533 thrift.ResponseMeta
  _meta533, _err = p.Client_().Call(ctx, "getServerTime", &_args532, &_result534)
  p.SetLastResponseMeta_(_meta533)
  if _err != nil {
    return
  }
  switch {
  case _result534.E!= nil:
    return _r, _result534.E
  }

  return _result534.GetSuccess(), nil
}

func (p *TalkServiceClient) GetLastOpRevision(ctx context.Context) (_r int64, _err error) {
  var _args535 TalkServiceGetLastOpRevisionArgs
  var _result537 TalkServiceGetLastOpRevisionResult
  var _meta536 thrift.ResponseMeta
  _meta536, _err = p.Client_().Call(ctx, "getLastOpRevision", &_args535, &_result537)
  p.SetLastResponseMeta_(_meta536)
  if _err != nil {
    return
  }
  switch {
  case _result537.E!= nil:
    return _r, _result537.E
  }

  return _result537.GetSuccess(), nil
}

// Parameters:
//  - TicketIdWithTag
func (p *TalkServiceClient) FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (_r *Contact, _err error) {
  var _args538 TalkServiceFindContactByUserTicketArgs
  _args538.TicketIdWithTag = ticketIdWithTag
  var _result540 TalkServiceFindContactByUserTicketResult
  var _meta539 thrift.ResponseMeta
  _meta539, _err = p.Client_().Call(ctx, "findContactByUserTicket", &_args538, &_result540)
  p.SetLastResponseMeta_(_meta539)
  if _err != nil {
    return
  }
  switch {
  case _result540.E!= nil:
    return _r, _result540.E
  }

  return _result540.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) FinishUpdateVerification(ctx context.Context, sessionId string) (_err error) {
  var _args541 TalkServiceFinishUpdateVerificationArgs
  _args541.SessionId = sessionId
  var _result543 TalkServiceFinishUpdateVerificationResult
  var _meta542 thrift.ResponseMeta
  _meta542, _err = p.Client_().Call(ctx, "finishUpdateVerification", &_args541, &_result543)
  p.SetLastResponseMeta_(_meta542)
  if _err != nil {
    return
  }
  switch {
  case _result543.E!= nil:
    return _result543.E
  }

  return nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetAcceptedProximityMatches(ctx context.Context, sessionId string) (_r []string, _err error) {
  var _args544 TalkServiceGetAcceptedProximityMatchesArgs
  _args544.SessionId = sessionId
  var _result546 TalkServiceGetAcceptedProximityMatchesResult
  var _meta545 thrift.ResponseMeta
  _meta545, _err = p.Client_().Call(ctx, "getAcceptedProximityMatches", &_args544, &_result546)
  p.SetLastResponseMeta_(_meta545)
  if _err != nil {
    return
  }
  switch {
  case _result546.E!= nil:
    return _r, _result546.E
  }

  return _result546.GetSuccess(), nil
}

func (p *TalkServiceClient) ClearRingbackTone(ctx context.Context) (_err error) {
  var _args547 TalkServiceClearRingbackToneArgs
  var _result549 TalkServiceClearRingbackToneResult
  var _meta548 thrift.ResponseMeta
  _meta548, _err = p.Client_().Call(ctx, "clearRingbackTone", &_args547, &_result549)
  p.SetLastResponseMeta_(_meta548)
  if _err != nil {
    return
  }
  switch {
  case _result549.E!= nil:
    return _result549.E
  }

  return nil
}

func (p *TalkServiceClient) UnregisterUserAndDevice(ctx context.Context) (_r string, _err error) {
  var _args550 TalkServiceUnregisterUserAndDeviceArgs
  var _result552 TalkServiceUnregisterUserAndDeviceResult
  var _meta551 thrift.ResponseMeta
  _meta551, _err = p.Client_().Call(ctx, "unregisterUserAndDevice", &_args550, &_result552)
  p.SetLastResponseMeta_(_meta551)
  if _err != nil {
    return
  }
  switch {
  case _result552.E!= nil:
    return _r, _result552.E
  }

  return _result552.GetSuccess(), nil
}

type TalkServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

  self553 := &TalkServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self553.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler:handler}
  self553.processorMap["updateProfile"] = &talkServiceProcessorUpdateProfile{handler:handler}
  self553.processorMap["fetchOperations"] = &talkServiceProcessorFetchOperations{handler:handler}
  self553.processorMap["getRecentFriendRequests"] = &talkServiceProcessorGetRecentFriendRequests{handler:handler}
  self553.processorMap["getChats"] = &talkServiceProcessorGetChats{handler:handler}
  self553.processorMap["getRecentMessages"] = &talkServiceProcessorGetRecentMessages{handler:handler}
  self553.processorMap["getRecentMessagesV2"] = &talkServiceProcessorGetRecentMessagesV2{handler:handler}
  self553.processorMap["getCountryWithRequestIp"] = &talkServiceProcessorGetCountryWithRequestIp{handler:handler}
  self553.processorMap["getChatRoomAnnouncements"] = &talkServiceProcessorGetChatRoomAnnouncements{handler:handler}
  self553.processorMap["getGroupWithoutMembers"] = &talkServiceProcessorGetGroupWithoutMembers{handler:handler}
  self553.processorMap["getGroup"] = &talkServiceProcessorGetGroup{handler:handler}
  self553.processorMap["getGroups"] = &talkServiceProcessorGetGroups{handler:handler}
  self553.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler:handler}
  self553.processorMap["updateGroup"] = &talkServiceProcessorUpdateGroup{handler:handler}
  self553.processorMap["getContact"] = &talkServiceProcessorGetContact{handler:handler}
  self553.processorMap["getLastE2EEPublicKeys"] = &talkServiceProcessorGetLastE2EEPublicKeys{handler:handler}
  self553.processorMap["getRingtone"] = &talkServiceProcessorGetRingtone{handler:handler}
  self553.processorMap["negotiateE2EEPublicKey"] = &talkServiceProcessorNegotiateE2EEPublicKey{handler:handler}
  self553.processorMap["findContactByUserid"] = &talkServiceProcessorFindContactByUserid{handler:handler}
  self553.processorMap["clearRingtone"] = &talkServiceProcessorClearRingtone{handler:handler}
  self553.processorMap["setNotificationsEnabled"] = &talkServiceProcessorSetNotificationsEnabled{handler:handler}
  self553.processorMap["deleteOtherFromChat"] = &talkServiceProcessorDeleteOtherFromChat{handler:handler}
  self553.processorMap["inviteIntoChat"] = &talkServiceProcessorInviteIntoChat{handler:handler}
  self553.processorMap["acceptChatInvitationByTicket"] = &talkServiceProcessorAcceptChatInvitationByTicket{handler:handler}
  self553.processorMap["acceptGroupInvitation"] = &talkServiceProcessorAcceptGroupInvitation{handler:handler}
  self553.processorMap["deleteSelfFromChat"] = &talkServiceProcessorDeleteSelfFromChat{handler:handler}
  self553.processorMap["findChatByTicket"] = &talkServiceProcessorFindChatByTicket{handler:handler}
  self553.processorMap["cancelChatInvitation"] = &talkServiceProcessorCancelChatInvitation{handler:handler}
  self553.processorMap["acceptChatInvitation"] = &talkServiceProcessorAcceptChatInvitation{handler:handler}
  self553.processorMap["getMessageBoxes"] = &talkServiceProcessorGetMessageBoxes{handler:handler}
  self553.processorMap["updateChat"] = &talkServiceProcessorUpdateChat{handler:handler}
  self553.processorMap["reissueChatTicket"] = &talkServiceProcessorReissueChatTicket{handler:handler}
  self553.processorMap["getAllChatMids"] = &talkServiceProcessorGetAllChatMids{handler:handler}
  self553.processorMap["rejectChatInvitation"] = &talkServiceProcessorRejectChatInvitation{handler:handler}
  self553.processorMap["createChat"] = &talkServiceProcessorCreateChat{handler:handler}
  self553.processorMap["getChatRoomAnnouncementsBulk"] = &talkServiceProcessorGetChatRoomAnnouncementsBulk{handler:handler}
  self553.processorMap["startUpdateVerification"] = &talkServiceProcessorStartUpdateVerification{handler:handler}
  self553.processorMap["startVerification"] = &talkServiceProcessorStartVerification{handler:handler}
  self553.processorMap["changeVerificationMethod"] = &talkServiceProcessorChangeVerificationMethod{handler:handler}
  self553.processorMap["getEncryptedIdentityV3"] = &talkServiceProcessorGetEncryptedIdentityV3{handler:handler}
  self553.processorMap["getE2EEGroupSharedKey"] = &talkServiceProcessorGetE2EEGroupSharedKey{handler:handler}
  self553.processorMap["registerE2EEGroupKey"] = &talkServiceProcessorRegisterE2EEGroupKey{handler:handler}
  self553.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler:handler}
  self553.processorMap["registerE2EEPublicKey"] = &talkServiceProcessorRegisterE2EEPublicKey{handler:handler}
  self553.processorMap["getE2EEPublicKey"] = &talkServiceProcessorGetE2EEPublicKey{handler:handler}
  self553.processorMap["getRSAKeyInfo"] = &talkServiceProcessorGetRSAKeyInfo{handler:handler}
  self553.processorMap["registerWithSnsId"] = &talkServiceProcessorRegisterWithSnsId{handler:handler}
  self553.processorMap["findSnsIdUserStatus"] = &talkServiceProcessorFindSnsIdUserStatus{handler:handler}
  self553.processorMap["getContactRegistration"] = &talkServiceProcessorGetContactRegistration{handler:handler}
  self553.processorMap["verifyPhoneNumber"] = &talkServiceProcessorVerifyPhoneNumber{handler:handler}
  self553.processorMap["acquireEncryptedAccessToken"] = &talkServiceProcessorAcquireEncryptedAccessToken{handler:handler}
  self553.processorMap["registerWithSnsIdAndIdentityCredential"] = &talkServiceProcessorRegisterWithSnsIdAndIdentityCredential{handler:handler}
  self553.processorMap["getShakeEventV1"] = &talkServiceProcessorGetShakeEventV1{handler:handler}
  self553.processorMap["registerDeviceWithIdentityCredential"] = &talkServiceProcessorRegisterDeviceWithIdentityCredential{handler:handler}
  self553.processorMap["updateAndGetNearby"] = &talkServiceProcessorUpdateAndGetNearby{handler:handler}
  self553.processorMap["getFriendRequests"] = &talkServiceProcessorGetFriendRequests{handler:handler}
  self553.processorMap["unsendMessage"] = &talkServiceProcessorUnsendMessage{handler:handler}
  self553.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler:handler}
  self553.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler:handler}
  self553.processorMap["requestResendMessage"] = &talkServiceProcessorRequestResendMessage{handler:handler}
  self553.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler:handler}
  self553.processorMap["respondResendMessage"] = &talkServiceProcessorRespondResendMessage{handler:handler}
  self553.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler:handler}
  self553.processorMap["respondE2EEKeyExchange"] = &talkServiceProcessorRespondE2EEKeyExchange{handler:handler}
  self553.processorMap["syncContacts"] = &talkServiceProcessorSyncContacts{handler:handler}
  self553.processorMap["findAndAddContactsByPhone"] = &talkServiceProcessorFindAndAddContactsByPhone{handler:handler}
  self553.processorMap["notifySleep"] = &talkServiceProcessorNotifySleep{handler:handler}
  self553.processorMap["reportProfile"] = &talkServiceProcessorReportProfile{handler:handler}
  self553.processorMap["notifyUpdated"] = &talkServiceProcessorNotifyUpdated{handler:handler}
  self553.processorMap["reportSettings"] = &talkServiceProcessorReportSettings{handler:handler}
  self553.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler:handler}
  self553.processorMap["openProximityMatch"] = &talkServiceProcessorOpenProximityMatch{handler:handler}
  self553.processorMap["removeFriendRequest"] = &talkServiceProcessorRemoveFriendRequest{handler:handler}
  self553.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler:handler}
  self553.processorMap["updateExtendedProfileAttribute"] = &talkServiceProcessorUpdateExtendedProfileAttribute{handler:handler}
  self553.processorMap["verifyIdentityCredentialWithResult"] = &talkServiceProcessorVerifyIdentityCredentialWithResult_{handler:handler}
  self553.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler:handler}
  self553.processorMap["sendPostback"] = &talkServiceProcessorSendPostback{handler:handler}
  self553.processorMap["tryFriendRequest"] = &talkServiceProcessorTryFriendRequest{handler:handler}
  self553.processorMap["acceptProximityMatches"] = &talkServiceProcessorAcceptProximityMatches{handler:handler}
  self553.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler:handler}
  self553.processorMap["reportDeviceState"] = &talkServiceProcessorReportDeviceState{handler:handler}
  self553.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler:handler}
  self553.processorMap["getExtendedProfile"] = &talkServiceProcessorGetExtendedProfile{handler:handler}
  self553.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler:handler}
  self553.processorMap["getSettingsAttributes2"] = &talkServiceProcessorGetSettingsAttributes2{handler:handler}
  self553.processorMap["getProximityMatchCandidateList"] = &talkServiceProcessorGetProximityMatchCandidateList{handler:handler}
  self553.processorMap["findAndAddContactByMetaTag"] = &talkServiceProcessorFindAndAddContactByMetaTag{handler:handler}
  self553.processorMap["getMessageReadRange"] = &talkServiceProcessorGetMessageReadRange{handler:handler}
  self553.processorMap["registerUserid"] = &talkServiceProcessorRegisterUserid{handler:handler}
  self553.processorMap["reportPushRecvReports"] = &talkServiceProcessorReportPushRecvReports{handler:handler}
  self553.processorMap["noop"] = &talkServiceProcessorNoop{handler:handler}
  self553.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler:handler}
  self553.processorMap["removeFollower"] = &talkServiceProcessorRemoveFollower{handler:handler}
  self553.processorMap["verifyAccountMigration"] = &talkServiceProcessorVerifyAccountMigration{handler:handler}
  self553.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler:handler}
  self553.processorMap["getLastE2EEGroupSharedKey"] = &talkServiceProcessorGetLastE2EEGroupSharedKey{handler:handler}
  self553.processorMap["getRingbackTone"] = &talkServiceProcessorGetRingbackTone{handler:handler}
  self553.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler:handler}
  self553.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler:handler}
  self553.processorMap["findAndAddContactsByUserid"] = &talkServiceProcessorFindAndAddContactsByUserid{handler:handler}
  self553.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler:handler}
  self553.processorMap["unfollow"] = &talkServiceProcessorUnfollow{handler:handler}
  self553.processorMap["closeProximityMatch"] = &talkServiceProcessorCloseProximityMatch{handler:handler}
  self553.processorMap["inviteFriendsBySms"] = &talkServiceProcessorInviteFriendsBySms{handler:handler}
  self553.processorMap["getChatEffectMetaList"] = &talkServiceProcessorGetChatEffectMetaList{handler:handler}
  self553.processorMap["removeAllMessages"] = &talkServiceProcessorRemoveAllMessages{handler:handler}
  self553.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler:handler}
  self553.processorMap["getAnalyticsInfo"] = &talkServiceProcessorGetAnalyticsInfo{handler:handler}
  self553.processorMap["getRecommendationIds"] = &talkServiceProcessorGetRecommendationIds{handler:handler}
  self553.processorMap["notifyRegistrationComplete"] = &talkServiceProcessorNotifyRegistrationComplete{handler:handler}
  self553.processorMap["wakeUpLongPolling"] = &talkServiceProcessorWakeUpLongPolling{handler:handler}
  self553.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler:handler}
  self553.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler:handler}
  self553.processorMap["sendEchoPush"] = &talkServiceProcessorSendEchoPush{handler:handler}
  self553.processorMap["verifyAccountMigrationPincode"] = &talkServiceProcessorVerifyAccountMigrationPincode{handler:handler}
  self553.processorMap["notifyInstalled"] = &talkServiceProcessorNotifyInstalled{handler:handler}
  self553.processorMap["verifyQrcode"] = &talkServiceProcessorVerifyQrcode{handler:handler}
  self553.processorMap["findContactByMetaTag"] = &talkServiceProcessorFindContactByMetaTag{handler:handler}
  self553.processorMap["findContactsByPhone"] = &talkServiceProcessorFindContactsByPhone{handler:handler}
  self553.processorMap["registerWithPhoneNumber"] = &talkServiceProcessorRegisterWithPhoneNumber{handler:handler}
  self553.processorMap["updateProfileAttribute"] = &talkServiceProcessorUpdateProfileAttribute{handler:handler}
  self553.processorMap["updateProfileAttributes"] = &talkServiceProcessorUpdateProfileAttributes{handler:handler}
  self553.processorMap["updateSettingsAttributes2"] = &talkServiceProcessorUpdateSettingsAttributes2{handler:handler}
  self553.processorMap["decryptFollowEMid"] = &talkServiceProcessorDecryptFollowEMid{handler:handler}
  self553.processorMap["updateAccountMigrationPincode"] = &talkServiceProcessorUpdateAccountMigrationPincode{handler:handler}
  self553.processorMap["isUseridAvailable"] = &talkServiceProcessorIsUseridAvailable{handler:handler}
  self553.processorMap["getFollowers"] = &talkServiceProcessorGetFollowers{handler:handler}
  self553.processorMap["createAccountMigrationPincodeSession"] = &talkServiceProcessorCreateAccountMigrationPincodeSession{handler:handler}
  self553.processorMap["resendPinCode"] = &talkServiceProcessorResendPinCode{handler:handler}
  self553.processorMap["getFollowings"] = &talkServiceProcessorGetFollowings{handler:handler}
  self553.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler:handler}
  self553.processorMap["getLastOpRevision"] = &talkServiceProcessorGetLastOpRevision{handler:handler}
  self553.processorMap["findContactByUserTicket"] = &talkServiceProcessorFindContactByUserTicket{handler:handler}
  self553.processorMap["finishUpdateVerification"] = &talkServiceProcessorFinishUpdateVerification{handler:handler}
  self553.processorMap["getAcceptedProximityMatches"] = &talkServiceProcessorGetAcceptedProximityMatches{handler:handler}
  self553.processorMap["clearRingbackTone"] = &talkServiceProcessorClearRingbackTone{handler:handler}
  self553.processorMap["unregisterUserAndDevice"] = &talkServiceProcessorUnregisterUserAndDevice{handler:handler}
return self553
}

func (p *TalkServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x554 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x554.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x554

}

type talkServiceProcessorFetchOps struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOpsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFetchOpsResult{}
  var retval []*Operation
  if retval, err2 = p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchOps", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileResult{}
  if err2 = p.handler.UpdateProfile(ctx, args.ReqSeq, args.Profile); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFetchOperations struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOperations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOperationsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOperations", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFetchOperationsResult{}
  var retval []*Operation
  if retval, err2 = p.handler.FetchOperations(ctx, args.LocalRev, args.Count); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ShouldSyncException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOperations: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOperations", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchOperations", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecentFriendRequests struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecentFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecentFriendRequestsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecentFriendRequestsResult{}
  var retval *FriendRequestsInfo
  if retval, err2 = p.handler.GetRecentFriendRequests(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentFriendRequests: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecentFriendRequests", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChats struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatsResult{}
  var retval *GetChatsResponse
  if retval, err2 = p.handler.GetChats(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChats: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChats", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecentMessages struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecentMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecentMessagesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentMessages", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecentMessagesResult{}
  var retval []*Message
  if retval, err2 = p.handler.GetRecentMessages(ctx, args.MessageBoxId, args.MessagesCount); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentMessages: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentMessages", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecentMessages", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecentMessagesV2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecentMessagesV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecentMessagesV2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentMessagesV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecentMessagesV2Result{}
  var retval []*Message
  if retval, err2 = p.handler.GetRecentMessagesV2(ctx, args.MessageBoxId, args.MessagesCount); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentMessagesV2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecentMessagesV2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecentMessagesV2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetCountryWithRequestIp struct {
  handler TalkService
}

func (p *talkServiceProcessorGetCountryWithRequestIp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetCountryWithRequestIpArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountryWithRequestIp", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetCountryWithRequestIpResult{}
  var retval string
  if retval, err2 = p.handler.GetCountryWithRequestIp(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountryWithRequestIp", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCountryWithRequestIp", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatRoomAnnouncements struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncements) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatRoomAnnouncementsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncements", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatRoomAnnouncementsResult{}
  var retval []*ChatRoomAnnouncement
  if retval, err2 = p.handler.GetChatRoomAnnouncements(ctx, args.ChatRoomMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncements: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncements", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncements", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroupWithoutMembers struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroupWithoutMembers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupWithoutMembersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupWithoutMembers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupWithoutMembersResult{}
  var retval *Group
  if retval, err2 = p.handler.GetGroupWithoutMembers(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupWithoutMembers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupWithoutMembers", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupResult{}
  var retval *Group
  if retval, err2 = p.handler.GetGroup(ctx, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetGroups struct {
  handler TalkService
}

func (p *talkServiceProcessorGetGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetGroupsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroups", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetGroupsResult{}
  var retval []*Group
  if retval, err2 = p.handler.GetGroups(ctx, args.GroupIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroups: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroups", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroups", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateContactSettingArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateContactSettingResult{}
  if err2 = p.handler.UpdateContactSetting(ctx, args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateGroup struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateGroupArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateGroupResult{}
  if err2 = p.handler.UpdateGroup(ctx, args.ReqSeq, args.Group); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateGroup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateGroup", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContact struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactResult{}
  var retval *Contact
  if retval, err2 = p.handler.GetContact(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEPublicKeys struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEPublicKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEPublicKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastE2EEPublicKeysResult{}
  var retval map[string]*E2EEPublicKey
  if retval, err2 = p.handler.GetLastE2EEPublicKeys(ctx, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRingtone struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRingtone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRingtoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingtone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRingtoneResult{}
  var retval *Ringtone
  if retval, err2 = p.handler.GetRingtone(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingtone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingtone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRingtone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNegotiateE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorNegotiateE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNegotiateE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "negotiateE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNegotiateE2EEPublicKeyResult{}
  var retval *E2EENegotiationResult_
  if retval, err2 = p.handler.NegotiateE2EEPublicKey(ctx, args.Mid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing negotiateE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "negotiateE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "negotiateE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByUseridResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByUserid(ctx, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorClearRingtone struct {
  handler TalkService
}

func (p *talkServiceProcessorClearRingtone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceClearRingtoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clearRingtone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceClearRingtoneResult{}
  if err2 = p.handler.ClearRingtone(ctx, args.Oid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearRingtone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "clearRingtone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "clearRingtone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSetNotificationsEnabled struct {
  handler TalkService
}

func (p *talkServiceProcessorSetNotificationsEnabled) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSetNotificationsEnabledArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setNotificationsEnabled", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSetNotificationsEnabledResult{}
  if err2 = p.handler.SetNotificationsEnabled(ctx, args.ReqSeq, args.Type, args.Target, args.Enablement); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNotificationsEnabled: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setNotificationsEnabled", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setNotificationsEnabled", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteOtherFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteOtherFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteOtherFromChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDeleteOtherFromChatResult{}
  var retval *DeleteOtherFromChatResponse
  if retval, err2 = p.handler.DeleteOtherFromChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteOtherFromChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoChat struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoChatResult{}
  var retval *InviteIntoChatResponse
  if retval, err2 = p.handler.InviteIntoChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitationByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationByTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptChatInvitationByTicketResult{}
  var retval *AcceptChatInvitationByTicketResponse
  if retval, err2 = p.handler.AcceptChatInvitationByTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitationByTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptChatInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptGroupInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptGroupInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptGroupInvitationResult{}
  if err2 = p.handler.AcceptGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteSelfFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteSelfFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteSelfFromChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDeleteSelfFromChatResult{}
  var retval *DeleteSelfFromChatResponse
  if retval, err2 = p.handler.DeleteSelfFromChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSelfFromChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindChatByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindChatByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindChatByTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findChatByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindChatByTicketResult{}
  var retval *FindChatByTicketResponse
  if retval, err2 = p.handler.FindChatByTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findChatByTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findChatByTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findChatByTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCancelChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorCancelChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCancelChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCancelChatInvitationResult{}
  var retval *CancelChatInvitationResponse
  if retval, err2 = p.handler.CancelChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptChatInvitationResult{}
  var retval *AcceptChatInvitationResponse
  if retval, err2 = p.handler.AcceptChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetMessageBoxes struct {
  handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetMessageBoxesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMessageBoxes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetMessageBoxesResult{}
  var retval *MessageBoxList
  if retval, err2 = p.handler.GetMessageBoxes(ctx, args.MessageBoxListRequest, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxes: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getMessageBoxes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getMessageBoxes", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateChatResult{}
  var retval *UpdateChatResponse
  if retval, err2 = p.handler.UpdateChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReissueChatTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorReissueChatTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReissueChatTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReissueChatTicketResult{}
  var retval *ReissueChatTicketResponse
  if retval, err2 = p.handler.ReissueChatTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueChatTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllChatMids struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllChatMids) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllChatMidsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAllChatMidsResult{}
  var retval *GetAllChatMidsResponse
  if retval, err2 = p.handler.GetAllChatMids(ctx, args.Request, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllChatMids: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRejectChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorRejectChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRejectChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRejectChatInvitationResult{}
  var retval *RejectChatInvitationResponse
  if retval, err2 = p.handler.RejectChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateChatResult{}
  var retval *CreateChatResponse
  if retval, err2 = p.handler.CreateChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatRoomAnnouncementsBulk struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncementsBulk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatRoomAnnouncementsBulkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatRoomAnnouncementsBulkResult{}
  var retval map[string][]*ChatRoomAnnouncement
  if retval, err2 = p.handler.GetChatRoomAnnouncementsBulk(ctx, args.ChatRoomMids, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncementsBulk: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChatRoomAnnouncementsBulk", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorStartUpdateVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorStartUpdateVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceStartUpdateVerificationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "startUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceStartUpdateVerificationResult{}
  var retval *VerificationSessionData
  if retval, err2 = p.handler.StartUpdateVerification(ctx, args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Locale, args.SimInfo); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startUpdateVerification: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "startUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "startUpdateVerification", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorStartVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorStartVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceStartVerificationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "startVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceStartVerificationResult{}
  var retval *VerificationSessionData
  if retval, err2 = p.handler.StartVerification(ctx, args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Mid, args.Locale, args.SimInfo, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startVerification: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "startVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "startVerification", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorChangeVerificationMethod struct {
  handler TalkService
}

func (p *talkServiceProcessorChangeVerificationMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceChangeVerificationMethodArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "changeVerificationMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceChangeVerificationMethodResult{}
  var retval *VerificationSessionData
  if retval, err2 = p.handler.ChangeVerificationMethod(ctx, args.SessionId, args.Method); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeVerificationMethod: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "changeVerificationMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "changeVerificationMethod", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetEncryptedIdentityV3 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetEncryptedIdentityV3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetEncryptedIdentityV3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getEncryptedIdentityV3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetEncryptedIdentityV3Result{}
  var retval *GetEncryptedIdentityV3Response
  if retval, err2 = p.handler.GetEncryptedIdentityV3(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEncryptedIdentityV3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getEncryptedIdentityV3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getEncryptedIdentityV3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEGroupSharedKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEGroupSharedKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.GetE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid, args.GroupKeyId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterE2EEGroupKey struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterE2EEGroupKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterE2EEGroupKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEGroupKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterE2EEGroupKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.RegisterE2EEGroupKey(ctx, args.KeyVersion, args.ChatMid, args.Members, args.KeyIds, args.EncryptedSharedKeys); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerE2EEGroupKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEGroupKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerE2EEGroupKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGenerateUserTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGenerateUserTicketResult{}
  var retval *Ticket
  if retval, err2 = p.handler.GenerateUserTicket(ctx, args.ExpirationTime, args.MaxUseCount); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterE2EEPublicKeyResult{}
  var retval *E2EEPublicKey
  if retval, err2 = p.handler.RegisterE2EEPublicKey(ctx, args.ReqSeq, args.PublicKey); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEPublicKeyResult{}
  var retval *E2EEPublicKey
  if retval, err2 = p.handler.GetE2EEPublicKey(ctx, args.Mid, args.KeyVersion, args.KeyId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRSAKeyInfo struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRSAKeyInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRSAKeyInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRSAKeyInfoResult{}
  var retval *RSAKey
  if retval, err2 = p.handler.GetRSAKeyInfo(ctx, args.Provider); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithSnsId struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithSnsIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterWithSnsIdResult{}
  var retval *RegisterWithSnsIdResult_
  if retval, err2 = p.handler.RegisterWithSnsId(ctx, args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerWithSnsId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindSnsIdUserStatus struct {
  handler TalkService
}

func (p *talkServiceProcessorFindSnsIdUserStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindSnsIdUserStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findSnsIdUserStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindSnsIdUserStatusResult{}
  var retval *SnsIdUserStatus
  if retval, err2 = p.handler.FindSnsIdUserStatus(ctx, args.SnsIdType, args.SnsAccessToken, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findSnsIdUserStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findSnsIdUserStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findSnsIdUserStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContactRegistration struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContactRegistration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactRegistrationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContactRegistration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactRegistrationResult{}
  var retval *ContactRegistration
  if retval, err2 = p.handler.GetContactRegistration(ctx, args.ID, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContactRegistration: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContactRegistration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContactRegistration", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyPhoneNumberArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyPhoneNumberResult{}
  var retval *PhoneVerificationResult_
  if retval, err2 = p.handler.VerifyPhoneNumber(ctx, args.SessionId, args.PinCode, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcquireEncryptedAccessToken struct {
  handler TalkService
}

func (p *talkServiceProcessorAcquireEncryptedAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcquireEncryptedAccessTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcquireEncryptedAccessTokenResult{}
  var retval string
  if retval, err2 = p.handler.AcquireEncryptedAccessToken(ctx, args.FeatureType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithSnsIdAndIdentityCredential struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsIdAndIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
  var retval string
  if retval, err2 = p.handler.RegisterWithSnsIdAndIdentityCredential(ctx, args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerWithSnsIdAndIdentityCredential", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetShakeEventV1 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetShakeEventV1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetShakeEventV1Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getShakeEventV1", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetShakeEventV1Result{}
  var retval string
  if retval, err2 = p.handler.GetShakeEventV1(ctx, args.Location); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getShakeEventV1: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getShakeEventV1", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getShakeEventV1", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterDeviceWithIdentityCredential struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterDeviceWithIdentityCredentialResult{}
  var retval string
  if retval, err2 = p.handler.RegisterDeviceWithIdentityCredential(ctx, args.SessionId, args.Identifier, args.Verifier, args.Provider, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerDeviceWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateAndGetNearby struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateAndGetNearby) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateAndGetNearbyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateAndGetNearby", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateAndGetNearbyResult{}
  var retval []*NearbyEntry
  if retval, err2 = p.handler.UpdateAndGetNearby(ctx, args.Latitude, args.Longitude, args.Accuracy, args.NetworkStatus, args.AltitudeMeters, args.VelocityMetersPerSecond, args.BearingDegrees); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAndGetNearby: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateAndGetNearby", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateAndGetNearby", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFriendRequests struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFriendRequestsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetFriendRequestsResult{}
  var retval []*FriendRequest
  if retval, err2 = p.handler.GetFriendRequests(ctx, args.Direction, args.LastSeenSeqId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFriendRequests: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getFriendRequests", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnsendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorUnsendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnsendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnsendMessageResult{}
  if err2 = p.handler.UnsendMessage(ctx, args.Seq, args.MessageId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockRecommendationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceBlockRecommendationResult{}
  if err2 = p.handler.BlockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByMidArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByMidResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByMid(ctx, args.ReqSeq, args.Mid, args.Type, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestResendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestResendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestResendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "requestResendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRequestResendMessageResult{}
  if err2 = p.handler.RequestResendMessage(ctx, args.ReqSeq, args.SenderMid, args.MessageId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestResendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "requestResendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "requestResendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatRemoved struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatRemovedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendChatRemovedResult{}
  if err2 = p.handler.SendChatRemoved(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRespondResendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorRespondResendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRespondResendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "respondResendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRespondResendMessageResult{}
  if err2 = p.handler.RespondResendMessage(ctx, args.ReqSeq, args.ReceiverMid, args.OriginalMessageId, args.ResendMessage, args.ErrorCode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing respondResendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "respondResendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "respondResendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoRoomResult{}
  if err2 = p.handler.InviteIntoRoom(ctx, args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRespondE2EEKeyExchange struct {
  handler TalkService
}

func (p *talkServiceProcessorRespondE2EEKeyExchange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRespondE2EEKeyExchangeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "respondE2EEKeyExchange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRespondE2EEKeyExchangeResult{}
  if err2 = p.handler.RespondE2EEKeyExchange(ctx, args.ReqSeq, args.EncryptedKeyChain, args.HashKeyChain); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing respondE2EEKeyExchange: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "respondE2EEKeyExchange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "respondE2EEKeyExchange", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSyncContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorSyncContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSyncContactsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "syncContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSyncContactsResult{}
  var retval map[string]*ContactRegistration
  if retval, err2 = p.handler.SyncContacts(ctx, args.ReqSeq, args.LocalContacts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncContacts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "syncContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "syncContacts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByPhone struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByPhoneResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByPhone(ctx, args.ReqSeq, args.Phones, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifySleep struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifySleep) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifySleepArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifySleep", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifySleepResult{}
  if err2 = p.handler.NotifySleep(ctx, args.LastRev, args.Badge); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifySleep: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifySleep", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifySleep", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorReportProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reportProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReportProfileResult{}
  if err2 = p.handler.ReportProfile(ctx, args.SyncOpRevision, args.Profile); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reportProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reportProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyUpdated struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyUpdatedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifyUpdatedResult{}
  if err2 = p.handler.NotifyUpdated(ctx, args.LastRev, args.DeviceInfo, args.UdidHash, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyUpdated: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportSettings struct {
  handler TalkService
}

func (p *talkServiceProcessorReportSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportSettingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reportSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReportSettingsResult{}
  if err2 = p.handler.ReportSettings(ctx, args.SyncOpRevision, args.Settings); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportSettings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reportSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reportSettings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedContactIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBlockedContactIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetBlockedContactIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorOpenProximityMatch struct {
  handler TalkService
}

func (p *talkServiceProcessorOpenProximityMatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceOpenProximityMatchArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "openProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceOpenProximityMatchResult{}
  var retval string
  if retval, err2 = p.handler.OpenProximityMatch(ctx, args.Location, args.NetworkStatus); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openProximityMatch: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "openProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "openProximityMatch", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveFriendRequest struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveFriendRequestArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveFriendRequestResult{}
  if err2 = p.handler.RemoveFriendRequest(ctx, args.Direction, args.MidOrEMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateNotificationTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateNotificationTokenResult{}
  if err2 = p.handler.UpdateNotificationToken(ctx, args.Token, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateExtendedProfileAttribute struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateExtendedProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateExtendedProfileAttributeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateExtendedProfileAttributeResult{}
  if err2 = p.handler.UpdateExtendedProfileAttribute(ctx, args.ReqSeq, args.Attr, args.ExtendedProfile); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateExtendedProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyIdentityCredentialWithResult_ struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyIdentityCredentialWithResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyIdentityCredentialWithResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyIdentityCredentialWithResultResult{}
  var retval *UserAuthStatus
  if retval, err2 = p.handler.VerifyIdentityCredentialWithResult_(ctx, args.IdentityCredential, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyIdentityCredentialWithResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestAccountPasswordResetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRequestAccountPasswordResetResult{}
  if err2 = p.handler.RequestAccountPasswordReset(ctx, args.Identifier, args.Provider, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendPostback struct {
  handler TalkService
}

func (p *talkServiceProcessorSendPostback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendPostbackArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendPostback", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendPostbackResult{}
  if err2 = p.handler.SendPostback(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendPostback: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendPostback", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendPostback", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorTryFriendRequest struct {
  handler TalkService
}

func (p *talkServiceProcessorTryFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceTryFriendRequestArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "tryFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceTryFriendRequestResult{}
  if err2 = p.handler.TryFriendRequest(ctx, args.MidOrEMid, args.Method, args.FriendRequestParams); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tryFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "tryFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "tryFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptProximityMatches struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptProximityMatches) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptProximityMatchesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptProximityMatchesResult{}
  if err2 = p.handler.AcceptProximityMatches(ctx, args.SessionId, args.Ids); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptProximityMatches: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptProximityMatches", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactsResult{}
  var retval []*Contact
  if retval, err2 = p.handler.GetContacts(ctx, args.Ids); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContacts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportDeviceState struct {
  handler TalkService
}

func (p *talkServiceProcessorReportDeviceState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportDeviceStateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reportDeviceState", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReportDeviceStateResult{}
  if err2 = p.handler.ReportDeviceState(ctx, args.BooleanState, args.StringState); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportDeviceState: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reportDeviceState", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reportDeviceState", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceBlockContactResult{}
  if err2 = p.handler.BlockContact(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "blockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "blockContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetExtendedProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetExtendedProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetExtendedProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getExtendedProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetExtendedProfileResult{}
  var retval *ExtendedProfile
  if retval, err2 = p.handler.GetExtendedProfile(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExtendedProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getExtendedProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getExtendedProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetProfileResult{}
  var retval *Profile
  if retval, err2 = p.handler.GetProfile(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsAttributes2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSettingsAttributes2Result{}
  var retval *Settings
  if retval, err2 = p.handler.GetSettingsAttributes2(ctx, args.AttributesToRetrieve); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetProximityMatchCandidateList struct {
  handler TalkService
}

func (p *talkServiceProcessorGetProximityMatchCandidateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetProximityMatchCandidateListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetProximityMatchCandidateListResult{}
  var retval *ProximityMatchCandidateResult_
  if retval, err2 = p.handler.GetProximityMatchCandidateList(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidateList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getProximityMatchCandidateList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactByMetaTag struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactByMetaTagArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactByMetaTagResult{}
  var retval *PendingAgreementsResponse
  if retval, err2 = p.handler.FindAndAddContactByMetaTag(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactByMetaTag: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetMessageReadRange struct {
  handler TalkService
}

func (p *talkServiceProcessorGetMessageReadRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetMessageReadRangeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMessageReadRange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetMessageReadRangeResult{}
  var retval []*TMessageReadRange
  if retval, err2 = p.handler.GetMessageReadRange(ctx, args.ChatIds, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageReadRange: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getMessageReadRange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getMessageReadRange", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterUseridResult{}
  var retval bool
  if retval, err2 = p.handler.RegisterUserid(ctx, args.ReqSeq, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportPushRecvReports struct {
  handler TalkService
}

func (p *talkServiceProcessorReportPushRecvReports) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportPushRecvReportsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reportPushRecvReports", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReportPushRecvReportsResult{}
  if err2 = p.handler.ReportPushRecvReports(ctx, args.ReqSeq, args.PushRecvReports); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportPushRecvReports: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reportPushRecvReports", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reportPushRecvReports", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNoop struct {
  handler TalkService
}

func (p *talkServiceProcessorNoop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNoopArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "noop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNoopResult{}
  if err2 = p.handler.Noop(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "noop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "noop", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedRecommendationIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBlockedRecommendationIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetBlockedRecommendationIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveFollower struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveFollower) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveFollowerArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFollower", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveFollowerResult{}
  if err2 = p.handler.RemoveFollower(ctx, args.RemoveFollowerRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFollower: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeFollower", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeFollower", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyAccountMigration struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyAccountMigration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyAccountMigrationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountMigration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyAccountMigrationResult{}
  if err2 = p.handler.VerifyAccountMigration(ctx, args.MigrationSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountMigration: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountMigration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyAccountMigration", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSettingsResult{}
  var retval *Settings
  if retval, err2 = p.handler.GetSettings(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSettings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEGroupSharedKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastE2EEGroupSharedKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.GetLastE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRingbackTone struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRingbackTone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRingbackToneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRingbackToneResult{}
  var retval *RingbackTone
  if retval, err2 = p.handler.GetRingbackTone(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingbackTone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRingbackTone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorLeaveRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceLeaveRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceLeaveRoomResult{}
  if err2 = p.handler.LeaveRoom(ctx, args.ReqSeq, args.RoomId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatChecked struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatCheckedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendChatCheckedResult{}
  if err2 = p.handler.SendChatChecked(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByUseridResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByUserid(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllContactIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAllContactIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetAllContactIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnfollow struct {
  handler TalkService
}

func (p *talkServiceProcessorUnfollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnfollowArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unfollow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnfollowResult{}
  if err2 = p.handler.Unfollow(ctx, args.UnfollowRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfollow: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unfollow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unfollow", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCloseProximityMatch struct {
  handler TalkService
}

func (p *talkServiceProcessorCloseProximityMatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCloseProximityMatchArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "closeProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCloseProximityMatchResult{}
  if err2 = p.handler.CloseProximityMatch(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeProximityMatch: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "closeProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "closeProximityMatch", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteFriendsBySms struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteFriendsBySms) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteFriendsBySmsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteFriendsBySms", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteFriendsBySmsResult{}
  if err2 = p.handler.InviteFriendsBySms(ctx, args.PhoneNumberList); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteFriendsBySms: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteFriendsBySms", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteFriendsBySms", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatEffectMetaList struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatEffectMetaList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatEffectMetaListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatEffectMetaList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatEffectMetaListResult{}
  var retval []*ChatEffectMeta
  if retval, err2 = p.handler.GetChatEffectMetaList(ctx, args.Categories); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatEffectMetaList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChatEffectMetaList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChatEffectMetaList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveAllMessages struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveAllMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveAllMessagesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRemoveAllMessagesResult{}
  if err2 = p.handler.RemoveAllMessages(ctx, args.Seq, args.LastMessageId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeAllMessages", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnblockContactResult{}
  if err2 = p.handler.UnblockContact(ctx, args.ReqSeq, args.ID, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unblockContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAnalyticsInfo struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAnalyticsInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAnalyticsInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAnalyticsInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAnalyticsInfoResult{}
  var retval *AnalyticsInfo
  if retval, err2 = p.handler.GetAnalyticsInfo(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAnalyticsInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAnalyticsInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAnalyticsInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecommendationIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecommendationIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetRecommendationIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyRegistrationComplete struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyRegistrationComplete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyRegistrationCompleteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyRegistrationComplete", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifyRegistrationCompleteResult{}
  if err2 = p.handler.NotifyRegistrationComplete(ctx, args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyRegistrationComplete", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyRegistrationComplete", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorWakeUpLongPolling struct {
  handler TalkService
}

func (p *talkServiceProcessorWakeUpLongPolling) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceWakeUpLongPollingArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "wakeUpLongPolling", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceWakeUpLongPollingResult{}
  var retval bool
  if retval, err2 = p.handler.WakeUpLongPolling(ctx, args.ClientRevision); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wakeUpLongPolling: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "wakeUpLongPolling", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "wakeUpLongPolling", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockRecommendationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnblockRecommendationResult{}
  if err2 = p.handler.UnblockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendMessageResult{}
  var retval *Message
  if retval, err2 = p.handler.SendMessage(ctx, args.Seq, args.Message); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendEchoPush struct {
  handler TalkService
}

func (p *talkServiceProcessorSendEchoPush) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendEchoPushArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendEchoPushResult{}
  if err2 = p.handler.SendEchoPush(ctx, args.Text); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEchoPush: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyAccountMigrationPincode struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyAccountMigrationPincode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyAccountMigrationPincodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyAccountMigrationPincodeResult{}
  if err2 = p.handler.VerifyAccountMigrationPincode(ctx, args.MigrationPincodeSessionId, args.AccountMigrationPincode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountMigrationPincode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyAccountMigrationPincode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyInstalled struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyInstalled) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyInstalledArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyInstalled", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifyInstalledResult{}
  if err2 = p.handler.NotifyInstalled(ctx, args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyInstalled: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyInstalled", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyInstalled", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyQrcode struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyQrcode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyQrcodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyQrcodeResult{}
  var retval string
  if retval, err2 = p.handler.VerifyQrcode(ctx, args.Verifier, args.PinCode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByMetaTag struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByMetaTagArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByMetaTagResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByMetaTag(ctx, args.SearchId, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByMetaTag: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactsByPhone struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactsByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactsByPhoneResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindContactsByPhone(ctx, args.Phones); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithPhoneNumberArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterWithPhoneNumberResult{}
  var retval *RegisterWithPhoneNumberResult_
  if retval, err2 = p.handler.RegisterWithPhoneNumber(ctx, args.SessionId, args.MigrationPincodeSessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerWithPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerWithPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfileAttribute struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileAttributeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileAttributeResult{}
  if err2 = p.handler.UpdateProfileAttribute(ctx, args.ReqSeq, args.Attr, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfileAttributes struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileAttributesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileAttributesResult{}
  if err2 = p.handler.UpdateProfileAttributes(ctx, args.ReqSeq, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttributes: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfileAttributes", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateSettingsAttributes2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateSettingsAttributes2Result{}
  var retval []SettingsAttributeEx
  if retval, err2 = p.handler.UpdateSettingsAttributes2(ctx, args.ReqSeq, args.AttributesToUpdate, args.Settings); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDecryptFollowEMid struct {
  handler TalkService
}

func (p *talkServiceProcessorDecryptFollowEMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDecryptFollowEMidArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "decryptFollowEMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDecryptFollowEMidResult{}
  var retval string
  if retval, err2 = p.handler.DecryptFollowEMid(ctx, args.EMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decryptFollowEMid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "decryptFollowEMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "decryptFollowEMid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateAccountMigrationPincode struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateAccountMigrationPincode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateAccountMigrationPincodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateAccountMigrationPincodeResult{}
  if err2 = p.handler.UpdateAccountMigrationPincode(ctx, args.AccountMigrationPincode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAccountMigrationPincode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateAccountMigrationPincode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorIsUseridAvailable struct {
  handler TalkService
}

func (p *talkServiceProcessorIsUseridAvailable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceIsUseridAvailableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "isUseridAvailable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceIsUseridAvailableResult{}
  var retval bool
  if retval, err2 = p.handler.IsUseridAvailable(ctx, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUseridAvailable: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "isUseridAvailable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "isUseridAvailable", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFollowers struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFollowers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFollowersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetFollowersResult{}
  var retval *GetFollowersResponse
  if retval, err2 = p.handler.GetFollowers(ctx, args.GetFollowersRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowers: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getFollowers", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateAccountMigrationPincodeSession struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateAccountMigrationPincodeSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateAccountMigrationPincodeSessionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createAccountMigrationPincodeSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateAccountMigrationPincodeSessionResult{}
  var retval string
  if retval, err2 = p.handler.CreateAccountMigrationPincodeSession(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createAccountMigrationPincodeSession: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createAccountMigrationPincodeSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createAccountMigrationPincodeSession", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorResendPinCode struct {
  handler TalkService
}

func (p *talkServiceProcessorResendPinCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceResendPinCodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "resendPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceResendPinCodeResult{}
  if err2 = p.handler.ResendPinCode(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendPinCode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "resendPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "resendPinCode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFollowings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFollowings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFollowingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetFollowingsResult{}
  var retval *GetFollowingsResponse
  if retval, err2 = p.handler.GetFollowings(ctx, args.GetFollowingsRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getFollowings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getFollowings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetServerTime struct {
  handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetServerTimeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getServerTime", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetServerTimeResult{}
  var retval int64
  if retval, err2 = p.handler.GetServerTime(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getServerTime", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getServerTime", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastOpRevision struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastOpRevision) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastOpRevisionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastOpRevisionResult{}
  var retval int64
  if retval, err2 = p.handler.GetLastOpRevision(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUserTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByUserTicketResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByUserTicket(ctx, args.TicketIdWithTag); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFinishUpdateVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorFinishUpdateVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFinishUpdateVerificationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "finishUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFinishUpdateVerificationResult{}
  if err2 = p.handler.FinishUpdateVerification(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishUpdateVerification: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "finishUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "finishUpdateVerification", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAcceptedProximityMatches struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAcceptedProximityMatches) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAcceptedProximityMatchesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAcceptedProximityMatchesResult{}
  var retval []string
  if retval, err2 = p.handler.GetAcceptedProximityMatches(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAcceptedProximityMatches", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorClearRingbackTone struct {
  handler TalkService
}

func (p *talkServiceProcessorClearRingbackTone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceClearRingbackToneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clearRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceClearRingbackToneResult{}
  if err2 = p.handler.ClearRingbackTone(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearRingbackTone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "clearRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "clearRingbackTone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnregisterUserAndDevice struct {
  handler TalkService
}

func (p *talkServiceProcessorUnregisterUserAndDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnregisterUserAndDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnregisterUserAndDeviceResult{}
  var retval string
  if retval, err2 = p.handler.UnregisterUserAndDevice(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type TalkServiceFetchOpsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  GlobalRev int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
  IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewTalkServiceFetchOpsArgs() *TalkServiceFetchOpsArgs {
  return &TalkServiceFetchOpsArgs{}
}


func (p *TalkServiceFetchOpsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOpsArgs) GetCount() int32 {
  return p.Count
}

func (p *TalkServiceFetchOpsArgs) GetGlobalRev() int64 {
  return p.GlobalRev
}

func (p *TalkServiceFetchOpsArgs) GetIndividualRev() int64 {
  return p.IndividualRev
}
func (p *TalkServiceFetchOpsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GlobalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IndividualRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "globalRev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.GlobalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "individualRev", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IndividualRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOpsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOpsResult() *TalkServiceFetchOpsResult {
  return &TalkServiceFetchOpsResult{}
}

var TalkServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOpsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOpsResult_E_DEFAULT *TalkException
func (p *TalkServiceFetchOpsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFetchOpsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOpsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOpsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem555 := &Operation{}
    if err := _elem555.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem555), err)
    }
    p.Success = append(p.Success, _elem555)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Profile
type TalkServiceUpdateProfileArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Profile *Profile `thrift:"profile,2" db:"profile" json:"profile"`
}

func NewTalkServiceUpdateProfileArgs() *TalkServiceUpdateProfileArgs {
  return &TalkServiceUpdateProfileArgs{}
}


func (p *TalkServiceUpdateProfileArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateProfileArgs_Profile_DEFAULT *Profile
func (p *TalkServiceUpdateProfileArgs) GetProfile() *Profile {
  if !p.IsSetProfile() {
    return TalkServiceUpdateProfileArgs_Profile_DEFAULT
  }
return p.Profile
}
func (p *TalkServiceUpdateProfileArgs) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *TalkServiceUpdateProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Profile = &Profile{}
  if err := p.Profile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profile", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profile: ", p), err) }
  if err := p.Profile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profile: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileResult() *TalkServiceUpdateProfileResult {
  return &TalkServiceUpdateProfileResult{}
}

var TalkServiceUpdateProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
type TalkServiceFetchOperationsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTalkServiceFetchOperationsArgs() *TalkServiceFetchOperationsArgs {
  return &TalkServiceFetchOperationsArgs{}
}


func (p *TalkServiceFetchOperationsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOperationsArgs) GetCount() int32 {
  return p.Count
}
func (p *TalkServiceFetchOperationsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOperationsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOperationsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOperations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOperationsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOperationsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOperationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOperationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOperationsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShouldSyncException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOperationsResult() *TalkServiceFetchOperationsResult {
  return &TalkServiceFetchOperationsResult{}
}

var TalkServiceFetchOperationsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOperationsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOperationsResult_E_DEFAULT *ShouldSyncException
func (p *TalkServiceFetchOperationsResult) GetE() *ShouldSyncException {
  if !p.IsSetE() {
    return TalkServiceFetchOperationsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOperationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOperationsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOperationsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem556 := &Operation{}
    if err := _elem556.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem556), err)
    }
    p.Success = append(p.Success, _elem556)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ShouldSyncException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOperations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOperationsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOperationsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOperationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOperationsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecentFriendRequestsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecentFriendRequestsArgs() *TalkServiceGetRecentFriendRequestsArgs {
  return &TalkServiceGetRecentFriendRequestsArgs{}
}


func (p *TalkServiceGetRecentFriendRequestsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecentFriendRequestsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentFriendRequests_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentFriendRequestsResult struct {
  Success *FriendRequestsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecentFriendRequestsResult() *TalkServiceGetRecentFriendRequestsResult {
  return &TalkServiceGetRecentFriendRequestsResult{}
}

var TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT *FriendRequestsInfo
func (p *TalkServiceGetRecentFriendRequestsResult) GetSuccess() *FriendRequestsInfo {
  if !p.IsSetSuccess() {
    return TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRecentFriendRequestsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecentFriendRequestsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecentFriendRequestsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecentFriendRequestsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FriendRequestsInfo{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentFriendRequests_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentFriendRequestsResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetChatsArgs struct {
  Request *GetChatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetChatsArgs() *TalkServiceGetChatsArgs {
  return &TalkServiceGetChatsArgs{}
}

var TalkServiceGetChatsArgs_Request_DEFAULT *GetChatsRequest
func (p *TalkServiceGetChatsArgs) GetRequest() *GetChatsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetChatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceGetChatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetChatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetChatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetChatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatsResult struct {
  Success *GetChatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatsResult() *TalkServiceGetChatsResult {
  return &TalkServiceGetChatsResult{}
}

var TalkServiceGetChatsResult_Success_DEFAULT *GetChatsResponse
func (p *TalkServiceGetChatsResult) GetSuccess() *GetChatsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetChatsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetChatsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetChatsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsResult(%+v)", *p)
}

// Attributes:
//  - MessageBoxId
//  - MessagesCount
type TalkServiceGetRecentMessagesArgs struct {
  // unused field # 1
  MessageBoxId string `thrift:"messageBoxId,2" db:"messageBoxId" json:"messageBoxId"`
  MessagesCount int32 `thrift:"messagesCount,3" db:"messagesCount" json:"messagesCount"`
}

func NewTalkServiceGetRecentMessagesArgs() *TalkServiceGetRecentMessagesArgs {
  return &TalkServiceGetRecentMessagesArgs{}
}


func (p *TalkServiceGetRecentMessagesArgs) GetMessageBoxId() string {
  return p.MessageBoxId
}

func (p *TalkServiceGetRecentMessagesArgs) GetMessagesCount() int32 {
  return p.MessagesCount
}
func (p *TalkServiceGetRecentMessagesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageBoxId = v
}
  return nil
}

func (p *TalkServiceGetRecentMessagesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MessagesCount = v
}
  return nil
}

func (p *TalkServiceGetRecentMessagesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentMessagesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageBoxId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageBoxId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageBoxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageBoxId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageBoxId: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentMessagesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messagesCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messagesCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessagesCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messagesCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messagesCount: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentMessagesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentMessagesResult struct {
  Success []*Message `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecentMessagesResult() *TalkServiceGetRecentMessagesResult {
  return &TalkServiceGetRecentMessagesResult{}
}

var TalkServiceGetRecentMessagesResult_Success_DEFAULT []*Message

func (p *TalkServiceGetRecentMessagesResult) GetSuccess() []*Message {
  return p.Success
}
var TalkServiceGetRecentMessagesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecentMessagesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecentMessagesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecentMessagesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecentMessagesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecentMessagesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Message, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem557 := &Message{}
    if err := _elem557.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem557), err)
    }
    p.Success = append(p.Success, _elem557)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentMessagesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentMessagesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentMessagesResult(%+v)", *p)
}

// Attributes:
//  - MessageBoxId
//  - MessagesCount
type TalkServiceGetRecentMessagesV2Args struct {
  // unused field # 1
  MessageBoxId string `thrift:"messageBoxId,2" db:"messageBoxId" json:"messageBoxId"`
  MessagesCount int32 `thrift:"messagesCount,3" db:"messagesCount" json:"messagesCount"`
}

func NewTalkServiceGetRecentMessagesV2Args() *TalkServiceGetRecentMessagesV2Args {
  return &TalkServiceGetRecentMessagesV2Args{}
}


func (p *TalkServiceGetRecentMessagesV2Args) GetMessageBoxId() string {
  return p.MessageBoxId
}

func (p *TalkServiceGetRecentMessagesV2Args) GetMessagesCount() int32 {
  return p.MessagesCount
}
func (p *TalkServiceGetRecentMessagesV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageBoxId = v
}
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MessagesCount = v
}
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentMessagesV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageBoxId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageBoxId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageBoxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageBoxId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageBoxId: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentMessagesV2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messagesCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messagesCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessagesCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messagesCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messagesCount: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentMessagesV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentMessagesV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentMessagesV2Result struct {
  Success []*Message `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecentMessagesV2Result() *TalkServiceGetRecentMessagesV2Result {
  return &TalkServiceGetRecentMessagesV2Result{}
}

var TalkServiceGetRecentMessagesV2Result_Success_DEFAULT []*Message

func (p *TalkServiceGetRecentMessagesV2Result) GetSuccess() []*Message {
  return p.Success
}
var TalkServiceGetRecentMessagesV2Result_E_DEFAULT *TalkException
func (p *TalkServiceGetRecentMessagesV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecentMessagesV2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecentMessagesV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecentMessagesV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecentMessagesV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Message, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem558 := &Message{}
    if err := _elem558.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem558), err)
    }
    p.Success = append(p.Success, _elem558)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecentMessagesV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentMessagesV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentMessagesV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentMessagesV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentMessagesV2Result(%+v)", *p)
}

type TalkServiceGetCountryWithRequestIpArgs struct {
}

func NewTalkServiceGetCountryWithRequestIpArgs() *TalkServiceGetCountryWithRequestIpArgs {
  return &TalkServiceGetCountryWithRequestIpArgs{}
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountryWithRequestIp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountryWithRequestIpArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountryWithRequestIpResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountryWithRequestIpResult() *TalkServiceGetCountryWithRequestIpResult {
  return &TalkServiceGetCountryWithRequestIpResult{}
}

var TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT string
func (p *TalkServiceGetCountryWithRequestIpResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetCountryWithRequestIpResult_E_DEFAULT *TalkException
func (p *TalkServiceGetCountryWithRequestIpResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetCountryWithRequestIpResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetCountryWithRequestIpResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountryWithRequestIp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountryWithRequestIpResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMid
type TalkServiceGetChatRoomAnnouncementsArgs struct {
  // unused field # 1
  ChatRoomMid string `thrift:"chatRoomMid,2" db:"chatRoomMid" json:"chatRoomMid"`
}

func NewTalkServiceGetChatRoomAnnouncementsArgs() *TalkServiceGetChatRoomAnnouncementsArgs {
  return &TalkServiceGetChatRoomAnnouncementsArgs{}
}


func (p *TalkServiceGetChatRoomAnnouncementsArgs) GetChatRoomMid() string {
  return p.ChatRoomMid
}
func (p *TalkServiceGetChatRoomAnnouncementsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatRoomMid = v
}
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncements_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatRoomMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMid: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsResult struct {
  Success []*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsResult() *TalkServiceGetChatRoomAnnouncementsResult {
  return &TalkServiceGetChatRoomAnnouncementsResult{}
}

var TalkServiceGetChatRoomAnnouncementsResult_Success_DEFAULT []*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsResult) GetSuccess() []*ChatRoomAnnouncement {
  return p.Success
}
var TalkServiceGetChatRoomAnnouncementsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatRoomAnnouncementsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatRoomAnnouncementsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChatRoomAnnouncement, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem559 := &ChatRoomAnnouncement{}
    if err := _elem559.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem559), err)
    }
    p.Success = append(p.Success, _elem559)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncements_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupWithoutMembersArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupWithoutMembersArgs() *TalkServiceGetGroupWithoutMembersArgs {
  return &TalkServiceGetGroupWithoutMembersArgs{}
}


func (p *TalkServiceGetGroupWithoutMembersArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceGetGroupWithoutMembersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupWithoutMembers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupWithoutMembersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupWithoutMembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupWithoutMembersResult struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupWithoutMembersResult() *TalkServiceGetGroupWithoutMembersResult {
  return &TalkServiceGetGroupWithoutMembersResult{}
}

var TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT *Group
func (p *TalkServiceGetGroupWithoutMembersResult) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceGetGroupWithoutMembersResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetGroupWithoutMembersResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupWithoutMembersResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupWithoutMembersResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupWithoutMembersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupWithoutMembers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupWithoutMembersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupWithoutMembersResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type TalkServiceGetGroupArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceGetGroupArgs() *TalkServiceGetGroupArgs {
  return &TalkServiceGetGroupArgs{}
}


func (p *TalkServiceGetGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceGetGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceGetGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupResult struct {
  Success *Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupResult() *TalkServiceGetGroupResult {
  return &TalkServiceGetGroupResult{}
}

var TalkServiceGetGroupResult_Success_DEFAULT *Group
func (p *TalkServiceGetGroupResult) GetSuccess() *Group {
  if !p.IsSetSuccess() {
    return TalkServiceGetGroupResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Group{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupIds
type TalkServiceGetGroupsArgs struct {
  // unused field # 1
  GroupIds []string `thrift:"groupIds,2" db:"groupIds" json:"groupIds"`
}

func NewTalkServiceGetGroupsArgs() *TalkServiceGetGroupsArgs {
  return &TalkServiceGetGroupsArgs{}
}


func (p *TalkServiceGetGroupsArgs) GetGroupIds() []string {
  return p.GroupIds
}
func (p *TalkServiceGetGroupsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem560 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem560 = v
}
    p.GroupIds = append(p.GroupIds, _elem560)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupIds: ", p), err) }
  return err
}

func (p *TalkServiceGetGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetGroupsResult struct {
  Success []*Group `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetGroupsResult() *TalkServiceGetGroupsResult {
  return &TalkServiceGetGroupsResult{}
}

var TalkServiceGetGroupsResult_Success_DEFAULT []*Group

func (p *TalkServiceGetGroupsResult) GetSuccess() []*Group {
  return p.Success
}
var TalkServiceGetGroupsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetGroupsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetGroupsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetGroupsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetGroupsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Group, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem561 := &Group{}
    if err := _elem561.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem561), err)
    }
    p.Success = append(p.Success, _elem561)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetGroupsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetGroupsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetGroupsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetGroupsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type TalkServiceUpdateContactSettingArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Flag ContactSetting `thrift:"flag,3" db:"flag" json:"flag"`
  Value string `thrift:"value,4" db:"value" json:"value"`
}

func NewTalkServiceUpdateContactSettingArgs() *TalkServiceUpdateContactSettingArgs {
  return &TalkServiceUpdateContactSettingArgs{}
}


func (p *TalkServiceUpdateContactSettingArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateContactSettingArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceUpdateContactSettingArgs) GetFlag() ContactSetting {
  return p.Flag
}

func (p *TalkServiceUpdateContactSettingArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateContactSettingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactSetting(v)
  p.Flag = temp
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateContactSetting_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateContactSettingResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateContactSettingResult() *TalkServiceUpdateContactSettingResult {
  return &TalkServiceUpdateContactSettingResult{}
}

var TalkServiceUpdateContactSettingResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateContactSettingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateContactSettingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateContactSettingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateContactSettingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateContactSetting_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateContactSettingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Group
type TalkServiceUpdateGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Group *Group `thrift:"group,2" db:"group" json:"group"`
}

func NewTalkServiceUpdateGroupArgs() *TalkServiceUpdateGroupArgs {
  return &TalkServiceUpdateGroupArgs{}
}


func (p *TalkServiceUpdateGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateGroupArgs_Group_DEFAULT *Group
func (p *TalkServiceUpdateGroupArgs) GetGroup() *Group {
  if !p.IsSetGroup() {
    return TalkServiceUpdateGroupArgs_Group_DEFAULT
  }
return p.Group
}
func (p *TalkServiceUpdateGroupArgs) IsSetGroup() bool {
  return p.Group != nil
}

func (p *TalkServiceUpdateGroupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateGroupArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Group = &Group{}
  if err := p.Group.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateGroupArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateGroupArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := p.Group.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *TalkServiceUpdateGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateGroupResult() *TalkServiceUpdateGroupResult {
  return &TalkServiceUpdateGroupResult{}
}

var TalkServiceUpdateGroupResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateGroupResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateGroupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateGroupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateGroupResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateGroupResult(%+v)", *p)
}

// Attributes:
//  - ID
type TalkServiceGetContactArgs struct {
  // unused field # 1
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceGetContactArgs() *TalkServiceGetContactArgs {
  return &TalkServiceGetContactArgs{}
}


func (p *TalkServiceGetContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceGetContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactResult() *TalkServiceGetContactResult {
  return &TalkServiceGetContactResult{}
}

var TalkServiceGetContactResult_Success_DEFAULT *Contact
func (p *TalkServiceGetContactResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetLastE2EEPublicKeysArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEPublicKeysArgs() *TalkServiceGetLastE2EEPublicKeysArgs {
  return &TalkServiceGetLastE2EEPublicKeysArgs{}
}


func (p *TalkServiceGetLastE2EEPublicKeysArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEPublicKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEPublicKeys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEPublicKeysResult struct {
  Success map[string]*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEPublicKeysResult() *TalkServiceGetLastE2EEPublicKeysResult {
  return &TalkServiceGetLastE2EEPublicKeysResult{}
}

var TalkServiceGetLastE2EEPublicKeysResult_Success_DEFAULT map[string]*E2EEPublicKey

func (p *TalkServiceGetLastE2EEPublicKeysResult) GetSuccess() map[string]*E2EEPublicKey {
  return p.Success
}
var TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEPublicKeysResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*E2EEPublicKey, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key562 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key562 = v
}
    _val563 := &E2EEPublicKey{}
    if err := _val563.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val563), err)
    }
    p.Success[_key562] = _val563
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEPublicKeys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysResult(%+v)", *p)
}

type TalkServiceGetRingtoneArgs struct {
}

func NewTalkServiceGetRingtoneArgs() *TalkServiceGetRingtoneArgs {
  return &TalkServiceGetRingtoneArgs{}
}

func (p *TalkServiceGetRingtoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingtone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingtoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingtoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingtoneResult struct {
  Success *Ringtone `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingtoneResult() *TalkServiceGetRingtoneResult {
  return &TalkServiceGetRingtoneResult{}
}

var TalkServiceGetRingtoneResult_Success_DEFAULT *Ringtone
func (p *TalkServiceGetRingtoneResult) GetSuccess() *Ringtone {
  if !p.IsSetSuccess() {
    return TalkServiceGetRingtoneResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRingtoneResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRingtoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRingtoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRingtoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRingtoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRingtoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ringtone{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingtone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingtoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingtoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingtoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingtoneResult(%+v)", *p)
}

// Attributes:
//  - Mid
type TalkServiceNegotiateE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
}

func NewTalkServiceNegotiateE2EEPublicKeyArgs() *TalkServiceNegotiateE2EEPublicKeyArgs {
  return &TalkServiceNegotiateE2EEPublicKeyArgs{}
}


func (p *TalkServiceNegotiateE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}
func (p *TalkServiceNegotiateE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "negotiateE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNegotiateE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceNegotiateE2EEPublicKeyResult struct {
  Success *E2EENegotiationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNegotiateE2EEPublicKeyResult() *TalkServiceNegotiateE2EEPublicKeyResult {
  return &TalkServiceNegotiateE2EEPublicKeyResult{}
}

var TalkServiceNegotiateE2EEPublicKeyResult_Success_DEFAULT *E2EENegotiationResult_
func (p *TalkServiceNegotiateE2EEPublicKeyResult) GetSuccess() *E2EENegotiationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceNegotiateE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceNegotiateE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceNegotiateE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNegotiateE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNegotiateE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EENegotiationResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "negotiateE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNegotiateE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceFindContactByUseridArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceFindContactByUseridArgs() *TalkServiceFindContactByUseridArgs {
  return &TalkServiceFindContactByUseridArgs{}
}


func (p *TalkServiceFindContactByUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceFindContactByUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUseridResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUseridResult() *TalkServiceFindContactByUseridResult {
  return &TalkServiceFindContactByUseridResult{}
}

var TalkServiceFindContactByUseridResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUseridResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUseridResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridResult(%+v)", *p)
}

// Attributes:
//  - Oid
type TalkServiceClearRingtoneArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
}

func NewTalkServiceClearRingtoneArgs() *TalkServiceClearRingtoneArgs {
  return &TalkServiceClearRingtoneArgs{}
}


func (p *TalkServiceClearRingtoneArgs) GetOid() string {
  return p.Oid
}
func (p *TalkServiceClearRingtoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingtoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *TalkServiceClearRingtoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearRingtone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingtoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *TalkServiceClearRingtoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingtoneArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceClearRingtoneResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceClearRingtoneResult() *TalkServiceClearRingtoneResult {
  return &TalkServiceClearRingtoneResult{}
}

var TalkServiceClearRingtoneResult_E_DEFAULT *TalkException
func (p *TalkServiceClearRingtoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceClearRingtoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceClearRingtoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceClearRingtoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingtoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceClearRingtoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearRingtone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingtoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceClearRingtoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingtoneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Target
//  - Enablement
type TalkServiceSetNotificationsEnabledArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type MidType `thrift:"type,2" db:"type" json:"type"`
  Target string `thrift:"target,3" db:"target" json:"target"`
  Enablement bool `thrift:"enablement,4" db:"enablement" json:"enablement"`
}

func NewTalkServiceSetNotificationsEnabledArgs() *TalkServiceSetNotificationsEnabledArgs {
  return &TalkServiceSetNotificationsEnabledArgs{}
}


func (p *TalkServiceSetNotificationsEnabledArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetType() MidType {
  return p.Type
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetTarget() string {
  return p.Target
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetEnablement() bool {
  return p.Enablement
}
func (p *TalkServiceSetNotificationsEnabledArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MidType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Target = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Enablement = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setNotificationsEnabled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Target)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enablement", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enablement: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Enablement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enablement (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enablement: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSetNotificationsEnabledArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSetNotificationsEnabledResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSetNotificationsEnabledResult() *TalkServiceSetNotificationsEnabledResult {
  return &TalkServiceSetNotificationsEnabledResult{}
}

var TalkServiceSetNotificationsEnabledResult_E_DEFAULT *TalkException
func (p *TalkServiceSetNotificationsEnabledResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSetNotificationsEnabledResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSetNotificationsEnabledResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSetNotificationsEnabledResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setNotificationsEnabled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSetNotificationsEnabledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSetNotificationsEnabledResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteOtherFromChatArgs struct {
  Request *DeleteOtherFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteOtherFromChatArgs() *TalkServiceDeleteOtherFromChatArgs {
  return &TalkServiceDeleteOtherFromChatArgs{}
}

var TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT *DeleteOtherFromChatRequest
func (p *TalkServiceDeleteOtherFromChatArgs) GetRequest() *DeleteOtherFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteOtherFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DeleteOtherFromChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteOtherFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteOtherFromChatResult struct {
  Success *DeleteOtherFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteOtherFromChatResult() *TalkServiceDeleteOtherFromChatResult {
  return &TalkServiceDeleteOtherFromChatResult{}
}

var TalkServiceDeleteOtherFromChatResult_Success_DEFAULT *DeleteOtherFromChatResponse
func (p *TalkServiceDeleteOtherFromChatResult) GetSuccess() *DeleteOtherFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteOtherFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteOtherFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteOtherFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteOtherFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteOtherFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteOtherFromChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceInviteIntoChatArgs struct {
  Request *InviteIntoChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceInviteIntoChatArgs() *TalkServiceInviteIntoChatArgs {
  return &TalkServiceInviteIntoChatArgs{}
}

var TalkServiceInviteIntoChatArgs_Request_DEFAULT *InviteIntoChatRequest
func (p *TalkServiceInviteIntoChatArgs) GetRequest() *InviteIntoChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceInviteIntoChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceInviteIntoChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceInviteIntoChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &InviteIntoChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceInviteIntoChatResult struct {
  Success *InviteIntoChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoChatResult() *TalkServiceInviteIntoChatResult {
  return &TalkServiceInviteIntoChatResult{}
}

var TalkServiceInviteIntoChatResult_Success_DEFAULT *InviteIntoChatResponse
func (p *TalkServiceInviteIntoChatResult) GetSuccess() *InviteIntoChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceInviteIntoChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceInviteIntoChatResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceInviteIntoChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &InviteIntoChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationByTicketArgs struct {
  Request *AcceptChatInvitationByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationByTicketArgs() *TalkServiceAcceptChatInvitationByTicketArgs {
  return &TalkServiceAcceptChatInvitationByTicketArgs{}
}

var TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT *AcceptChatInvitationByTicketRequest
func (p *TalkServiceAcceptChatInvitationByTicketArgs) GetRequest() *AcceptChatInvitationByTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationByTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationByTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitationByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationByTicketResult struct {
  Success *AcceptChatInvitationByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationByTicketResult() *TalkServiceAcceptChatInvitationByTicketResult {
  return &TalkServiceAcceptChatInvitationByTicketResult{}
}

var TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT *AcceptChatInvitationByTicketResponse
func (p *TalkServiceAcceptChatInvitationByTicketResult) GetSuccess() *AcceptChatInvitationByTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationByTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitationByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type TalkServiceAcceptGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewTalkServiceAcceptGroupInvitationArgs() *TalkServiceAcceptGroupInvitationArgs {
  return &TalkServiceAcceptGroupInvitationArgs{}
}


func (p *TalkServiceAcceptGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceAcceptGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}
func (p *TalkServiceAcceptGroupInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *TalkServiceAcceptGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptGroupInvitationResult() *TalkServiceAcceptGroupInvitationResult {
  return &TalkServiceAcceptGroupInvitationResult{}
}

var TalkServiceAcceptGroupInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptGroupInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteSelfFromChatArgs struct {
  Request *DeleteSelfFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteSelfFromChatArgs() *TalkServiceDeleteSelfFromChatArgs {
  return &TalkServiceDeleteSelfFromChatArgs{}
}

var TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT *DeleteSelfFromChatRequest
func (p *TalkServiceDeleteSelfFromChatArgs) GetRequest() *DeleteSelfFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteSelfFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DeleteSelfFromChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteSelfFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteSelfFromChatResult struct {
  Success *DeleteSelfFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteSelfFromChatResult() *TalkServiceDeleteSelfFromChatResult {
  return &TalkServiceDeleteSelfFromChatResult{}
}

var TalkServiceDeleteSelfFromChatResult_Success_DEFAULT *DeleteSelfFromChatResponse
func (p *TalkServiceDeleteSelfFromChatResult) GetSuccess() *DeleteSelfFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteSelfFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteSelfFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteSelfFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteSelfFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteSelfFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteSelfFromChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceFindChatByTicketArgs struct {
  Request *FindChatByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceFindChatByTicketArgs() *TalkServiceFindChatByTicketArgs {
  return &TalkServiceFindChatByTicketArgs{}
}

var TalkServiceFindChatByTicketArgs_Request_DEFAULT *FindChatByTicketRequest
func (p *TalkServiceFindChatByTicketArgs) GetRequest() *FindChatByTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceFindChatByTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceFindChatByTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceFindChatByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &FindChatByTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findChatByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceFindChatByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindChatByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindChatByTicketResult struct {
  Success *FindChatByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindChatByTicketResult() *TalkServiceFindChatByTicketResult {
  return &TalkServiceFindChatByTicketResult{}
}

var TalkServiceFindChatByTicketResult_Success_DEFAULT *FindChatByTicketResponse
func (p *TalkServiceFindChatByTicketResult) GetSuccess() *FindChatByTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceFindChatByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindChatByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindChatByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindChatByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindChatByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindChatByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindChatByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FindChatByTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findChatByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindChatByTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindChatByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindChatByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindChatByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCancelChatInvitationArgs struct {
  Request *CancelChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCancelChatInvitationArgs() *TalkServiceCancelChatInvitationArgs {
  return &TalkServiceCancelChatInvitationArgs{}
}

var TalkServiceCancelChatInvitationArgs_Request_DEFAULT *CancelChatInvitationRequest
func (p *TalkServiceCancelChatInvitationArgs) GetRequest() *CancelChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceCancelChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCancelChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCancelChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CancelChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCancelChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCancelChatInvitationResult struct {
  Success *CancelChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelChatInvitationResult() *TalkServiceCancelChatInvitationResult {
  return &TalkServiceCancelChatInvitationResult{}
}

var TalkServiceCancelChatInvitationResult_Success_DEFAULT *CancelChatInvitationResponse
func (p *TalkServiceCancelChatInvitationResult) GetSuccess() *CancelChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCancelChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCancelChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceCancelChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCancelChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCancelChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCancelChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCancelChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CancelChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationArgs struct {
  Request *AcceptChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationArgs() *TalkServiceAcceptChatInvitationArgs {
  return &TalkServiceAcceptChatInvitationArgs{}
}

var TalkServiceAcceptChatInvitationArgs_Request_DEFAULT *AcceptChatInvitationRequest
func (p *TalkServiceAcceptChatInvitationArgs) GetRequest() *AcceptChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationResult struct {
  Success *AcceptChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationResult() *TalkServiceAcceptChatInvitationResult {
  return &TalkServiceAcceptChatInvitationResult{}
}

var TalkServiceAcceptChatInvitationResult_Success_DEFAULT *AcceptChatInvitationResponse
func (p *TalkServiceAcceptChatInvitationResult) GetSuccess() *AcceptChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - MessageBoxListRequest
//  - SyncReason
type TalkServiceGetMessageBoxesArgs struct {
  // unused field # 1
  MessageBoxListRequest *MessageBoxListRequest `thrift:"messageBoxListRequest,2" db:"messageBoxListRequest" json:"messageBoxListRequest"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetMessageBoxesArgs() *TalkServiceGetMessageBoxesArgs {
  return &TalkServiceGetMessageBoxesArgs{}
}

var TalkServiceGetMessageBoxesArgs_MessageBoxListRequest_DEFAULT *MessageBoxListRequest
func (p *TalkServiceGetMessageBoxesArgs) GetMessageBoxListRequest() *MessageBoxListRequest {
  if !p.IsSetMessageBoxListRequest() {
    return TalkServiceGetMessageBoxesArgs_MessageBoxListRequest_DEFAULT
  }
return p.MessageBoxListRequest
}

func (p *TalkServiceGetMessageBoxesArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetMessageBoxesArgs) IsSetMessageBoxListRequest() bool {
  return p.MessageBoxListRequest != nil
}

func (p *TalkServiceGetMessageBoxesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.MessageBoxListRequest = &MessageBoxListRequest{}
  if err := p.MessageBoxListRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MessageBoxListRequest), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMessageBoxes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageBoxListRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageBoxListRequest: ", p), err) }
  if err := p.MessageBoxListRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MessageBoxListRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageBoxListRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageBoxesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageBoxesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageBoxesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetMessageBoxesResult struct {
  Success *MessageBoxList `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetMessageBoxesResult() *TalkServiceGetMessageBoxesResult {
  return &TalkServiceGetMessageBoxesResult{}
}

var TalkServiceGetMessageBoxesResult_Success_DEFAULT *MessageBoxList
func (p *TalkServiceGetMessageBoxesResult) GetSuccess() *MessageBoxList {
  if !p.IsSetSuccess() {
    return TalkServiceGetMessageBoxesResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetMessageBoxesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetMessageBoxesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetMessageBoxesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetMessageBoxesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetMessageBoxesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetMessageBoxesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MessageBoxList{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMessageBoxes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageBoxesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageBoxesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageBoxesResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceUpdateChatArgs struct {
  Request *UpdateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceUpdateChatArgs() *TalkServiceUpdateChatArgs {
  return &TalkServiceUpdateChatArgs{}
}

var TalkServiceUpdateChatArgs_Request_DEFAULT *UpdateChatRequest
func (p *TalkServiceUpdateChatArgs) GetRequest() *UpdateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &UpdateChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatResult struct {
  Success *UpdateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatResult() *TalkServiceUpdateChatResult {
  return &TalkServiceUpdateChatResult{}
}

var TalkServiceUpdateChatResult_Success_DEFAULT *UpdateChatResponse
func (p *TalkServiceUpdateChatResult) GetSuccess() *UpdateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceUpdateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReissueChatTicketArgs struct {
  Request *ReissueChatTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceReissueChatTicketArgs() *TalkServiceReissueChatTicketArgs {
  return &TalkServiceReissueChatTicketArgs{}
}

var TalkServiceReissueChatTicketArgs_Request_DEFAULT *ReissueChatTicketRequest
func (p *TalkServiceReissueChatTicketArgs) GetRequest() *ReissueChatTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceReissueChatTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceReissueChatTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceReissueChatTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ReissueChatTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceReissueChatTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueChatTicketResult struct {
  Success *ReissueChatTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueChatTicketResult() *TalkServiceReissueChatTicketResult {
  return &TalkServiceReissueChatTicketResult{}
}

var TalkServiceReissueChatTicketResult_Success_DEFAULT *ReissueChatTicketResponse
func (p *TalkServiceReissueChatTicketResult) GetSuccess() *ReissueChatTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceReissueChatTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceReissueChatTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceReissueChatTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReissueChatTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReissueChatTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceReissueChatTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReissueChatTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ReissueChatTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetAllChatMidsArgs struct {
  Request *GetAllChatMidsRequest `thrift:"request,1" db:"request" json:"request"`
  SyncReason SyncReason `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllChatMidsArgs() *TalkServiceGetAllChatMidsArgs {
  return &TalkServiceGetAllChatMidsArgs{}
}

var TalkServiceGetAllChatMidsArgs_Request_DEFAULT *GetAllChatMidsRequest
func (p *TalkServiceGetAllChatMidsArgs) GetRequest() *GetAllChatMidsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetAllChatMidsArgs_Request_DEFAULT
  }
return p.Request
}

func (p *TalkServiceGetAllChatMidsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllChatMidsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetAllChatMidsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetAllChatMidsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllChatMids_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllChatMidsResult struct {
  Success *GetAllChatMidsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllChatMidsResult() *TalkServiceGetAllChatMidsResult {
  return &TalkServiceGetAllChatMidsResult{}
}

var TalkServiceGetAllChatMidsResult_Success_DEFAULT *GetAllChatMidsResponse
func (p *TalkServiceGetAllChatMidsResult) GetSuccess() *GetAllChatMidsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetAllChatMidsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetAllChatMidsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllChatMidsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllChatMidsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllChatMidsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllChatMidsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllChatMidsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetAllChatMidsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllChatMids_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceRejectChatInvitationArgs struct {
  Request *RejectChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceRejectChatInvitationArgs() *TalkServiceRejectChatInvitationArgs {
  return &TalkServiceRejectChatInvitationArgs{}
}

var TalkServiceRejectChatInvitationArgs_Request_DEFAULT *RejectChatInvitationRequest
func (p *TalkServiceRejectChatInvitationArgs) GetRequest() *RejectChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceRejectChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceRejectChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceRejectChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &RejectChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceRejectChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRejectChatInvitationResult struct {
  Success *RejectChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectChatInvitationResult() *TalkServiceRejectChatInvitationResult {
  return &TalkServiceRejectChatInvitationResult{}
}

var TalkServiceRejectChatInvitationResult_Success_DEFAULT *RejectChatInvitationResponse
func (p *TalkServiceRejectChatInvitationResult) GetSuccess() *RejectChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceRejectChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRejectChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceRejectChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRejectChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRejectChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRejectChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRejectChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RejectChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCreateChatArgs struct {
  Request *CreateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCreateChatArgs() *TalkServiceCreateChatArgs {
  return &TalkServiceCreateChatArgs{}
}

var TalkServiceCreateChatArgs_Request_DEFAULT *CreateChatRequest
func (p *TalkServiceCreateChatArgs) GetRequest() *CreateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceCreateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCreateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCreateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CreateChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatResult struct {
  Success *CreateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatResult() *TalkServiceCreateChatResult {
  return &TalkServiceCreateChatResult{}
}

var TalkServiceCreateChatResult_Success_DEFAULT *CreateChatResponse
func (p *TalkServiceCreateChatResult) GetSuccess() *CreateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCreateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
//  - SyncReason
type TalkServiceGetChatRoomAnnouncementsBulkArgs struct {
  // unused field # 1
  ChatRoomMids []string `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkArgs() *TalkServiceGetChatRoomAnnouncementsBulkArgs {
  return &TalkServiceGetChatRoomAnnouncementsBulkArgs{}
}


func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetChatRoomMids() []string {
  return p.ChatRoomMids
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatRoomMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem564 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem564 = v
}
    p.ChatRoomMids = append(p.ChatRoomMids, _elem564)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncementsBulk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatRoomMids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatRoomMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatRoomMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsBulkResult struct {
  Success map[string][]*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkResult() *TalkServiceGetChatRoomAnnouncementsBulkResult {
  return &TalkServiceGetChatRoomAnnouncementsBulkResult{}
}

var TalkServiceGetChatRoomAnnouncementsBulkResult_Success_DEFAULT map[string][]*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetSuccess() map[string][]*ChatRoomAnnouncement {
  return p.Success
}
var TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*ChatRoomAnnouncement, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key565 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key565 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ChatRoomAnnouncement, 0, size)
    _val566 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem567 := &ChatRoomAnnouncement{}
      if err := _elem567.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem567), err)
      }
      _val566 = append(_val566, _elem567)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Success[_key565] = _val566
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatRoomAnnouncementsBulk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(ctx, oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkResult(%+v)", *p)
}

// Attributes:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
//  - SimInfo
type TalkServiceStartUpdateVerificationArgs struct {
  // unused field # 1
  Region string `thrift:"region,2" db:"region" json:"region"`
  Carrier Carrier `thrift:"carrier,3" db:"carrier" json:"carrier"`
  Phone string `thrift:"phone,4" db:"phone" json:"phone"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  NetworkCode string `thrift:"networkCode,7" db:"networkCode" json:"networkCode"`
  Locale string `thrift:"locale,8" db:"locale" json:"locale"`
  SimInfo *SIMInfo `thrift:"simInfo,9" db:"simInfo" json:"simInfo"`
}

func NewTalkServiceStartUpdateVerificationArgs() *TalkServiceStartUpdateVerificationArgs {
  return &TalkServiceStartUpdateVerificationArgs{}
}


func (p *TalkServiceStartUpdateVerificationArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceStartUpdateVerificationArgs) GetCarrier() Carrier {
  return p.Carrier
}

func (p *TalkServiceStartUpdateVerificationArgs) GetPhone() string {
  return p.Phone
}

func (p *TalkServiceStartUpdateVerificationArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceStartUpdateVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceStartUpdateVerificationArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceStartUpdateVerificationArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceStartUpdateVerificationArgs) GetNetworkCode() string {
  return p.NetworkCode
}

func (p *TalkServiceStartUpdateVerificationArgs) GetLocale() string {
  return p.Locale
}
var TalkServiceStartUpdateVerificationArgs_SimInfo_DEFAULT *SIMInfo
func (p *TalkServiceStartUpdateVerificationArgs) GetSimInfo() *SIMInfo {
  if !p.IsSetSimInfo() {
    return TalkServiceStartUpdateVerificationArgs_SimInfo_DEFAULT
  }
return p.SimInfo
}
func (p *TalkServiceStartUpdateVerificationArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceStartUpdateVerificationArgs) IsSetSimInfo() bool {
  return p.SimInfo != nil
}

func (p *TalkServiceStartUpdateVerificationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Carrier(v)
  p.Carrier = temp
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NetworkCode = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.SimInfo = &SIMInfo{}
  if err := p.SimInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SimInfo), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "startUpdateVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:region: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Carrier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkCode", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:networkCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NetworkCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkCode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:networkCode: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:locale: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "simInfo", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:simInfo: ", p), err) }
  if err := p.SimInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SimInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:simInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceStartUpdateVerificationResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceStartUpdateVerificationResult() *TalkServiceStartUpdateVerificationResult {
  return &TalkServiceStartUpdateVerificationResult{}
}

var TalkServiceStartUpdateVerificationResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceStartUpdateVerificationResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceStartUpdateVerificationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceStartUpdateVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceStartUpdateVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceStartUpdateVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceStartUpdateVerificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceStartUpdateVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceStartUpdateVerificationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "startUpdateVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartUpdateVerificationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartUpdateVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Mid
//  - Locale
//  - SimInfo
//  - OldUdidHash
type TalkServiceStartVerificationArgs struct {
  // unused field # 1
  Region string `thrift:"region,2" db:"region" json:"region"`
  Carrier Carrier `thrift:"carrier,3" db:"carrier" json:"carrier"`
  Phone string `thrift:"phone,4" db:"phone" json:"phone"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  NetworkCode string `thrift:"networkCode,7" db:"networkCode" json:"networkCode"`
  Mid string `thrift:"mid,8" db:"mid" json:"mid"`
  Locale string `thrift:"locale,9" db:"locale" json:"locale"`
  SimInfo *SIMInfo `thrift:"simInfo,10" db:"simInfo" json:"simInfo"`
  OldUdidHash string `thrift:"oldUdidHash,11" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceStartVerificationArgs() *TalkServiceStartVerificationArgs {
  return &TalkServiceStartVerificationArgs{}
}


func (p *TalkServiceStartVerificationArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceStartVerificationArgs) GetCarrier() Carrier {
  return p.Carrier
}

func (p *TalkServiceStartVerificationArgs) GetPhone() string {
  return p.Phone
}

func (p *TalkServiceStartVerificationArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceStartVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceStartVerificationArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceStartVerificationArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceStartVerificationArgs) GetNetworkCode() string {
  return p.NetworkCode
}

func (p *TalkServiceStartVerificationArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceStartVerificationArgs) GetLocale() string {
  return p.Locale
}
var TalkServiceStartVerificationArgs_SimInfo_DEFAULT *SIMInfo
func (p *TalkServiceStartVerificationArgs) GetSimInfo() *SIMInfo {
  if !p.IsSetSimInfo() {
    return TalkServiceStartVerificationArgs_SimInfo_DEFAULT
  }
return p.SimInfo
}

func (p *TalkServiceStartVerificationArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceStartVerificationArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceStartVerificationArgs) IsSetSimInfo() bool {
  return p.SimInfo != nil
}

func (p *TalkServiceStartVerificationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Carrier(v)
  p.Carrier = temp
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NetworkCode = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.SimInfo = &SIMInfo{}
  if err := p.SimInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SimInfo), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "startVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartVerificationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:region: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Carrier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkCode", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:networkCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NetworkCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkCode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:networkCode: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mid: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:locale: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "simInfo", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:simInfo: ", p), err) }
  if err := p.SimInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SimInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:simInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartVerificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceStartVerificationResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceStartVerificationResult() *TalkServiceStartVerificationResult {
  return &TalkServiceStartVerificationResult{}
}

var TalkServiceStartVerificationResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceStartVerificationResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceStartVerificationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceStartVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceStartVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceStartVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceStartVerificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceStartVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceStartVerificationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "startVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartVerificationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartVerificationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartVerificationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
type TalkServiceChangeVerificationMethodArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Method Y30 `thrift:"method,3" db:"method" json:"method"`
}

func NewTalkServiceChangeVerificationMethodArgs() *TalkServiceChangeVerificationMethodArgs {
  return &TalkServiceChangeVerificationMethodArgs{}
}


func (p *TalkServiceChangeVerificationMethodArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceChangeVerificationMethodArgs) GetMethod() Y30 {
  return p.Method
}
func (p *TalkServiceChangeVerificationMethodArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Y30(v)
  p.Method = temp
}
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "changeVerificationMethod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:method: ", p), err) }
  return err
}

func (p *TalkServiceChangeVerificationMethodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceChangeVerificationMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceChangeVerificationMethodResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceChangeVerificationMethodResult() *TalkServiceChangeVerificationMethodResult {
  return &TalkServiceChangeVerificationMethodResult{}
}

var TalkServiceChangeVerificationMethodResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceChangeVerificationMethodResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceChangeVerificationMethodResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceChangeVerificationMethodResult_E_DEFAULT *TalkException
func (p *TalkServiceChangeVerificationMethodResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceChangeVerificationMethodResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceChangeVerificationMethodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceChangeVerificationMethodResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceChangeVerificationMethodResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "changeVerificationMethod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceChangeVerificationMethodResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceChangeVerificationMethodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceChangeVerificationMethodResult(%+v)", *p)
}

type TalkServiceGetEncryptedIdentityV3Args struct {
}

func NewTalkServiceGetEncryptedIdentityV3Args() *TalkServiceGetEncryptedIdentityV3Args {
  return &TalkServiceGetEncryptedIdentityV3Args{}
}

func (p *TalkServiceGetEncryptedIdentityV3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getEncryptedIdentityV3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetEncryptedIdentityV3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetEncryptedIdentityV3Result struct {
  Success *GetEncryptedIdentityV3Response `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetEncryptedIdentityV3Result() *TalkServiceGetEncryptedIdentityV3Result {
  return &TalkServiceGetEncryptedIdentityV3Result{}
}

var TalkServiceGetEncryptedIdentityV3Result_Success_DEFAULT *GetEncryptedIdentityV3Response
func (p *TalkServiceGetEncryptedIdentityV3Result) GetSuccess() *GetEncryptedIdentityV3Response {
  if !p.IsSetSuccess() {
    return TalkServiceGetEncryptedIdentityV3Result_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetEncryptedIdentityV3Result_E_DEFAULT *TalkException
func (p *TalkServiceGetEncryptedIdentityV3Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetEncryptedIdentityV3Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetEncryptedIdentityV3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetEncryptedIdentityV3Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getEncryptedIdentityV3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetEncryptedIdentityV3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetEncryptedIdentityV3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetEncryptedIdentityV3Result(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
type TalkServiceGetE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  GroupKeyId int32 `thrift:"groupKeyId,4" db:"groupKeyId" json:"groupKeyId"`
}

func NewTalkServiceGetE2EEGroupSharedKeyArgs() *TalkServiceGetE2EEGroupSharedKeyArgs {
  return &TalkServiceGetE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetGroupKeyId() int32 {
  return p.GroupKeyId
}
func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupKeyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEGroupSharedKeyResult() *TalkServiceGetE2EEGroupSharedKeyResult {
  return &TalkServiceGetE2EEGroupSharedKeyResult{}
}

var TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - Members
//  - KeyIds
//  - EncryptedSharedKeys
type TalkServiceRegisterE2EEGroupKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  Members []string `thrift:"members,4" db:"members" json:"members"`
  KeyIds []int32 `thrift:"keyIds,5" db:"keyIds" json:"keyIds"`
  EncryptedSharedKeys [][]byte `thrift:"encryptedSharedKeys,6" db:"encryptedSharedKeys" json:"encryptedSharedKeys"`
}

func NewTalkServiceRegisterE2EEGroupKeyArgs() *TalkServiceRegisterE2EEGroupKeyArgs {
  return &TalkServiceRegisterE2EEGroupKeyArgs{}
}


func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetMembers() []string {
  return p.Members
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetKeyIds() []int32 {
  return p.KeyIds
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetEncryptedSharedKeys() [][]byte {
  return p.EncryptedSharedKeys
}
func (p *TalkServiceRegisterE2EEGroupKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem568 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem568 = v
}
    p.Members = append(p.Members, _elem568)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.KeyIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem569 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem569 = v
}
    p.KeyIds = append(p.KeyIds, _elem569)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.EncryptedSharedKeys =  tSlice
  for i := 0; i < size; i ++ {
var _elem570 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem570 = v
}
    p.EncryptedSharedKeys = append(p.EncryptedSharedKeys, _elem570)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEGroupKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyIds", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.KeyIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.KeyIds {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyIds: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedSharedKeys", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encryptedSharedKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.EncryptedSharedKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EncryptedSharedKeys {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encryptedSharedKeys: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEGroupKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterE2EEGroupKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterE2EEGroupKeyResult() *TalkServiceRegisterE2EEGroupKeyResult {
  return &TalkServiceRegisterE2EEGroupKeyResult{}
}

var TalkServiceRegisterE2EEGroupKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceRegisterE2EEGroupKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterE2EEGroupKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterE2EEGroupKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterE2EEGroupKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterE2EEGroupKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterE2EEGroupKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEGroupKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEGroupKeyResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceGenerateUserTicketArgs struct {
  // unused fields # 1 to 2
  ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
  MaxUseCount int32 `thrift:"maxUseCount,4" db:"maxUseCount" json:"maxUseCount"`
}

func NewTalkServiceGenerateUserTicketArgs() *TalkServiceGenerateUserTicketArgs {
  return &TalkServiceGenerateUserTicketArgs{}
}


func (p *TalkServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *TalkServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *TalkServiceGenerateUserTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxUseCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGenerateUserTicketResult struct {
  Success *Ticket `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGenerateUserTicketResult() *TalkServiceGenerateUserTicketResult {
  return &TalkServiceGenerateUserTicketResult{}
}

var TalkServiceGenerateUserTicketResult_Success_DEFAULT *Ticket
func (p *TalkServiceGenerateUserTicketResult) GetSuccess() *Ticket {
  if !p.IsSetSuccess() {
    return TalkServiceGenerateUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGenerateUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceGenerateUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGenerateUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGenerateUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGenerateUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGenerateUserTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ticket{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - PublicKey
type TalkServiceRegisterE2EEPublicKeyArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
}

func NewTalkServiceRegisterE2EEPublicKeyArgs() *TalkServiceRegisterE2EEPublicKeyArgs {
  return &TalkServiceRegisterE2EEPublicKeyArgs{}
}


func (p *TalkServiceRegisterE2EEPublicKeyArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceRegisterE2EEPublicKeyArgs_PublicKey_DEFAULT *E2EEPublicKey
func (p *TalkServiceRegisterE2EEPublicKeyArgs) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return TalkServiceRegisterE2EEPublicKeyArgs_PublicKey_DEFAULT
  }
return p.PublicKey
}
func (p *TalkServiceRegisterE2EEPublicKeyArgs) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterE2EEPublicKeyResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterE2EEPublicKeyResult() *TalkServiceRegisterE2EEPublicKeyResult {
  return &TalkServiceRegisterE2EEPublicKeyResult{}
}

var TalkServiceRegisterE2EEPublicKeyResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceRegisterE2EEPublicKeyResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - KeyVersion
//  - KeyId
type TalkServiceGetE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  KeyVersion int32 `thrift:"keyVersion,3" db:"keyVersion" json:"keyVersion"`
  KeyId int32 `thrift:"keyId,4" db:"keyId" json:"keyId"`
}

func NewTalkServiceGetE2EEPublicKeyArgs() *TalkServiceGetE2EEPublicKeyArgs {
  return &TalkServiceGetE2EEPublicKeyArgs{}
}


func (p *TalkServiceGetE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyId() int32 {
  return p.KeyId
}
func (p *TalkServiceGetE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEPublicKeyResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEPublicKeyResult() *TalkServiceGetE2EEPublicKeyResult {
  return &TalkServiceGetE2EEPublicKeyResult{}
}

var TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceGetE2EEPublicKeyResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - Provider
type TalkServiceGetRSAKeyInfoArgs struct {
  // unused field # 1
  Provider IdentityProvider `thrift:"provider,2" db:"provider" json:"provider"`
}

func NewTalkServiceGetRSAKeyInfoArgs() *TalkServiceGetRSAKeyInfoArgs {
  return &TalkServiceGetRSAKeyInfoArgs{}
}


func (p *TalkServiceGetRSAKeyInfoArgs) GetProvider() IdentityProvider {
  return p.Provider
}
func (p *TalkServiceGetRSAKeyInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRSAKeyInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provider: ", p), err) }
  return err
}

func (p *TalkServiceGetRSAKeyInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRSAKeyInfoResult struct {
  Success *RSAKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRSAKeyInfoResult() *TalkServiceGetRSAKeyInfoResult {
  return &TalkServiceGetRSAKeyInfoResult{}
}

var TalkServiceGetRSAKeyInfoResult_Success_DEFAULT *RSAKey
func (p *TalkServiceGetRSAKeyInfoResult) GetSuccess() *RSAKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetRSAKeyInfoResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRSAKeyInfoResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRSAKeyInfoResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRSAKeyInfoResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRSAKeyInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RSAKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRSAKeyInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdArgs struct {
  // unused field # 1
  SnsIdType C60759oi `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  Region string `thrift:"region,4" db:"region" json:"region"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  Mid string `thrift:"mid,7" db:"mid" json:"mid"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdArgs() *TalkServiceRegisterWithSnsIdArgs {
  return &TalkServiceRegisterWithSnsIdArgs{}
}


func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsIdType() C60759oi {
  return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceRegisterWithSnsIdArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := C60759oi(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:region: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mid: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdResult struct {
  Success *RegisterWithSnsIdResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdResult() *TalkServiceRegisterWithSnsIdResult {
  return &TalkServiceRegisterWithSnsIdResult{}
}

var TalkServiceRegisterWithSnsIdResult_Success_DEFAULT *RegisterWithSnsIdResult_
func (p *TalkServiceRegisterWithSnsIdResult) GetSuccess() *RegisterWithSnsIdResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithSnsIdResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterWithSnsIdResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithSnsIdResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithSnsIdResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithSnsIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RegisterWithSnsIdResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceFindSnsIdUserStatusArgs struct {
  // unused field # 1
  SnsIdType C60759oi `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  OldUdidHash string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceFindSnsIdUserStatusArgs() *TalkServiceFindSnsIdUserStatusArgs {
  return &TalkServiceFindSnsIdUserStatusArgs{}
}


func (p *TalkServiceFindSnsIdUserStatusArgs) GetSnsIdType() C60759oi {
  return p.SnsIdType
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceFindSnsIdUserStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := C60759oi(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findSnsIdUserStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindSnsIdUserStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindSnsIdUserStatusResult struct {
  Success *SnsIdUserStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindSnsIdUserStatusResult() *TalkServiceFindSnsIdUserStatusResult {
  return &TalkServiceFindSnsIdUserStatusResult{}
}

var TalkServiceFindSnsIdUserStatusResult_Success_DEFAULT *SnsIdUserStatus
func (p *TalkServiceFindSnsIdUserStatusResult) GetSuccess() *SnsIdUserStatus {
  if !p.IsSetSuccess() {
    return TalkServiceFindSnsIdUserStatusResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindSnsIdUserStatusResult_E_DEFAULT *TalkException
func (p *TalkServiceFindSnsIdUserStatusResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindSnsIdUserStatusResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindSnsIdUserStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SnsIdUserStatus{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findSnsIdUserStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindSnsIdUserStatusResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TalkServiceGetContactRegistrationArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Type ContactType `thrift:"type,2" db:"type" json:"type"`
}

func NewTalkServiceGetContactRegistrationArgs() *TalkServiceGetContactRegistrationArgs {
  return &TalkServiceGetContactRegistrationArgs{}
}


func (p *TalkServiceGetContactRegistrationArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceGetContactRegistrationArgs) GetType() ContactType {
  return p.Type
}
func (p *TalkServiceGetContactRegistrationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContactRegistration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactRegistrationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceGetContactRegistrationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactRegistrationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactRegistrationResult struct {
  Success *ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactRegistrationResult() *TalkServiceGetContactRegistrationResult {
  return &TalkServiceGetContactRegistrationResult{}
}

var TalkServiceGetContactRegistrationResult_Success_DEFAULT *ContactRegistration
func (p *TalkServiceGetContactRegistrationResult) GetSuccess() *ContactRegistration {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactRegistrationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactRegistrationResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactRegistrationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactRegistrationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactRegistrationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactRegistrationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactRegistrationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ContactRegistration{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContactRegistration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactRegistrationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactRegistrationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactRegistrationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceVerifyPhoneNumberArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  OldUdidHash string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceVerifyPhoneNumberArgs() *TalkServiceVerifyPhoneNumberArgs {
  return &TalkServiceVerifyPhoneNumberArgs{}
}


func (p *TalkServiceVerifyPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetPinCode() string {
  return p.PinCode
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceVerifyPhoneNumberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyPhoneNumberResult struct {
  Success *PhoneVerificationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyPhoneNumberResult() *TalkServiceVerifyPhoneNumberResult {
  return &TalkServiceVerifyPhoneNumberResult{}
}

var TalkServiceVerifyPhoneNumberResult_Success_DEFAULT *PhoneVerificationResult_
func (p *TalkServiceVerifyPhoneNumberResult) GetSuccess() *PhoneVerificationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PhoneVerificationResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - FeatureType
type TalkServiceAcquireEncryptedAccessTokenArgs struct {
  // unused field # 1
  FeatureType FeatureType `thrift:"featureType,2" db:"featureType" json:"featureType"`
}

func NewTalkServiceAcquireEncryptedAccessTokenArgs() *TalkServiceAcquireEncryptedAccessTokenArgs {
  return &TalkServiceAcquireEncryptedAccessTokenArgs{}
}


func (p *TalkServiceAcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureType {
  return p.FeatureType
}
func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FeatureType(v)
  p.FeatureType = temp
}
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireEncryptedAccessToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "featureType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FeatureType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureType: ", p), err) }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireEncryptedAccessTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcquireEncryptedAccessTokenResult() *TalkServiceAcquireEncryptedAccessTokenResult {
  return &TalkServiceAcquireEncryptedAccessTokenResult{}
}

var TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT string
func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireEncryptedAccessToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs struct {
  // unused field # 1
  SnsIdType C60759oi `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  IdentityCredential *IdentityCredential `thrift:"identityCredential,4" db:"identityCredential" json:"identityCredential"`
  Region string `thrift:"region,5" db:"region" json:"region"`
  UdidHash string `thrift:"udidHash,6" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,7" db:"deviceInfo" json:"deviceInfo"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialArgs() *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs {
  return &TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
}


func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsIdType() C60759oi {
  return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT *IdentityCredential
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetIdentityCredential() *IdentityCredential {
  if !p.IsSetIdentityCredential() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT
  }
return p.IdentityCredential
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetIdentityCredential() bool {
  return p.IdentityCredential != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := C60759oi(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.IdentityCredential = &IdentityCredential{}
  if err := p.IdentityCredential.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsIdAndIdentityCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityCredential", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:identityCredential: ", p), err) }
  if err := p.IdentityCredential.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:identityCredential: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:region: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdAndIdentityCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialResult() *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult {
  return &TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT string
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithSnsIdAndIdentityCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - Location
type TalkServiceGetShakeEventV1Args struct {
  Location *Geolocation `thrift:"location,1" db:"location" json:"location"`
}

func NewTalkServiceGetShakeEventV1Args() *TalkServiceGetShakeEventV1Args {
  return &TalkServiceGetShakeEventV1Args{}
}

var TalkServiceGetShakeEventV1Args_Location_DEFAULT *Geolocation
func (p *TalkServiceGetShakeEventV1Args) GetLocation() *Geolocation {
  if !p.IsSetLocation() {
    return TalkServiceGetShakeEventV1Args_Location_DEFAULT
  }
return p.Location
}
func (p *TalkServiceGetShakeEventV1Args) IsSetLocation() bool {
  return p.Location != nil
}

func (p *TalkServiceGetShakeEventV1Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &Geolocation{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getShakeEventV1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetShakeEventV1Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err) }
  if err := p.Location.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err) }
  return err
}

func (p *TalkServiceGetShakeEventV1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetShakeEventV1Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetShakeEventV1Result struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetShakeEventV1Result() *TalkServiceGetShakeEventV1Result {
  return &TalkServiceGetShakeEventV1Result{}
}

var TalkServiceGetShakeEventV1Result_Success_DEFAULT string
func (p *TalkServiceGetShakeEventV1Result) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceGetShakeEventV1Result_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetShakeEventV1Result_E_DEFAULT *TalkException
func (p *TalkServiceGetShakeEventV1Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetShakeEventV1Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetShakeEventV1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetShakeEventV1Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetShakeEventV1Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetShakeEventV1Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getShakeEventV1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetShakeEventV1Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetShakeEventV1Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetShakeEventV1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetShakeEventV1Result(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Identifier
//  - Verifier
//  - Provider
//  - MigrationPincodeSessionId
type TalkServiceRegisterDeviceWithIdentityCredentialArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Identifier string `thrift:"identifier,3" db:"identifier" json:"identifier"`
  Verifier string `thrift:"verifier,4" db:"verifier" json:"verifier"`
  Provider IdentityProvider `thrift:"provider,5" db:"provider" json:"provider"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,6" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialArgs() *TalkServiceRegisterDeviceWithIdentityCredentialArgs {
  return &TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
}


func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerDeviceWithIdentityCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifier: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:provider: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterDeviceWithIdentityCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialResult() *TalkServiceRegisterDeviceWithIdentityCredentialResult {
  return &TalkServiceRegisterDeviceWithIdentityCredentialResult{}
}

var TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT string
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerDeviceWithIdentityCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - Latitude
//  - Longitude
//  - Accuracy
//  - NetworkStatus
//  - AltitudeMeters
//  - VelocityMetersPerSecond
//  - BearingDegrees
type TalkServiceUpdateAndGetNearbyArgs struct {
  // unused field # 1
  Latitude float64 `thrift:"latitude,2" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,3" db:"longitude" json:"longitude"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,4" db:"accuracy" json:"accuracy"`
  NetworkStatus *ClientNetworkStatus `thrift:"networkStatus,5" db:"networkStatus" json:"networkStatus"`
  AltitudeMeters float64 `thrift:"altitudeMeters,6" db:"altitudeMeters" json:"altitudeMeters"`
  VelocityMetersPerSecond float64 `thrift:"velocityMetersPerSecond,7" db:"velocityMetersPerSecond" json:"velocityMetersPerSecond"`
  BearingDegrees float64 `thrift:"bearingDegrees,8" db:"bearingDegrees" json:"bearingDegrees"`
}

func NewTalkServiceUpdateAndGetNearbyArgs() *TalkServiceUpdateAndGetNearbyArgs {
  return &TalkServiceUpdateAndGetNearbyArgs{}
}


func (p *TalkServiceUpdateAndGetNearbyArgs) GetLatitude() float64 {
  return p.Latitude
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetLongitude() float64 {
  return p.Longitude
}
var TalkServiceUpdateAndGetNearbyArgs_Accuracy_DEFAULT *GeolocationAccuracy
func (p *TalkServiceUpdateAndGetNearbyArgs) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return TalkServiceUpdateAndGetNearbyArgs_Accuracy_DEFAULT
  }
return p.Accuracy
}
var TalkServiceUpdateAndGetNearbyArgs_NetworkStatus_DEFAULT *ClientNetworkStatus
func (p *TalkServiceUpdateAndGetNearbyArgs) GetNetworkStatus() *ClientNetworkStatus {
  if !p.IsSetNetworkStatus() {
    return TalkServiceUpdateAndGetNearbyArgs_NetworkStatus_DEFAULT
  }
return p.NetworkStatus
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetVelocityMetersPerSecond() float64 {
  return p.VelocityMetersPerSecond
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetBearingDegrees() float64 {
  return p.BearingDegrees
}
func (p *TalkServiceUpdateAndGetNearbyArgs) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) IsSetNetworkStatus() bool {
  return p.NetworkStatus != nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.NetworkStatus = &ClientNetworkStatus{}
  if err := p.NetworkStatus.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetworkStatus), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VelocityMetersPerSecond = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BearingDegrees = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateAndGetNearby_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:longitude: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accuracy: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkStatus", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:networkStatus: ", p), err) }
  if err := p.NetworkStatus.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetworkStatus), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:networkStatus: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "altitudeMeters", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:altitudeMeters: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "velocityMetersPerSecond", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:velocityMetersPerSecond: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.VelocityMetersPerSecond)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityMetersPerSecond (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:velocityMetersPerSecond: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bearingDegrees", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bearingDegrees: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.BearingDegrees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingDegrees (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bearingDegrees: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAndGetNearbyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateAndGetNearbyResult struct {
  Success []*NearbyEntry `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateAndGetNearbyResult() *TalkServiceUpdateAndGetNearbyResult {
  return &TalkServiceUpdateAndGetNearbyResult{}
}

var TalkServiceUpdateAndGetNearbyResult_Success_DEFAULT []*NearbyEntry

func (p *TalkServiceUpdateAndGetNearbyResult) GetSuccess() []*NearbyEntry {
  return p.Success
}
var TalkServiceUpdateAndGetNearbyResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateAndGetNearbyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateAndGetNearbyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateAndGetNearbyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NearbyEntry, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem571 := &NearbyEntry{}
    if err := _elem571.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem571), err)
    }
    p.Success = append(p.Success, _elem571)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateAndGetNearby_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAndGetNearbyResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - LastSeenSeqId
type TalkServiceGetFriendRequestsArgs struct {
  Direction Direction `thrift:"direction,1" db:"direction" json:"direction"`
  LastSeenSeqId int64 `thrift:"lastSeenSeqId,2" db:"lastSeenSeqId" json:"lastSeenSeqId"`
}

func NewTalkServiceGetFriendRequestsArgs() *TalkServiceGetFriendRequestsArgs {
  return &TalkServiceGetFriendRequestsArgs{}
}


func (p *TalkServiceGetFriendRequestsArgs) GetDirection() Direction {
  return p.Direction
}

func (p *TalkServiceGetFriendRequestsArgs) GetLastSeenSeqId() int64 {
  return p.LastSeenSeqId
}
func (p *TalkServiceGetFriendRequestsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSeenSeqId = v
}
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFriendRequests_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFriendRequestsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *TalkServiceGetFriendRequestsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenSeqId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSeenSeqId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSeenSeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenSeqId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSeenSeqId: ", p), err) }
  return err
}

func (p *TalkServiceGetFriendRequestsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFriendRequestsResult struct {
  Success []*FriendRequest `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFriendRequestsResult() *TalkServiceGetFriendRequestsResult {
  return &TalkServiceGetFriendRequestsResult{}
}

var TalkServiceGetFriendRequestsResult_Success_DEFAULT []*FriendRequest

func (p *TalkServiceGetFriendRequestsResult) GetSuccess() []*FriendRequest {
  return p.Success
}
var TalkServiceGetFriendRequestsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFriendRequestsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFriendRequestsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFriendRequestsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFriendRequestsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFriendRequestsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem572 := &FriendRequest{}
    if err := _elem572.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem572), err)
    }
    p.Success = append(p.Success, _elem572)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFriendRequests_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFriendRequestsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFriendRequestsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFriendRequestsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFriendRequestsResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - MessageId
type TalkServiceUnsendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  MessageId string `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewTalkServiceUnsendMessageArgs() *TalkServiceUnsendMessageArgs {
  return &TalkServiceUnsendMessageArgs{}
}


func (p *TalkServiceUnsendMessageArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceUnsendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *TalkServiceUnsendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unsendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnsendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnsendMessageResult() *TalkServiceUnsendMessageResult {
  return &TalkServiceUnsendMessageResult{}
}

var TalkServiceUnsendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceUnsendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnsendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnsendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnsendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unsendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnsendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockRecommendationArgs() *TalkServiceBlockRecommendationArgs {
  return &TalkServiceBlockRecommendationArgs{}
}


func (p *TalkServiceBlockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockRecommendationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockRecommendationResult() *TalkServiceBlockRecommendationResult {
  return &TalkServiceBlockRecommendationResult{}
}

var TalkServiceBlockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockRecommendationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
type TalkServiceFindAndAddContactsByMidArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Type ContactType `thrift:"type,3" db:"type" json:"type"`
  Reference string `thrift:"reference,4" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByMidArgs() *TalkServiceFindAndAddContactsByMidArgs {
  return &TalkServiceFindAndAddContactsByMidArgs{}
}


func (p *TalkServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetType() ContactType {
  return p.Type
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByMidArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByMidResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByMidResult() *TalkServiceFindAndAddContactsByMidResult {
  return &TalkServiceFindAndAddContactsByMidResult{}
}

var TalkServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key573 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key573 = v
}
    _val574 := &Contact{}
    if err := _val574.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val574), err)
    }
    p.Success[_key573] = _val574
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SenderMid
//  - MessageId
type TalkServiceRequestResendMessageArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SenderMid string `thrift:"senderMid,2" db:"senderMid" json:"senderMid"`
  MessageId string `thrift:"messageId,3" db:"messageId" json:"messageId"`
}

func NewTalkServiceRequestResendMessageArgs() *TalkServiceRequestResendMessageArgs {
  return &TalkServiceRequestResendMessageArgs{}
}


func (p *TalkServiceRequestResendMessageArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRequestResendMessageArgs) GetSenderMid() string {
  return p.SenderMid
}

func (p *TalkServiceRequestResendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *TalkServiceRequestResendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestResendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRequestResendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SenderMid = v
}
  return nil
}

func (p *TalkServiceRequestResendMessageArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *TalkServiceRequestResendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestResendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestResendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRequestResendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "senderMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:senderMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SenderMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.senderMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:senderMid: ", p), err) }
  return err
}

func (p *TalkServiceRequestResendMessageArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messageId: ", p), err) }
  return err
}

func (p *TalkServiceRequestResendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestResendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestResendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestResendMessageResult() *TalkServiceRequestResendMessageResult {
  return &TalkServiceRequestResendMessageResult{}
}

var TalkServiceRequestResendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestResendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestResendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestResendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestResendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestResendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestResendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestResendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestResendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestResendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestResendMessageResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatRemovedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int32 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatRemovedArgs() *TalkServiceSendChatRemovedArgs {
  return &TalkServiceSendChatRemovedArgs{}
}


func (p *TalkServiceSendChatRemovedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatRemovedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatRemovedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatRemovedArgs) GetSessionId() int32 {
  return p.SessionId
}
func (p *TalkServiceSendChatRemovedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatRemoved_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatRemovedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatRemovedResult() *TalkServiceSendChatRemovedResult {
  return &TalkServiceSendChatRemovedResult{}
}

var TalkServiceSendChatRemovedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatRemovedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatRemovedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatRemovedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatRemovedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatRemoved_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatRemovedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ReceiverMid
//  - OriginalMessageId
//  - ResendMessage
//  - ErrorCode
type TalkServiceRespondResendMessageArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ReceiverMid string `thrift:"receiverMid,2" db:"receiverMid" json:"receiverMid"`
  OriginalMessageId string `thrift:"originalMessageId,3" db:"originalMessageId" json:"originalMessageId"`
  ResendMessage *Message `thrift:"resendMessage,4" db:"resendMessage" json:"resendMessage"`
  ErrorCode TalkExceptionCode `thrift:"errorCode,5" db:"errorCode" json:"errorCode"`
}

func NewTalkServiceRespondResendMessageArgs() *TalkServiceRespondResendMessageArgs {
  return &TalkServiceRespondResendMessageArgs{}
}


func (p *TalkServiceRespondResendMessageArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRespondResendMessageArgs) GetReceiverMid() string {
  return p.ReceiverMid
}

func (p *TalkServiceRespondResendMessageArgs) GetOriginalMessageId() string {
  return p.OriginalMessageId
}
var TalkServiceRespondResendMessageArgs_ResendMessage_DEFAULT *Message
func (p *TalkServiceRespondResendMessageArgs) GetResendMessage() *Message {
  if !p.IsSetResendMessage() {
    return TalkServiceRespondResendMessageArgs_ResendMessage_DEFAULT
  }
return p.ResendMessage
}

func (p *TalkServiceRespondResendMessageArgs) GetErrorCode() TalkExceptionCode {
  return p.ErrorCode
}
func (p *TalkServiceRespondResendMessageArgs) IsSetResendMessage() bool {
  return p.ResendMessage != nil
}

func (p *TalkServiceRespondResendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReceiverMid = v
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OriginalMessageId = v
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.ResendMessage = &Message{}
  if err := p.ResendMessage.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResendMessage), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TalkExceptionCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondResendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondResendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiverMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receiverMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReceiverMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiverMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receiverMid: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "originalMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:originalMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OriginalMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originalMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:originalMessageId: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resendMessage", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resendMessage: ", p), err) }
  if err := p.ResendMessage.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResendMessage), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resendMessage: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:errorCode: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondResendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRespondResendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRespondResendMessageResult() *TalkServiceRespondResendMessageResult {
  return &TalkServiceRespondResendMessageResult{}
}

var TalkServiceRespondResendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceRespondResendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRespondResendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRespondResendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRespondResendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondResendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondResendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRespondResendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondResendMessageResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type TalkServiceInviteIntoRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoRoomArgs() *TalkServiceInviteIntoRoomArgs {
  return &TalkServiceInviteIntoRoomArgs{}
}


func (p *TalkServiceInviteIntoRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceInviteIntoRoomArgs) GetRoomId() string {
  return p.RoomId
}

func (p *TalkServiceInviteIntoRoomArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceInviteIntoRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem575 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem575 = v
}
    p.ContactIds = append(p.ContactIds, _elem575)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoRoomResult() *TalkServiceInviteIntoRoomResult {
  return &TalkServiceInviteIntoRoomResult{}
}

var TalkServiceInviteIntoRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - EncryptedKeyChain
//  - HashKeyChain
type TalkServiceRespondE2EEKeyExchangeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  EncryptedKeyChain []byte `thrift:"encryptedKeyChain,2" db:"encryptedKeyChain" json:"encryptedKeyChain"`
  HashKeyChain []byte `thrift:"hashKeyChain,3" db:"hashKeyChain" json:"hashKeyChain"`
}

func NewTalkServiceRespondE2EEKeyExchangeArgs() *TalkServiceRespondE2EEKeyExchangeArgs {
  return &TalkServiceRespondE2EEKeyExchangeArgs{}
}


func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetEncryptedKeyChain() []byte {
  return p.EncryptedKeyChain
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetHashKeyChain() []byte {
  return p.HashKeyChain
}
func (p *TalkServiceRespondE2EEKeyExchangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncryptedKeyChain = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HashKeyChain = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondE2EEKeyExchange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedKeyChain", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encryptedKeyChain: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EncryptedKeyChain); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encryptedKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hashKeyChain", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hashKeyChain: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.HashKeyChain); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hashKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondE2EEKeyExchangeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRespondE2EEKeyExchangeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRespondE2EEKeyExchangeResult() *TalkServiceRespondE2EEKeyExchangeResult {
  return &TalkServiceRespondE2EEKeyExchangeResult{}
}

var TalkServiceRespondE2EEKeyExchangeResult_E_DEFAULT *TalkException
func (p *TalkServiceRespondE2EEKeyExchangeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRespondE2EEKeyExchangeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRespondE2EEKeyExchangeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondE2EEKeyExchange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondE2EEKeyExchangeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - LocalContacts
type TalkServiceSyncContactsArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  LocalContacts []*ContactModification `thrift:"localContacts,2" db:"localContacts" json:"localContacts"`
}

func NewTalkServiceSyncContactsArgs() *TalkServiceSyncContactsArgs {
  return &TalkServiceSyncContactsArgs{}
}


func (p *TalkServiceSyncContactsArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceSyncContactsArgs) GetLocalContacts() []*ContactModification {
  return p.LocalContacts
}
func (p *TalkServiceSyncContactsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceSyncContactsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactModification, 0, size)
  p.LocalContacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem576 := &ContactModification{}
    if err := _elem576.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem576), err)
    }
    p.LocalContacts = append(p.LocalContacts, _elem576)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceSyncContactsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "syncContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSyncContactsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceSyncContactsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localContacts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localContacts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.LocalContacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LocalContacts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localContacts: ", p), err) }
  return err
}

func (p *TalkServiceSyncContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSyncContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSyncContactsResult struct {
  Success map[string]*ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSyncContactsResult() *TalkServiceSyncContactsResult {
  return &TalkServiceSyncContactsResult{}
}

var TalkServiceSyncContactsResult_Success_DEFAULT map[string]*ContactRegistration

func (p *TalkServiceSyncContactsResult) GetSuccess() map[string]*ContactRegistration {
  return p.Success
}
var TalkServiceSyncContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceSyncContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSyncContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSyncContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSyncContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSyncContactsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ContactRegistration, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key577 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key577 = v
}
    _val578 := &ContactRegistration{}
    if err := _val578.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val578), err)
    }
    p.Success[_key577] = _val578
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "syncContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSyncContactsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSyncContactsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSyncContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSyncContactsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Phones
//  - Reference
type TalkServiceFindAndAddContactsByPhoneArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByPhoneArgs() *TalkServiceFindAndAddContactsByPhoneArgs {
  return &TalkServiceFindAndAddContactsByPhoneArgs{}
}


func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem579 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem579 = v
}
    p.Phones = append(p.Phones, _elem579)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Phones[i], p.Phones[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByPhoneResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByPhoneResult() *TalkServiceFindAndAddContactsByPhoneResult {
  return &TalkServiceFindAndAddContactsByPhoneResult{}
}

var TalkServiceFindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key580 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key580 = v
}
    _val581 := &Contact{}
    if err := _val581.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val581), err)
    }
    p.Success[_key580] = _val581
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - Badge
type TalkServiceNotifySleepArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  Badge int32 `thrift:"badge,3" db:"badge" json:"badge"`
}

func NewTalkServiceNotifySleepArgs() *TalkServiceNotifySleepArgs {
  return &TalkServiceNotifySleepArgs{}
}


func (p *TalkServiceNotifySleepArgs) GetLastRev() int64 {
  return p.LastRev
}

func (p *TalkServiceNotifySleepArgs) GetBadge() int32 {
  return p.Badge
}
func (p *TalkServiceNotifySleepArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifySleepArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Badge = v
}
  return nil
}

func (p *TalkServiceNotifySleepArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifySleep_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifySleepArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifySleepArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "badge", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:badge: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Badge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.badge (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:badge: ", p), err) }
  return err
}

func (p *TalkServiceNotifySleepArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifySleepArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifySleepResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifySleepResult() *TalkServiceNotifySleepResult {
  return &TalkServiceNotifySleepResult{}
}

var TalkServiceNotifySleepResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifySleepResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifySleepResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifySleepResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifySleepResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifySleep_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifySleepResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifySleepResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifySleepResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Profile
type TalkServiceReportProfileArgs struct {
  // unused field # 1
  SyncOpRevision int64 `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
  Profile *Profile `thrift:"profile,3" db:"profile" json:"profile"`
}

func NewTalkServiceReportProfileArgs() *TalkServiceReportProfileArgs {
  return &TalkServiceReportProfileArgs{}
}


func (p *TalkServiceReportProfileArgs) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}
var TalkServiceReportProfileArgs_Profile_DEFAULT *Profile
func (p *TalkServiceReportProfileArgs) GetProfile() *Profile {
  if !p.IsSetProfile() {
    return TalkServiceReportProfileArgs_Profile_DEFAULT
  }
return p.Profile
}
func (p *TalkServiceReportProfileArgs) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *TalkServiceReportProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportProfileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *TalkServiceReportProfileArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Profile = &Profile{}
  if err := p.Profile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *TalkServiceReportProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportProfileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncOpRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err) }
  return err
}

func (p *TalkServiceReportProfileArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profile", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:profile: ", p), err) }
  if err := p.Profile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:profile: ", p), err) }
  return err
}

func (p *TalkServiceReportProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportProfileResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportProfileResult() *TalkServiceReportProfileResult {
  return &TalkServiceReportProfileResult{}
}

var TalkServiceReportProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceReportProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportProfileResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
type TalkServiceNotifyUpdatedArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,3" db:"deviceInfo" json:"deviceInfo"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  OldUdidHash string `thrift:"oldUdidHash,5" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceNotifyUpdatedArgs() *TalkServiceNotifyUpdatedArgs {
  return &TalkServiceNotifyUpdatedArgs{}
}


func (p *TalkServiceNotifyUpdatedArgs) GetLastRev() int64 {
  return p.LastRev
}
var TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceNotifyUpdatedArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceNotifyUpdatedArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyUpdatedArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceNotifyUpdatedArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceNotifyUpdatedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyUpdatedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyUpdatedResult() *TalkServiceNotifyUpdatedResult {
  return &TalkServiceNotifyUpdatedResult{}
}

var TalkServiceNotifyUpdatedResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyUpdatedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyUpdatedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyUpdatedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyUpdatedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Settings
type TalkServiceReportSettingsArgs struct {
  // unused field # 1
  SyncOpRevision int64 `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
  Settings *Settings `thrift:"settings,3" db:"settings" json:"settings"`
}

func NewTalkServiceReportSettingsArgs() *TalkServiceReportSettingsArgs {
  return &TalkServiceReportSettingsArgs{}
}


func (p *TalkServiceReportSettingsArgs) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}
var TalkServiceReportSettingsArgs_Settings_DEFAULT *Settings
func (p *TalkServiceReportSettingsArgs) GetSettings() *Settings {
  if !p.IsSetSettings() {
    return TalkServiceReportSettingsArgs_Settings_DEFAULT
  }
return p.Settings
}
func (p *TalkServiceReportSettingsArgs) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *TalkServiceReportSettingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *TalkServiceReportSettingsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Settings = &Settings{}
  if err := p.Settings.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportSettingsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncOpRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err) }
  return err
}

func (p *TalkServiceReportSettingsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *TalkServiceReportSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportSettingsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportSettingsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportSettingsResult() *TalkServiceReportSettingsResult {
  return &TalkServiceReportSettingsResult{}
}

var TalkServiceReportSettingsResult_E_DEFAULT *TalkException
func (p *TalkServiceReportSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportSettingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportSettingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportSettingsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedContactIdsArgs() *TalkServiceGetBlockedContactIdsArgs {
  return &TalkServiceGetBlockedContactIdsArgs{}
}


func (p *TalkServiceGetBlockedContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedContactIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsResult() *TalkServiceGetBlockedContactIdsResult {
  return &TalkServiceGetBlockedContactIdsResult{}
}

var TalkServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem582 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem582 = v
}
    p.Success = append(p.Success, _elem582)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - Location
//  - NetworkStatus
type TalkServiceOpenProximityMatchArgs struct {
  // unused field # 1
  Location *Location `thrift:"location,2" db:"location" json:"location"`
  NetworkStatus *ClientNetworkStatus `thrift:"networkStatus,3" db:"networkStatus" json:"networkStatus"`
}

func NewTalkServiceOpenProximityMatchArgs() *TalkServiceOpenProximityMatchArgs {
  return &TalkServiceOpenProximityMatchArgs{}
}

var TalkServiceOpenProximityMatchArgs_Location_DEFAULT *Location
func (p *TalkServiceOpenProximityMatchArgs) GetLocation() *Location {
  if !p.IsSetLocation() {
    return TalkServiceOpenProximityMatchArgs_Location_DEFAULT
  }
return p.Location
}
var TalkServiceOpenProximityMatchArgs_NetworkStatus_DEFAULT *ClientNetworkStatus
func (p *TalkServiceOpenProximityMatchArgs) GetNetworkStatus() *ClientNetworkStatus {
  if !p.IsSetNetworkStatus() {
    return TalkServiceOpenProximityMatchArgs_NetworkStatus_DEFAULT
  }
return p.NetworkStatus
}
func (p *TalkServiceOpenProximityMatchArgs) IsSetLocation() bool {
  return p.Location != nil
}

func (p *TalkServiceOpenProximityMatchArgs) IsSetNetworkStatus() bool {
  return p.NetworkStatus != nil
}

func (p *TalkServiceOpenProximityMatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NetworkStatus = &ClientNetworkStatus{}
  if err := p.NetworkStatus.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetworkStatus), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openProximityMatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err) }
  if err := p.Location.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err) }
  return err
}

func (p *TalkServiceOpenProximityMatchArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkStatus", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:networkStatus: ", p), err) }
  if err := p.NetworkStatus.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetworkStatus), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:networkStatus: ", p), err) }
  return err
}

func (p *TalkServiceOpenProximityMatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceOpenProximityMatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceOpenProximityMatchResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceOpenProximityMatchResult() *TalkServiceOpenProximityMatchResult {
  return &TalkServiceOpenProximityMatchResult{}
}

var TalkServiceOpenProximityMatchResult_Success_DEFAULT string
func (p *TalkServiceOpenProximityMatchResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceOpenProximityMatchResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceOpenProximityMatchResult_E_DEFAULT *TalkException
func (p *TalkServiceOpenProximityMatchResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceOpenProximityMatchResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceOpenProximityMatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceOpenProximityMatchResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceOpenProximityMatchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceOpenProximityMatchResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openProximityMatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceOpenProximityMatchResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceOpenProximityMatchResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceOpenProximityMatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceOpenProximityMatchResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - MidOrEMid
type TalkServiceRemoveFriendRequestArgs struct {
  Direction Direction `thrift:"direction,1" db:"direction" json:"direction"`
  MidOrEMid string `thrift:"midOrEMid,2" db:"midOrEMid" json:"midOrEMid"`
}

func NewTalkServiceRemoveFriendRequestArgs() *TalkServiceRemoveFriendRequestArgs {
  return &TalkServiceRemoveFriendRequestArgs{}
}


func (p *TalkServiceRemoveFriendRequestArgs) GetDirection() Direction {
  return p.Direction
}

func (p *TalkServiceRemoveFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}
func (p *TalkServiceRemoveFriendRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "midOrEMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midOrEMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midOrEMid: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFriendRequestResult() *TalkServiceRemoveFriendRequestResult {
  return &TalkServiceRemoveFriendRequestResult{}
}

var TalkServiceRemoveFriendRequestResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveFriendRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Type
type TalkServiceUpdateNotificationTokenArgs struct {
  // unused field # 1
  Token string `thrift:"token,2" db:"token" json:"token"`
  Type UpdateNotificationTokenType `thrift:"type,3" db:"type" json:"type"`
}

func NewTalkServiceUpdateNotificationTokenArgs() *TalkServiceUpdateNotificationTokenArgs {
  return &TalkServiceUpdateNotificationTokenArgs{}
}


func (p *TalkServiceUpdateNotificationTokenArgs) GetToken() string {
  return p.Token
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetType() UpdateNotificationTokenType {
  return p.Type
}
func (p *TalkServiceUpdateNotificationTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UpdateNotificationTokenType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNotificationToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateNotificationTokenResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateNotificationTokenResult() *TalkServiceUpdateNotificationTokenResult {
  return &TalkServiceUpdateNotificationTokenResult{}
}

var TalkServiceUpdateNotificationTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateNotificationTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateNotificationTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateNotificationTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNotificationToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateNotificationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
type TalkServiceUpdateExtendedProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr UpdateExtendedProfileAttributeAttr `thrift:"attr,2" db:"attr" json:"attr"`
  ExtendedProfile *ExtendedProfile `thrift:"extendedProfile,3" db:"extendedProfile" json:"extendedProfile"`
}

func NewTalkServiceUpdateExtendedProfileAttributeArgs() *TalkServiceUpdateExtendedProfileAttributeArgs {
  return &TalkServiceUpdateExtendedProfileAttributeArgs{}
}


func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetAttr() UpdateExtendedProfileAttributeAttr {
  return p.Attr
}
var TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT *ExtendedProfile
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetExtendedProfile() *ExtendedProfile {
  if !p.IsSetExtendedProfile() {
    return TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT
  }
return p.ExtendedProfile
}
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) IsSetExtendedProfile() bool {
  return p.ExtendedProfile != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UpdateExtendedProfileAttributeAttr(v)
  p.Attr = temp
}
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExtendedProfile = &ExtendedProfile{}
  if err := p.ExtendedProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendedProfile), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateExtendedProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "extendedProfile", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extendedProfile: ", p), err) }
  if err := p.ExtendedProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendedProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extendedProfile: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateExtendedProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateExtendedProfileAttributeResult() *TalkServiceUpdateExtendedProfileAttributeResult {
  return &TalkServiceUpdateExtendedProfileAttributeResult{}
}

var TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateExtendedProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateExtendedProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateExtendedProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - IdentityCredential
//  - MigrationPincodeSessionId
type TalkServiceVerifyIdentityCredentialWithResultArgs struct {
  // unused field # 1
  IdentityCredential *IdentityCredential `thrift:"identityCredential,2" db:"identityCredential" json:"identityCredential"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,3" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultArgs() *TalkServiceVerifyIdentityCredentialWithResultArgs {
  return &TalkServiceVerifyIdentityCredentialWithResultArgs{}
}

var TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT *IdentityCredential
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetIdentityCredential() *IdentityCredential {
  if !p.IsSetIdentityCredential() {
    return TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT
  }
return p.IdentityCredential
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) IsSetIdentityCredential() bool {
  return p.IdentityCredential != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.IdentityCredential = &IdentityCredential{}
  if err := p.IdentityCredential.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyIdentityCredentialWithResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityCredential", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityCredential: ", p), err) }
  if err := p.IdentityCredential.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityCredential: ", p), err) }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyIdentityCredentialWithResultResult struct {
  Success *UserAuthStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultResult() *TalkServiceVerifyIdentityCredentialWithResultResult {
  return &TalkServiceVerifyIdentityCredentialWithResultResult{}
}

var TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT *UserAuthStatus
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetSuccess() *UserAuthStatus {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserAuthStatus{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyIdentityCredentialWithResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultResult(%+v)", *p)
}

// Attributes:
//  - Identifier
//  - Provider
//  - Locale
type TalkServiceRequestAccountPasswordResetArgs struct {
  // unused field # 1
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  // unused field # 3
  Provider IdentityProvider `thrift:"provider,4" db:"provider" json:"provider"`
  Locale string `thrift:"locale,5" db:"locale" json:"locale"`
}

func NewTalkServiceRequestAccountPasswordResetArgs() *TalkServiceRequestAccountPasswordResetArgs {
  return &TalkServiceRequestAccountPasswordResetArgs{}
}


func (p *TalkServiceRequestAccountPasswordResetArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetLocale() string {
  return p.Locale
}
func (p *TalkServiceRequestAccountPasswordResetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:provider: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locale: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestAccountPasswordResetResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestAccountPasswordResetResult() *TalkServiceRequestAccountPasswordResetResult {
  return &TalkServiceRequestAccountPasswordResetResult{}
}

var TalkServiceRequestAccountPasswordResetResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestAccountPasswordResetResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestAccountPasswordResetResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestAccountPasswordResetResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceSendPostbackArgs struct {
  // unused field # 1
  Request *SendPostbackRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceSendPostbackArgs() *TalkServiceSendPostbackArgs {
  return &TalkServiceSendPostbackArgs{}
}

var TalkServiceSendPostbackArgs_Request_DEFAULT *SendPostbackRequest
func (p *TalkServiceSendPostbackArgs) GetRequest() *SendPostbackRequest {
  if !p.IsSetRequest() {
    return TalkServiceSendPostbackArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceSendPostbackArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceSendPostbackArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &SendPostbackRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendPostback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendPostbackArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *TalkServiceSendPostbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendPostbackArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendPostbackResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendPostbackResult() *TalkServiceSendPostbackResult {
  return &TalkServiceSendPostbackResult{}
}

var TalkServiceSendPostbackResult_E_DEFAULT *TalkException
func (p *TalkServiceSendPostbackResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendPostbackResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendPostbackResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendPostbackResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendPostback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendPostbackResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendPostbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendPostbackResult(%+v)", *p)
}

// Attributes:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
type TalkServiceTryFriendRequestArgs struct {
  MidOrEMid string `thrift:"midOrEMid,1" db:"midOrEMid" json:"midOrEMid"`
  Method FriendRequestMethod `thrift:"method,2" db:"method" json:"method"`
  FriendRequestParams string `thrift:"friendRequestParams,3" db:"friendRequestParams" json:"friendRequestParams"`
}

func NewTalkServiceTryFriendRequestArgs() *TalkServiceTryFriendRequestArgs {
  return &TalkServiceTryFriendRequestArgs{}
}


func (p *TalkServiceTryFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}

func (p *TalkServiceTryFriendRequestArgs) GetMethod() FriendRequestMethod {
  return p.Method
}

func (p *TalkServiceTryFriendRequestArgs) GetFriendRequestParams() string {
  return p.FriendRequestParams
}
func (p *TalkServiceTryFriendRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FriendRequestMethod(v)
  p.Method = temp
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FriendRequestParams = v
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "tryFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceTryFriendRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "midOrEMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:midOrEMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:midOrEMid: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "friendRequestParams", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:friendRequestParams: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FriendRequestParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestParams (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:friendRequestParams: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceTryFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceTryFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceTryFriendRequestResult() *TalkServiceTryFriendRequestResult {
  return &TalkServiceTryFriendRequestResult{}
}

var TalkServiceTryFriendRequestResult_E_DEFAULT *TalkException
func (p *TalkServiceTryFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceTryFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceTryFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceTryFriendRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "tryFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceTryFriendRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceTryFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceTryFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Ids
type TalkServiceAcceptProximityMatchesArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Ids []string `thrift:"ids,3" db:"ids" json:"ids"`
}

func NewTalkServiceAcceptProximityMatchesArgs() *TalkServiceAcceptProximityMatchesArgs {
  return &TalkServiceAcceptProximityMatchesArgs{}
}


func (p *TalkServiceAcceptProximityMatchesArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceAcceptProximityMatchesArgs) GetIds() []string {
  return p.Ids
}
func (p *TalkServiceAcceptProximityMatchesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Ids =  tSet
  for i := 0; i < size; i ++ {
var _elem583 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem583 = v
}
    p.Ids = append(p.Ids, _elem583)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptProximityMatches_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceAcceptProximityMatchesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Ids); i++ {
    for j := i+1; j<len(p.Ids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Ids[i], p.Ids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Ids))
      }
    }
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ids: ", p), err) }
  return err
}

func (p *TalkServiceAcceptProximityMatchesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptProximityMatchesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptProximityMatchesResult() *TalkServiceAcceptProximityMatchesResult {
  return &TalkServiceAcceptProximityMatchesResult{}
}

var TalkServiceAcceptProximityMatchesResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptProximityMatchesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptProximityMatchesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptProximityMatchesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptProximityMatchesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptProximityMatches_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptProximityMatchesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptProximityMatchesResult(%+v)", *p)
}

// Attributes:
//  - Ids
type TalkServiceGetContactsArgs struct {
  // unused field # 1
  Ids []string `thrift:"ids,2" db:"ids" json:"ids"`
}

func NewTalkServiceGetContactsArgs() *TalkServiceGetContactsArgs {
  return &TalkServiceGetContactsArgs{}
}


func (p *TalkServiceGetContactsArgs) GetIds() []string {
  return p.Ids
}
func (p *TalkServiceGetContactsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem584 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem584 = v
}
    p.Ids = append(p.Ids, _elem584)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err) }
  return err
}

func (p *TalkServiceGetContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsResult struct {
  Success []*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactsResult() *TalkServiceGetContactsResult {
  return &TalkServiceGetContactsResult{}
}

var TalkServiceGetContactsResult_Success_DEFAULT []*Contact

func (p *TalkServiceGetContactsResult) GetSuccess() []*Contact {
  return p.Success
}
var TalkServiceGetContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem585 := &Contact{}
    if err := _elem585.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem585), err)
    }
    p.Success = append(p.Success, _elem585)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsResult(%+v)", *p)
}

// Attributes:
//  - BooleanState
//  - StringState
type TalkServiceReportDeviceStateArgs struct {
  // unused field # 1
  BooleanState map[C59122ec]bool `thrift:"booleanState,2" db:"booleanState" json:"booleanState"`
  StringState map[C59430gc]string `thrift:"stringState,3" db:"stringState" json:"stringState"`
}

func NewTalkServiceReportDeviceStateArgs() *TalkServiceReportDeviceStateArgs {
  return &TalkServiceReportDeviceStateArgs{}
}


func (p *TalkServiceReportDeviceStateArgs) GetBooleanState() map[C59122ec]bool {
  return p.BooleanState
}

func (p *TalkServiceReportDeviceStateArgs) GetStringState() map[C59430gc]string {
  return p.StringState
}
func (p *TalkServiceReportDeviceStateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C59122ec]bool, size)
  p.BooleanState =  tMap
  for i := 0; i < size; i ++ {
var _key586 C59122ec
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59122ec(v)
    _key586 = temp
}
var _val587 bool
    if v, err := iprot.ReadBool(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val587 = v
}
    p.BooleanState[_key586] = _val587
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C59430gc]string, size)
  p.StringState =  tMap
  for i := 0; i < size; i ++ {
var _key588 C59430gc
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59430gc(v)
    _key588 = temp
}
var _val589 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val589 = v
}
    p.StringState[_key588] = _val589
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportDeviceState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "booleanState", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:booleanState: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.BOOL, len(p.BooleanState)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.BooleanState {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:booleanState: ", p), err) }
  return err
}

func (p *TalkServiceReportDeviceStateArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringState", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringState: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.StringState)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StringState {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringState: ", p), err) }
  return err
}

func (p *TalkServiceReportDeviceStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportDeviceStateArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportDeviceStateResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportDeviceStateResult() *TalkServiceReportDeviceStateResult {
  return &TalkServiceReportDeviceStateResult{}
}

var TalkServiceReportDeviceStateResult_E_DEFAULT *TalkException
func (p *TalkServiceReportDeviceStateResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportDeviceStateResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportDeviceStateResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportDeviceStateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportDeviceState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportDeviceStateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportDeviceStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportDeviceStateResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockContactArgs() *TalkServiceBlockContactArgs {
  return &TalkServiceBlockContactArgs{}
}


func (p *TalkServiceBlockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockContactResult() *TalkServiceBlockContactResult {
  return &TalkServiceBlockContactResult{}
}

var TalkServiceBlockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetExtendedProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetExtendedProfileArgs() *TalkServiceGetExtendedProfileArgs {
  return &TalkServiceGetExtendedProfileArgs{}
}


func (p *TalkServiceGetExtendedProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetExtendedProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getExtendedProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetExtendedProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetExtendedProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetExtendedProfileResult struct {
  Success *ExtendedProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetExtendedProfileResult() *TalkServiceGetExtendedProfileResult {
  return &TalkServiceGetExtendedProfileResult{}
}

var TalkServiceGetExtendedProfileResult_Success_DEFAULT *ExtendedProfile
func (p *TalkServiceGetExtendedProfileResult) GetSuccess() *ExtendedProfile {
  if !p.IsSetSuccess() {
    return TalkServiceGetExtendedProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetExtendedProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetExtendedProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetExtendedProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetExtendedProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetExtendedProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetExtendedProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExtendedProfile{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getExtendedProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetExtendedProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetExtendedProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetExtendedProfileResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetProfileArgs() *TalkServiceGetProfileArgs {
  return &TalkServiceGetProfileArgs{}
}


func (p *TalkServiceGetProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProfileResult struct {
  Success *Profile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProfileResult() *TalkServiceGetProfileResult {
  return &TalkServiceGetProfileResult{}
}

var TalkServiceGetProfileResult_Success_DEFAULT *Profile
func (p *TalkServiceGetProfileResult) GetSuccess() *Profile {
  if !p.IsSetSuccess() {
    return TalkServiceGetProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Profile{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - AttributesToRetrieve
type TalkServiceGetSettingsAttributes2Args struct {
  // unused field # 1
  AttributesToRetrieve []C59756ii `thrift:"attributesToRetrieve,2" db:"attributesToRetrieve" json:"attributesToRetrieve"`
}

func NewTalkServiceGetSettingsAttributes2Args() *TalkServiceGetSettingsAttributes2Args {
  return &TalkServiceGetSettingsAttributes2Args{}
}


func (p *TalkServiceGetSettingsAttributes2Args) GetAttributesToRetrieve() []C59756ii {
  return p.AttributesToRetrieve
}
func (p *TalkServiceGetSettingsAttributes2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C59756ii, 0, size)
  p.AttributesToRetrieve =  tSet
  for i := 0; i < size; i ++ {
var _elem590 C59756ii
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59756ii(v)
    _elem590 = temp
}
    p.AttributesToRetrieve = append(p.AttributesToRetrieve, _elem590)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributesToRetrieve", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToRetrieve: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AttributesToRetrieve)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToRetrieve); i++ {
    for j := i+1; j<len(p.AttributesToRetrieve); j++ {
      if func(tgt, src C59756ii) bool {
        if tgt != src { return false }
        return true
      }(p.AttributesToRetrieve[i], p.AttributesToRetrieve[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToRetrieve))
      }
    }
  }
  for _, v := range p.AttributesToRetrieve {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToRetrieve: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
type TalkServiceGetSettingsAttributes2Result struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTalkServiceGetSettingsAttributes2Result() *TalkServiceGetSettingsAttributes2Result {
  return &TalkServiceGetSettingsAttributes2Result{}
}

var TalkServiceGetSettingsAttributes2Result_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsAttributes2Result) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsAttributes2Result_Success_DEFAULT
  }
return p.Success
}
func (p *TalkServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetProximityMatchCandidateListArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceGetProximityMatchCandidateListArgs() *TalkServiceGetProximityMatchCandidateListArgs {
  return &TalkServiceGetProximityMatchCandidateListArgs{}
}


func (p *TalkServiceGetProximityMatchCandidateListArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceGetProximityMatchCandidateListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProximityMatchCandidateList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProximityMatchCandidateListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProximityMatchCandidateListResult struct {
  Success *ProximityMatchCandidateResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProximityMatchCandidateListResult() *TalkServiceGetProximityMatchCandidateListResult {
  return &TalkServiceGetProximityMatchCandidateListResult{}
}

var TalkServiceGetProximityMatchCandidateListResult_Success_DEFAULT *ProximityMatchCandidateResult_
func (p *TalkServiceGetProximityMatchCandidateListResult) GetSuccess() *ProximityMatchCandidateResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceGetProximityMatchCandidateListResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetProximityMatchCandidateListResult_E_DEFAULT *TalkException
func (p *TalkServiceGetProximityMatchCandidateListResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetProximityMatchCandidateListResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetProximityMatchCandidateListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ProximityMatchCandidateResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProximityMatchCandidateList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProximityMatchCandidateListResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProximityMatchCandidateListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProximityMatchCandidateListResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactByMetaTagArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactByMetaTagArgs() *TalkServiceFindAndAddContactByMetaTagArgs {
  return &TalkServiceFindAndAddContactByMetaTagArgs{}
}


func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactByMetaTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactByMetaTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactByMetaTagResult struct {
  Success *PendingAgreementsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactByMetaTagResult() *TalkServiceFindAndAddContactByMetaTagResult {
  return &TalkServiceFindAndAddContactByMetaTagResult{}
}

var TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT *PendingAgreementsResponse
func (p *TalkServiceFindAndAddContactByMetaTagResult) GetSuccess() *PendingAgreementsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactByMetaTagResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PendingAgreementsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactByMetaTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - ChatIds
//  - SyncReason
type TalkServiceGetMessageReadRangeArgs struct {
  // unused field # 1
  ChatIds []string `thrift:"chatIds,2" db:"chatIds" json:"chatIds"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetMessageReadRangeArgs() *TalkServiceGetMessageReadRangeArgs {
  return &TalkServiceGetMessageReadRangeArgs{}
}


func (p *TalkServiceGetMessageReadRangeArgs) GetChatIds() []string {
  return p.ChatIds
}

func (p *TalkServiceGetMessageReadRangeArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetMessageReadRangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem591 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem591 = v
}
    p.ChatIds = append(p.ChatIds, _elem591)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMessageReadRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatIds: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageReadRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageReadRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetMessageReadRangeResult struct {
  Success []*TMessageReadRange `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetMessageReadRangeResult() *TalkServiceGetMessageReadRangeResult {
  return &TalkServiceGetMessageReadRangeResult{}
}

var TalkServiceGetMessageReadRangeResult_Success_DEFAULT []*TMessageReadRange

func (p *TalkServiceGetMessageReadRangeResult) GetSuccess() []*TMessageReadRange {
  return p.Success
}
var TalkServiceGetMessageReadRangeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetMessageReadRangeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetMessageReadRangeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetMessageReadRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetMessageReadRangeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetMessageReadRangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMessageReadRange, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem592 := &TMessageReadRange{}
    if err := _elem592.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem592), err)
    }
    p.Success = append(p.Success, _elem592)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMessageReadRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageReadRangeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageReadRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageReadRangeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
type TalkServiceRegisterUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceRegisterUseridArgs() *TalkServiceRegisterUseridArgs {
  return &TalkServiceRegisterUseridArgs{}
}


func (p *TalkServiceRegisterUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRegisterUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceRegisterUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRegisterUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceRegisterUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterUseridArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRegisterUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterUseridResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterUseridResult() *TalkServiceRegisterUseridResult {
  return &TalkServiceRegisterUseridResult{}
}

var TalkServiceRegisterUseridResult_Success_DEFAULT bool
func (p *TalkServiceRegisterUseridResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterUseridResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterUseridResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - PushRecvReports
type TalkServiceReportPushRecvReportsArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  PushRecvReports []*PushRecvReport `thrift:"pushRecvReports,2" db:"pushRecvReports" json:"pushRecvReports"`
}

func NewTalkServiceReportPushRecvReportsArgs() *TalkServiceReportPushRecvReportsArgs {
  return &TalkServiceReportPushRecvReportsArgs{}
}


func (p *TalkServiceReportPushRecvReportsArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceReportPushRecvReportsArgs) GetPushRecvReports() []*PushRecvReport {
  return p.PushRecvReports
}
func (p *TalkServiceReportPushRecvReportsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PushRecvReport, 0, size)
  p.PushRecvReports =  tSlice
  for i := 0; i < size; i ++ {
    _elem593 := &PushRecvReport{}
    if err := _elem593.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem593), err)
    }
    p.PushRecvReports = append(p.PushRecvReports, _elem593)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportPushRecvReports_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceReportPushRecvReportsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pushRecvReports", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pushRecvReports: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PushRecvReports)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PushRecvReports {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pushRecvReports: ", p), err) }
  return err
}

func (p *TalkServiceReportPushRecvReportsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportPushRecvReportsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportPushRecvReportsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportPushRecvReportsResult() *TalkServiceReportPushRecvReportsResult {
  return &TalkServiceReportPushRecvReportsResult{}
}

var TalkServiceReportPushRecvReportsResult_E_DEFAULT *TalkException
func (p *TalkServiceReportPushRecvReportsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportPushRecvReportsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportPushRecvReportsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportPushRecvReportsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportPushRecvReports_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportPushRecvReportsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportPushRecvReportsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportPushRecvReportsResult(%+v)", *p)
}

type TalkServiceNoopArgs struct {
}

func NewTalkServiceNoopArgs() *TalkServiceNoopArgs {
  return &TalkServiceNoopArgs{}
}

func (p *TalkServiceNoopArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "noop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNoopResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNoopResult() *TalkServiceNoopResult {
  return &TalkServiceNoopResult{}
}

var TalkServiceNoopResult_E_DEFAULT *TalkException
func (p *TalkServiceNoopResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNoopResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNoopResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNoopResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNoopResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "noop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNoopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedRecommendationIdsArgs() *TalkServiceGetBlockedRecommendationIdsArgs {
  return &TalkServiceGetBlockedRecommendationIdsArgs{}
}


func (p *TalkServiceGetBlockedRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedRecommendationIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedRecommendationIdsResult() *TalkServiceGetBlockedRecommendationIdsResult {
  return &TalkServiceGetBlockedRecommendationIdsResult{}
}

var TalkServiceGetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem594 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem594 = v
}
    p.Success = append(p.Success, _elem594)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - RemoveFollowerRequest
type TalkServiceRemoveFollowerArgs struct {
  // unused field # 1
  RemoveFollowerRequest *RemoveFollowerRequest `thrift:"removeFollowerRequest,2" db:"removeFollowerRequest" json:"removeFollowerRequest"`
}

func NewTalkServiceRemoveFollowerArgs() *TalkServiceRemoveFollowerArgs {
  return &TalkServiceRemoveFollowerArgs{}
}

var TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT *RemoveFollowerRequest
func (p *TalkServiceRemoveFollowerArgs) GetRemoveFollowerRequest() *RemoveFollowerRequest {
  if !p.IsSetRemoveFollowerRequest() {
    return TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT
  }
return p.RemoveFollowerRequest
}
func (p *TalkServiceRemoveFollowerArgs) IsSetRemoveFollowerRequest() bool {
  return p.RemoveFollowerRequest != nil
}

func (p *TalkServiceRemoveFollowerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.RemoveFollowerRequest = &RemoveFollowerRequest{}
  if err := p.RemoveFollowerRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RemoveFollowerRequest), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFollower_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "removeFollowerRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removeFollowerRequest: ", p), err) }
  if err := p.RemoveFollowerRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RemoveFollowerRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removeFollowerRequest: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFollowerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFollowerArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFollowerResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFollowerResult() *TalkServiceRemoveFollowerResult {
  return &TalkServiceRemoveFollowerResult{}
}

var TalkServiceRemoveFollowerResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveFollowerResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveFollowerResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveFollowerResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveFollowerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeFollower_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFollowerResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveFollowerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFollowerResult(%+v)", *p)
}

// Attributes:
//  - MigrationSessionId
type TalkServiceVerifyAccountMigrationArgs struct {
  // unused field # 1
  MigrationSessionId string `thrift:"migrationSessionId,2" db:"migrationSessionId" json:"migrationSessionId"`
}

func NewTalkServiceVerifyAccountMigrationArgs() *TalkServiceVerifyAccountMigrationArgs {
  return &TalkServiceVerifyAccountMigrationArgs{}
}


func (p *TalkServiceVerifyAccountMigrationArgs) GetMigrationSessionId() string {
  return p.MigrationSessionId
}
func (p *TalkServiceVerifyAccountMigrationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MigrationSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountMigration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceVerifyAccountMigrationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyAccountMigrationResult() *TalkServiceVerifyAccountMigrationResult {
  return &TalkServiceVerifyAccountMigrationResult{}
}

var TalkServiceVerifyAccountMigrationResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyAccountMigrationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyAccountMigrationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyAccountMigrationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountMigration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyAccountMigrationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetSettingsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetSettingsArgs() *TalkServiceGetSettingsArgs {
  return &TalkServiceGetSettingsArgs{}
}


func (p *TalkServiceGetSettingsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetSettingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetSettingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsResult struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsResult() *TalkServiceGetSettingsResult {
  return &TalkServiceGetSettingsResult{}
}

var TalkServiceGetSettingsResult_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsResult) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetSettingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSettingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
type TalkServiceGetLastE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEGroupSharedKeyArgs() *TalkServiceGetLastE2EEGroupSharedKeyArgs {
  return &TalkServiceGetLastE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEGroupSharedKeyResult() *TalkServiceGetLastE2EEGroupSharedKeyResult {
  return &TalkServiceGetLastE2EEGroupSharedKeyResult{}
}

var TalkServiceGetLastE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetLastE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEGroupSharedKeyResult(%+v)", *p)
}

type TalkServiceGetRingbackToneArgs struct {
}

func NewTalkServiceGetRingbackToneArgs() *TalkServiceGetRingbackToneArgs {
  return &TalkServiceGetRingbackToneArgs{}
}

func (p *TalkServiceGetRingbackToneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingbackTone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingbackToneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingbackToneResult struct {
  Success *RingbackTone `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingbackToneResult() *TalkServiceGetRingbackToneResult {
  return &TalkServiceGetRingbackToneResult{}
}

var TalkServiceGetRingbackToneResult_Success_DEFAULT *RingbackTone
func (p *TalkServiceGetRingbackToneResult) GetSuccess() *RingbackTone {
  if !p.IsSetSuccess() {
    return TalkServiceGetRingbackToneResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRingbackToneResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRingbackToneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRingbackToneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRingbackToneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRingbackToneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRingbackToneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RingbackTone{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRingbackTone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingbackToneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingbackToneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingbackToneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingbackToneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type TalkServiceLeaveRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewTalkServiceLeaveRoomArgs() *TalkServiceLeaveRoomArgs {
  return &TalkServiceLeaveRoomArgs{}
}


func (p *TalkServiceLeaveRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceLeaveRoomArgs) GetRoomId() string {
  return p.RoomId
}
func (p *TalkServiceLeaveRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveRoomResult() *TalkServiceLeaveRoomResult {
  return &TalkServiceLeaveRoomResult{}
}

var TalkServiceLeaveRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceLeaveRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceLeaveRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceLeaveRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceLeaveRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceLeaveRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatCheckedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int32 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatCheckedArgs() *TalkServiceSendChatCheckedArgs {
  return &TalkServiceSendChatCheckedArgs{}
}


func (p *TalkServiceSendChatCheckedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatCheckedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatCheckedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatCheckedArgs) GetSessionId() int32 {
  return p.SessionId
}
func (p *TalkServiceSendChatCheckedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatChecked_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatCheckedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatCheckedResult() *TalkServiceSendChatCheckedResult {
  return &TalkServiceSendChatCheckedResult{}
}

var TalkServiceSendChatCheckedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatCheckedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatCheckedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatCheckedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatCheckedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatChecked_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatCheckedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactsByUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByUseridArgs() *TalkServiceFindAndAddContactsByUseridArgs {
  return &TalkServiceFindAndAddContactsByUseridArgs{}
}


func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByUseridResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByUseridResult() *TalkServiceFindAndAddContactsByUseridResult {
  return &TalkServiceFindAndAddContactsByUseridResult{}
}

var TalkServiceFindAndAddContactsByUseridResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByUseridResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key595 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key595 = v
}
    _val596 := &Contact{}
    if err := _val596.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val596), err)
    }
    p.Success[_key595] = _val596
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetAllContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllContactIdsArgs() *TalkServiceGetAllContactIdsArgs {
  return &TalkServiceGetAllContactIdsArgs{}
}


func (p *TalkServiceGetAllContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllContactIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllContactIdsResult() *TalkServiceGetAllContactIdsResult {
  return &TalkServiceGetAllContactIdsResult{}
}

var TalkServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetAllContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAllContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllContactIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem597 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem597 = v
}
    p.Success = append(p.Success, _elem597)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsResult(%+v)", *p)
}

// Attributes:
//  - UnfollowRequest
type TalkServiceUnfollowArgs struct {
  // unused field # 1
  UnfollowRequest *UnfollowRequest `thrift:"unfollowRequest,2" db:"unfollowRequest" json:"unfollowRequest"`
}

func NewTalkServiceUnfollowArgs() *TalkServiceUnfollowArgs {
  return &TalkServiceUnfollowArgs{}
}

var TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT *UnfollowRequest
func (p *TalkServiceUnfollowArgs) GetUnfollowRequest() *UnfollowRequest {
  if !p.IsSetUnfollowRequest() {
    return TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT
  }
return p.UnfollowRequest
}
func (p *TalkServiceUnfollowArgs) IsSetUnfollowRequest() bool {
  return p.UnfollowRequest != nil
}

func (p *TalkServiceUnfollowArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnfollowArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.UnfollowRequest = &UnfollowRequest{}
  if err := p.UnfollowRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnfollowRequest), err)
  }
  return nil
}

func (p *TalkServiceUnfollowArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unfollow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnfollowArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unfollowRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unfollowRequest: ", p), err) }
  if err := p.UnfollowRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnfollowRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unfollowRequest: ", p), err) }
  return err
}

func (p *TalkServiceUnfollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnfollowArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnfollowResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnfollowResult() *TalkServiceUnfollowResult {
  return &TalkServiceUnfollowResult{}
}

var TalkServiceUnfollowResult_E_DEFAULT *TalkException
func (p *TalkServiceUnfollowResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnfollowResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnfollowResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnfollowResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnfollowResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnfollowResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unfollow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnfollowResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnfollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnfollowResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceCloseProximityMatchArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceCloseProximityMatchArgs() *TalkServiceCloseProximityMatchArgs {
  return &TalkServiceCloseProximityMatchArgs{}
}


func (p *TalkServiceCloseProximityMatchArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceCloseProximityMatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCloseProximityMatchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceCloseProximityMatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "closeProximityMatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCloseProximityMatchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceCloseProximityMatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCloseProximityMatchArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCloseProximityMatchResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCloseProximityMatchResult() *TalkServiceCloseProximityMatchResult {
  return &TalkServiceCloseProximityMatchResult{}
}

var TalkServiceCloseProximityMatchResult_E_DEFAULT *TalkException
func (p *TalkServiceCloseProximityMatchResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCloseProximityMatchResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCloseProximityMatchResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCloseProximityMatchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCloseProximityMatchResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCloseProximityMatchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "closeProximityMatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCloseProximityMatchResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCloseProximityMatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCloseProximityMatchResult(%+v)", *p)
}

// Attributes:
//  - PhoneNumberList
type TalkServiceInviteFriendsBySmsArgs struct {
  // unused field # 1
  PhoneNumberList []string `thrift:"phoneNumberList,2" db:"phoneNumberList" json:"phoneNumberList"`
}

func NewTalkServiceInviteFriendsBySmsArgs() *TalkServiceInviteFriendsBySmsArgs {
  return &TalkServiceInviteFriendsBySmsArgs{}
}


func (p *TalkServiceInviteFriendsBySmsArgs) GetPhoneNumberList() []string {
  return p.PhoneNumberList
}
func (p *TalkServiceInviteFriendsBySmsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhoneNumberList =  tSlice
  for i := 0; i < size; i ++ {
var _elem598 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem598 = v
}
    p.PhoneNumberList = append(p.PhoneNumberList, _elem598)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteFriendsBySms_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phoneNumberList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhoneNumberList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PhoneNumberList {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phoneNumberList: ", p), err) }
  return err
}

func (p *TalkServiceInviteFriendsBySmsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteFriendsBySmsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteFriendsBySmsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteFriendsBySmsResult() *TalkServiceInviteFriendsBySmsResult {
  return &TalkServiceInviteFriendsBySmsResult{}
}

var TalkServiceInviteFriendsBySmsResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteFriendsBySmsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteFriendsBySmsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteFriendsBySmsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteFriendsBySmsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteFriendsBySms_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteFriendsBySmsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteFriendsBySmsResult(%+v)", *p)
}

// Attributes:
//  - Categories
type TalkServiceGetChatEffectMetaListArgs struct {
  Categories []C58964da `thrift:"categories,1" db:"categories" json:"categories"`
}

func NewTalkServiceGetChatEffectMetaListArgs() *TalkServiceGetChatEffectMetaListArgs {
  return &TalkServiceGetChatEffectMetaListArgs{}
}


func (p *TalkServiceGetChatEffectMetaListArgs) GetCategories() []C58964da {
  return p.Categories
}
func (p *TalkServiceGetChatEffectMetaListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C58964da, 0, size)
  p.Categories =  tSet
  for i := 0; i < size; i ++ {
var _elem599 C58964da
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C58964da(v)
    _elem599 = temp
}
    p.Categories = append(p.Categories, _elem599)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatEffectMetaList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categories", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:categories: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Categories)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Categories); i++ {
    for j := i+1; j<len(p.Categories); j++ {
      if func(tgt, src C58964da) bool {
        if tgt != src { return false }
        return true
      }(p.Categories[i], p.Categories[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Categories))
      }
    }
  }
  for _, v := range p.Categories {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:categories: ", p), err) }
  return err
}

func (p *TalkServiceGetChatEffectMetaListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatEffectMetaListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatEffectMetaListResult struct {
  Success []*ChatEffectMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatEffectMetaListResult() *TalkServiceGetChatEffectMetaListResult {
  return &TalkServiceGetChatEffectMetaListResult{}
}

var TalkServiceGetChatEffectMetaListResult_Success_DEFAULT []*ChatEffectMeta

func (p *TalkServiceGetChatEffectMetaListResult) GetSuccess() []*ChatEffectMeta {
  return p.Success
}
var TalkServiceGetChatEffectMetaListResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatEffectMetaListResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatEffectMetaListResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatEffectMetaListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatEffectMetaListResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatEffectMetaListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChatEffectMeta, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem600 := &ChatEffectMeta{}
    if err := _elem600.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem600), err)
    }
    p.Success = append(p.Success, _elem600)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChatEffectMetaList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatEffectMetaListResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatEffectMetaListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatEffectMetaListResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - LastMessageId
type TalkServiceRemoveAllMessagesArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  LastMessageId string `thrift:"lastMessageId,2" db:"lastMessageId" json:"lastMessageId"`
}

func NewTalkServiceRemoveAllMessagesArgs() *TalkServiceRemoveAllMessagesArgs {
  return &TalkServiceRemoveAllMessagesArgs{}
}


func (p *TalkServiceRemoveAllMessagesArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceRemoveAllMessagesArgs) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *TalkServiceRemoveAllMessagesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAllMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceRemoveAllMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveAllMessagesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveAllMessagesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveAllMessagesResult() *TalkServiceRemoveAllMessagesResult {
  return &TalkServiceRemoveAllMessagesResult{}
}

var TalkServiceRemoveAllMessagesResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveAllMessagesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveAllMessagesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveAllMessagesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveAllMessagesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAllMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveAllMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveAllMessagesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
//  - Reference
type TalkServiceUnblockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceUnblockContactArgs() *TalkServiceUnblockContactArgs {
  return &TalkServiceUnblockContactArgs{}
}


func (p *TalkServiceUnblockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockContactArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceUnblockContactArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceUnblockContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockContactResult() *TalkServiceUnblockContactResult {
  return &TalkServiceUnblockContactResult{}
}

var TalkServiceUnblockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactResult(%+v)", *p)
}

type TalkServiceGetAnalyticsInfoArgs struct {
}

func NewTalkServiceGetAnalyticsInfoArgs() *TalkServiceGetAnalyticsInfoArgs {
  return &TalkServiceGetAnalyticsInfoArgs{}
}

func (p *TalkServiceGetAnalyticsInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAnalyticsInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAnalyticsInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAnalyticsInfoResult struct {
  Success *AnalyticsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAnalyticsInfoResult() *TalkServiceGetAnalyticsInfoResult {
  return &TalkServiceGetAnalyticsInfoResult{}
}

var TalkServiceGetAnalyticsInfoResult_Success_DEFAULT *AnalyticsInfo
func (p *TalkServiceGetAnalyticsInfoResult) GetSuccess() *AnalyticsInfo {
  if !p.IsSetSuccess() {
    return TalkServiceGetAnalyticsInfoResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetAnalyticsInfoResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAnalyticsInfoResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAnalyticsInfoResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAnalyticsInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAnalyticsInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAnalyticsInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AnalyticsInfo{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAnalyticsInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAnalyticsInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAnalyticsInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAnalyticsInfoResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecommendationIdsArgs() *TalkServiceGetRecommendationIdsArgs {
  return &TalkServiceGetRecommendationIdsArgs{}
}


func (p *TalkServiceGetRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecommendationIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecommendationIdsResult() *TalkServiceGetRecommendationIdsResult {
  return &TalkServiceGetRecommendationIdsResult{}
}

var TalkServiceGetRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecommendationIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem601 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem601 = v
}
    p.Success = append(p.Success, _elem601)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - UdidHash
//  - ApplicationTypeWithExtensions
type TalkServiceNotifyRegistrationCompleteArgs struct {
  // unused field # 1
  UdidHash string `thrift:"udidHash,2" db:"udidHash" json:"udidHash"`
  ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" db:"applicationTypeWithExtensions" json:"applicationTypeWithExtensions"`
}

func NewTalkServiceNotifyRegistrationCompleteArgs() *TalkServiceNotifyRegistrationCompleteArgs {
  return &TalkServiceNotifyRegistrationCompleteArgs{}
}


func (p *TalkServiceNotifyRegistrationCompleteArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) GetApplicationTypeWithExtensions() string {
  return p.ApplicationTypeWithExtensions
}
func (p *TalkServiceNotifyRegistrationCompleteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApplicationTypeWithExtensions = v
}
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyRegistrationComplete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationTypeWithExtensions: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationTypeWithExtensions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationTypeWithExtensions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationTypeWithExtensions: ", p), err) }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyRegistrationCompleteResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyRegistrationCompleteResult() *TalkServiceNotifyRegistrationCompleteResult {
  return &TalkServiceNotifyRegistrationCompleteResult{}
}

var TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyRegistrationCompleteResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyRegistrationCompleteResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyRegistrationComplete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteResult(%+v)", *p)
}

// Attributes:
//  - ClientRevision
type TalkServiceWakeUpLongPollingArgs struct {
  // unused field # 1
  ClientRevision int64 `thrift:"clientRevision,2" db:"clientRevision" json:"clientRevision"`
}

func NewTalkServiceWakeUpLongPollingArgs() *TalkServiceWakeUpLongPollingArgs {
  return &TalkServiceWakeUpLongPollingArgs{}
}


func (p *TalkServiceWakeUpLongPollingArgs) GetClientRevision() int64 {
  return p.ClientRevision
}
func (p *TalkServiceWakeUpLongPollingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientRevision = v
}
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wakeUpLongPolling_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clientRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClientRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientRevision: ", p), err) }
  return err
}

func (p *TalkServiceWakeUpLongPollingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceWakeUpLongPollingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceWakeUpLongPollingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceWakeUpLongPollingResult() *TalkServiceWakeUpLongPollingResult {
  return &TalkServiceWakeUpLongPollingResult{}
}

var TalkServiceWakeUpLongPollingResult_Success_DEFAULT bool
func (p *TalkServiceWakeUpLongPollingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceWakeUpLongPollingResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceWakeUpLongPollingResult_E_DEFAULT *TalkException
func (p *TalkServiceWakeUpLongPollingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceWakeUpLongPollingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceWakeUpLongPollingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceWakeUpLongPollingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceWakeUpLongPollingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wakeUpLongPolling_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceWakeUpLongPollingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceWakeUpLongPollingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceWakeUpLongPollingResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceUnblockRecommendationArgs() *TalkServiceUnblockRecommendationArgs {
  return &TalkServiceUnblockRecommendationArgs{}
}


func (p *TalkServiceUnblockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceUnblockRecommendationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockRecommendationResult() *TalkServiceUnblockRecommendationResult {
  return &TalkServiceUnblockRecommendationResult{}
}

var TalkServiceUnblockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockRecommendationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Message
type TalkServiceSendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Message *Message `thrift:"message,2" db:"message" json:"message"`
}

func NewTalkServiceSendMessageArgs() *TalkServiceSendMessageArgs {
  return &TalkServiceSendMessageArgs{}
}


func (p *TalkServiceSendMessageArgs) GetSeq() int32 {
  return p.Seq
}
var TalkServiceSendMessageArgs_Message_DEFAULT *Message
func (p *TalkServiceSendMessageArgs) GetMessage() *Message {
  if !p.IsSetMessage() {
    return TalkServiceSendMessageArgs_Message_DEFAULT
  }
return p.Message
}
func (p *TalkServiceSendMessageArgs) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TalkServiceSendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageResult struct {
  Success *Message `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendMessageResult() *TalkServiceSendMessageResult {
  return &TalkServiceSendMessageResult{}
}

var TalkServiceSendMessageResult_Success_DEFAULT *Message
func (p *TalkServiceSendMessageResult) GetSuccess() *Message {
  if !p.IsSetSuccess() {
    return TalkServiceSendMessageResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceSendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceSendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Message{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Text
type TalkServiceSendEchoPushArgs struct {
  // unused field # 1
  Text string `thrift:"text,2" db:"text" json:"text"`
}

func NewTalkServiceSendEchoPushArgs() *TalkServiceSendEchoPushArgs {
  return &TalkServiceSendEchoPushArgs{}
}


func (p *TalkServiceSendEchoPushArgs) GetText() string {
  return p.Text
}
func (p *TalkServiceSendEchoPushArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TalkServiceSendEchoPushArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendEchoPush_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TalkServiceSendEchoPushArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendEchoPushResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendEchoPushResult() *TalkServiceSendEchoPushResult {
  return &TalkServiceSendEchoPushResult{}
}

var TalkServiceSendEchoPushResult_E_DEFAULT *TalkException
func (p *TalkServiceSendEchoPushResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendEchoPushResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendEchoPushResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendEchoPushResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendEchoPush_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendEchoPushResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushResult(%+v)", *p)
}

// Attributes:
//  - MigrationPincodeSessionId
//  - AccountMigrationPincode
type TalkServiceVerifyAccountMigrationPincodeArgs struct {
  // unused field # 1
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,2" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  AccountMigrationPincode string `thrift:"accountMigrationPincode,3" db:"accountMigrationPincode" json:"accountMigrationPincode"`
}

func NewTalkServiceVerifyAccountMigrationPincodeArgs() *TalkServiceVerifyAccountMigrationPincodeArgs {
  return &TalkServiceVerifyAccountMigrationPincodeArgs{}
}


func (p *TalkServiceVerifyAccountMigrationPincodeArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) GetAccountMigrationPincode() string {
  return p.AccountMigrationPincode
}
func (p *TalkServiceVerifyAccountMigrationPincodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountMigrationPincode = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountMigrationPincode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationPincode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountMigrationPincode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountMigrationPincode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationPincodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceVerifyAccountMigrationPincodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyAccountMigrationPincodeResult() *TalkServiceVerifyAccountMigrationPincodeResult {
  return &TalkServiceVerifyAccountMigrationPincodeResult{}
}

var TalkServiceVerifyAccountMigrationPincodeResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyAccountMigrationPincodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyAccountMigrationPincodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyAccountMigrationPincodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountMigrationPincode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationPincodeResult(%+v)", *p)
}

// Attributes:
//  - UdidHash
//  - ApplicationTypeWithExtensions
type TalkServiceNotifyInstalledArgs struct {
  // unused field # 1
  UdidHash string `thrift:"udidHash,2" db:"udidHash" json:"udidHash"`
  ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" db:"applicationTypeWithExtensions" json:"applicationTypeWithExtensions"`
}

func NewTalkServiceNotifyInstalledArgs() *TalkServiceNotifyInstalledArgs {
  return &TalkServiceNotifyInstalledArgs{}
}


func (p *TalkServiceNotifyInstalledArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyInstalledArgs) GetApplicationTypeWithExtensions() string {
  return p.ApplicationTypeWithExtensions
}
func (p *TalkServiceNotifyInstalledArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyInstalledArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyInstalledArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApplicationTypeWithExtensions = v
}
  return nil
}

func (p *TalkServiceNotifyInstalledArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyInstalled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyInstalledArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyInstalledArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationTypeWithExtensions: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationTypeWithExtensions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationTypeWithExtensions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationTypeWithExtensions: ", p), err) }
  return err
}

func (p *TalkServiceNotifyInstalledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyInstalledArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyInstalledResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyInstalledResult() *TalkServiceNotifyInstalledResult {
  return &TalkServiceNotifyInstalledResult{}
}

var TalkServiceNotifyInstalledResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyInstalledResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyInstalledResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyInstalledResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyInstalledResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyInstalledResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyInstalledResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyInstalled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyInstalledResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyInstalledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyInstalledResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
type TalkServiceVerifyQrcodeArgs struct {
  // unused field # 1
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
}

func NewTalkServiceVerifyQrcodeArgs() *TalkServiceVerifyQrcodeArgs {
  return &TalkServiceVerifyQrcodeArgs{}
}


func (p *TalkServiceVerifyQrcodeArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceVerifyQrcodeArgs) GetPinCode() string {
  return p.PinCode
}
func (p *TalkServiceVerifyQrcodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeResult() *TalkServiceVerifyQrcodeResult {
  return &TalkServiceVerifyQrcodeResult{}
}

var TalkServiceVerifyQrcodeResult_Success_DEFAULT string
func (p *TalkServiceVerifyQrcodeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyQrcodeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceVerifyQrcodeResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyQrcodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyQrcodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyQrcodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyQrcodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeResult(%+v)", *p)
}

// Attributes:
//  - SearchId
//  - Reference
type TalkServiceFindContactByMetaTagArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindContactByMetaTagArgs() *TalkServiceFindContactByMetaTagArgs {
  return &TalkServiceFindContactByMetaTagArgs{}
}


func (p *TalkServiceFindContactByMetaTagArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindContactByMetaTagArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindContactByMetaTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByMetaTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByMetaTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByMetaTagResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByMetaTagResult() *TalkServiceFindContactByMetaTagResult {
  return &TalkServiceFindContactByMetaTagResult{}
}

var TalkServiceFindContactByMetaTagResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByMetaTagResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByMetaTagResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByMetaTagResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByMetaTagResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByMetaTagResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByMetaTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByMetaTagResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByMetaTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByMetaTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByMetaTagResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByMetaTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - Phones
type TalkServiceFindContactsByPhoneArgs struct {
  // unused field # 1
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
}

func NewTalkServiceFindContactsByPhoneArgs() *TalkServiceFindContactsByPhoneArgs {
  return &TalkServiceFindContactsByPhoneArgs{}
}


func (p *TalkServiceFindContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}
func (p *TalkServiceFindContactsByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem602 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem602 = v
}
    p.Phones = append(p.Phones, _elem602)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Phones[i], p.Phones[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *TalkServiceFindContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactsByPhoneResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactsByPhoneResult() *TalkServiceFindContactsByPhoneResult {
  return &TalkServiceFindContactsByPhoneResult{}
}

var TalkServiceFindContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindContactsByPhoneResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindContactsByPhoneResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactsByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key603 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key603 = v
}
    _val604 := &Contact{}
    if err := _val604.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val604), err)
    }
    p.Success[_key603] = _val604
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactsByPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithPhoneNumberArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,3" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithPhoneNumberArgs() *TalkServiceRegisterWithPhoneNumberArgs {
  return &TalkServiceRegisterWithPhoneNumberArgs{}
}


func (p *TalkServiceRegisterWithPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithPhoneNumberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithPhoneNumberResult struct {
  Success *RegisterWithPhoneNumberResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithPhoneNumberResult() *TalkServiceRegisterWithPhoneNumberResult {
  return &TalkServiceRegisterWithPhoneNumberResult{}
}

var TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT *RegisterWithPhoneNumberResult_
func (p *TalkServiceRegisterWithPhoneNumberResult) GetSuccess() *RegisterWithPhoneNumberResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RegisterWithPhoneNumberResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerWithPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type TalkServiceUpdateProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr ProfileAttribute `thrift:"attr,2" db:"attr" json:"attr"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewTalkServiceUpdateProfileAttributeArgs() *TalkServiceUpdateProfileAttributeArgs {
  return &TalkServiceUpdateProfileAttributeArgs{}
}


func (p *TalkServiceUpdateProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetAttr() ProfileAttribute {
  return p.Attr
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateProfileAttributeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ProfileAttribute(v)
  p.Attr = temp
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributeResult() *TalkServiceUpdateProfileAttributeResult {
  return &TalkServiceUpdateProfileAttributeResult{}
}

var TalkServiceUpdateProfileAttributeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Request
type TalkServiceUpdateProfileAttributesArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Request *UpdateProfileAttributesRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceUpdateProfileAttributesArgs() *TalkServiceUpdateProfileAttributesArgs {
  return &TalkServiceUpdateProfileAttributesArgs{}
}


func (p *TalkServiceUpdateProfileAttributesArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT *UpdateProfileAttributesRequest
func (p *TalkServiceUpdateProfileAttributesArgs) GetRequest() *UpdateProfileAttributesRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateProfileAttributesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &UpdateProfileAttributesRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributesResult() *TalkServiceUpdateProfileAttributesResult {
  return &TalkServiceUpdateProfileAttributesResult{}
}

var TalkServiceUpdateProfileAttributesResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileAttributesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileAttributesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileAttributesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
type TalkServiceUpdateSettingsAttributes2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  // unused field # 2
  Settings *Settings `thrift:"settings,3" db:"settings" json:"settings"`
  AttributesToUpdate []SettingsAttributeEx `thrift:"attributesToUpdate,4" db:"attributesToUpdate" json:"attributesToUpdate"`
}

func NewTalkServiceUpdateSettingsAttributes2Args() *TalkServiceUpdateSettingsAttributes2Args {
  return &TalkServiceUpdateSettingsAttributes2Args{}
}


func (p *TalkServiceUpdateSettingsAttributes2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributes2Args) GetAttributesToUpdate() []SettingsAttributeEx {
  return p.AttributesToUpdate
}
var TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT *Settings
func (p *TalkServiceUpdateSettingsAttributes2Args) GetSettings() *Settings {
  if !p.IsSetSettings() {
    return TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT
  }
return p.Settings
}
func (p *TalkServiceUpdateSettingsAttributes2Args) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributeEx, 0, size)
  p.AttributesToUpdate =  tSet
  for i := 0; i < size; i ++ {
var _elem605 SettingsAttributeEx
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributeEx(v)
    _elem605 = temp
}
    p.AttributesToUpdate = append(p.AttributesToUpdate, _elem605)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Settings = &Settings{}
  if err := p.Settings.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributesToUpdate", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributesToUpdate: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AttributesToUpdate)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToUpdate); i++ {
    for j := i+1; j<len(p.AttributesToUpdate); j++ {
      if func(tgt, src SettingsAttributeEx) bool {
        if tgt != src { return false }
        return true
      }(p.AttributesToUpdate[i], p.AttributesToUpdate[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToUpdate))
      }
    }
  }
  for _, v := range p.AttributesToUpdate {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributesToUpdate: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettingsAttributes2Result struct {
  Success []SettingsAttributeEx `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributes2Result() *TalkServiceUpdateSettingsAttributes2Result {
  return &TalkServiceUpdateSettingsAttributes2Result{}
}

var TalkServiceUpdateSettingsAttributes2Result_Success_DEFAULT []SettingsAttributeEx

func (p *TalkServiceUpdateSettingsAttributes2Result) GetSuccess() []SettingsAttributeEx {
  return p.Success
}
var TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *TalkServiceUpdateSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributeEx, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem606 SettingsAttributeEx
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributeEx(v)
    _elem606 = temp
}
    p.Success = append(p.Success, _elem606)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src SettingsAttributeEx) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - EMid
type TalkServiceDecryptFollowEMidArgs struct {
  // unused field # 1
  EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewTalkServiceDecryptFollowEMidArgs() *TalkServiceDecryptFollowEMidArgs {
  return &TalkServiceDecryptFollowEMidArgs{}
}


func (p *TalkServiceDecryptFollowEMidArgs) GetEMid() string {
  return p.EMid
}
func (p *TalkServiceDecryptFollowEMidArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "decryptFollowEMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err) }
  return err
}

func (p *TalkServiceDecryptFollowEMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDecryptFollowEMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDecryptFollowEMidResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDecryptFollowEMidResult() *TalkServiceDecryptFollowEMidResult {
  return &TalkServiceDecryptFollowEMidResult{}
}

var TalkServiceDecryptFollowEMidResult_Success_DEFAULT string
func (p *TalkServiceDecryptFollowEMidResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceDecryptFollowEMidResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceDecryptFollowEMidResult_E_DEFAULT *TalkException
func (p *TalkServiceDecryptFollowEMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDecryptFollowEMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDecryptFollowEMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDecryptFollowEMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDecryptFollowEMidResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "decryptFollowEMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDecryptFollowEMidResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDecryptFollowEMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDecryptFollowEMidResult(%+v)", *p)
}

// Attributes:
//  - AccountMigrationPincode
type TalkServiceUpdateAccountMigrationPincodeArgs struct {
  // unused field # 1
  AccountMigrationPincode string `thrift:"accountMigrationPincode,2" db:"accountMigrationPincode" json:"accountMigrationPincode"`
}

func NewTalkServiceUpdateAccountMigrationPincodeArgs() *TalkServiceUpdateAccountMigrationPincodeArgs {
  return &TalkServiceUpdateAccountMigrationPincodeArgs{}
}


func (p *TalkServiceUpdateAccountMigrationPincodeArgs) GetAccountMigrationPincode() string {
  return p.AccountMigrationPincode
}
func (p *TalkServiceUpdateAccountMigrationPincodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountMigrationPincode = v
}
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateAccountMigrationPincode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationPincode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationPincode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationPincode: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAccountMigrationPincodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateAccountMigrationPincodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateAccountMigrationPincodeResult() *TalkServiceUpdateAccountMigrationPincodeResult {
  return &TalkServiceUpdateAccountMigrationPincodeResult{}
}

var TalkServiceUpdateAccountMigrationPincodeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateAccountMigrationPincodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateAccountMigrationPincodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateAccountMigrationPincodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateAccountMigrationPincode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAccountMigrationPincodeResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceIsUseridAvailableArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceIsUseridAvailableArgs() *TalkServiceIsUseridAvailableArgs {
  return &TalkServiceIsUseridAvailableArgs{}
}


func (p *TalkServiceIsUseridAvailableArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceIsUseridAvailableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "isUseridAvailable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceIsUseridAvailableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceIsUseridAvailableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceIsUseridAvailableResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceIsUseridAvailableResult() *TalkServiceIsUseridAvailableResult {
  return &TalkServiceIsUseridAvailableResult{}
}

var TalkServiceIsUseridAvailableResult_Success_DEFAULT bool
func (p *TalkServiceIsUseridAvailableResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceIsUseridAvailableResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceIsUseridAvailableResult_E_DEFAULT *TalkException
func (p *TalkServiceIsUseridAvailableResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceIsUseridAvailableResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceIsUseridAvailableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceIsUseridAvailableResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceIsUseridAvailableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceIsUseridAvailableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "isUseridAvailable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceIsUseridAvailableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceIsUseridAvailableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceIsUseridAvailableResult(%+v)", *p)
}

// Attributes:
//  - GetFollowersRequest
type TalkServiceGetFollowersArgs struct {
  // unused field # 1
  GetFollowersRequest *GetFollowersRequest `thrift:"getFollowersRequest,2" db:"getFollowersRequest" json:"getFollowersRequest"`
}

func NewTalkServiceGetFollowersArgs() *TalkServiceGetFollowersArgs {
  return &TalkServiceGetFollowersArgs{}
}

var TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT *GetFollowersRequest
func (p *TalkServiceGetFollowersArgs) GetGetFollowersRequest() *GetFollowersRequest {
  if !p.IsSetGetFollowersRequest() {
    return TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT
  }
return p.GetFollowersRequest
}
func (p *TalkServiceGetFollowersArgs) IsSetGetFollowersRequest() bool {
  return p.GetFollowersRequest != nil
}

func (p *TalkServiceGetFollowersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.GetFollowersRequest = &GetFollowersRequest{}
  if err := p.GetFollowersRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowersRequest), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getFollowersRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowersRequest: ", p), err) }
  if err := p.GetFollowersRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowersRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowersRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetFollowersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowersResult struct {
  Success *GetFollowersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowersResult() *TalkServiceGetFollowersResult {
  return &TalkServiceGetFollowersResult{}
}

var TalkServiceGetFollowersResult_Success_DEFAULT *GetFollowersResponse
func (p *TalkServiceGetFollowersResult) GetSuccess() *GetFollowersResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetFollowersResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetFollowersResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFollowersResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFollowersResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFollowersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFollowersResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFollowersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetFollowersResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowersResult(%+v)", *p)
}

type TalkServiceCreateAccountMigrationPincodeSessionArgs struct {
}

func NewTalkServiceCreateAccountMigrationPincodeSessionArgs() *TalkServiceCreateAccountMigrationPincodeSessionArgs {
  return &TalkServiceCreateAccountMigrationPincodeSessionArgs{}
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createAccountMigrationPincodeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateAccountMigrationPincodeSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateAccountMigrationPincodeSessionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateAccountMigrationPincodeSessionResult() *TalkServiceCreateAccountMigrationPincodeSessionResult {
  return &TalkServiceCreateAccountMigrationPincodeSessionResult{}
}

var TalkServiceCreateAccountMigrationPincodeSessionResult_Success_DEFAULT string
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceCreateAccountMigrationPincodeSessionResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceCreateAccountMigrationPincodeSessionResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateAccountMigrationPincodeSessionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createAccountMigrationPincodeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateAccountMigrationPincodeSessionResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceResendPinCodeArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceResendPinCodeArgs() *TalkServiceResendPinCodeArgs {
  return &TalkServiceResendPinCodeArgs{}
}


func (p *TalkServiceResendPinCodeArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceResendPinCodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceResendPinCodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "resendPinCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceResendPinCodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceResendPinCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceResendPinCodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceResendPinCodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceResendPinCodeResult() *TalkServiceResendPinCodeResult {
  return &TalkServiceResendPinCodeResult{}
}

var TalkServiceResendPinCodeResult_E_DEFAULT *TalkException
func (p *TalkServiceResendPinCodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceResendPinCodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceResendPinCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceResendPinCodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "resendPinCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceResendPinCodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceResendPinCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceResendPinCodeResult(%+v)", *p)
}

// Attributes:
//  - GetFollowingsRequest
type TalkServiceGetFollowingsArgs struct {
  // unused field # 1
  GetFollowingsRequest *GetFollowingsRequest `thrift:"getFollowingsRequest,2" db:"getFollowingsRequest" json:"getFollowingsRequest"`
}

func NewTalkServiceGetFollowingsArgs() *TalkServiceGetFollowingsArgs {
  return &TalkServiceGetFollowingsArgs{}
}

var TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT *GetFollowingsRequest
func (p *TalkServiceGetFollowingsArgs) GetGetFollowingsRequest() *GetFollowingsRequest {
  if !p.IsSetGetFollowingsRequest() {
    return TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT
  }
return p.GetFollowingsRequest
}
func (p *TalkServiceGetFollowingsArgs) IsSetGetFollowingsRequest() bool {
  return p.GetFollowingsRequest != nil
}

func (p *TalkServiceGetFollowingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.GetFollowingsRequest = &GetFollowingsRequest{}
  if err := p.GetFollowingsRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowingsRequest), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowingsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getFollowingsRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowingsRequest: ", p), err) }
  if err := p.GetFollowingsRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowingsRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowingsRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetFollowingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowingsResult struct {
  Success *GetFollowingsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowingsResult() *TalkServiceGetFollowingsResult {
  return &TalkServiceGetFollowingsResult{}
}

var TalkServiceGetFollowingsResult_Success_DEFAULT *GetFollowingsResponse
func (p *TalkServiceGetFollowingsResult) GetSuccess() *GetFollowingsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetFollowingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetFollowingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFollowingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFollowingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFollowingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFollowingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFollowingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetFollowingsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getFollowings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowingsResult(%+v)", *p)
}

type TalkServiceGetServerTimeArgs struct {
}

func NewTalkServiceGetServerTimeArgs() *TalkServiceGetServerTimeArgs {
  return &TalkServiceGetServerTimeArgs{}
}

func (p *TalkServiceGetServerTimeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getServerTime_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetServerTimeResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetServerTimeResult() *TalkServiceGetServerTimeResult {
  return &TalkServiceGetServerTimeResult{}
}

var TalkServiceGetServerTimeResult_Success_DEFAULT int64
func (p *TalkServiceGetServerTimeResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetServerTimeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetServerTimeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetServerTimeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetServerTimeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetServerTimeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetServerTimeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetServerTimeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getServerTime_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeResult(%+v)", *p)
}

type TalkServiceGetLastOpRevisionArgs struct {
}

func NewTalkServiceGetLastOpRevisionArgs() *TalkServiceGetLastOpRevisionArgs {
  return &TalkServiceGetLastOpRevisionArgs{}
}

func (p *TalkServiceGetLastOpRevisionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastOpRevision_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastOpRevisionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastOpRevisionResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastOpRevisionResult() *TalkServiceGetLastOpRevisionResult {
  return &TalkServiceGetLastOpRevisionResult{}
}

var TalkServiceGetLastOpRevisionResult_Success_DEFAULT int64
func (p *TalkServiceGetLastOpRevisionResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastOpRevisionResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetLastOpRevisionResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastOpRevisionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastOpRevisionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastOpRevisionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastOpRevisionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastOpRevisionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastOpRevision_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastOpRevisionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastOpRevisionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastOpRevisionResult(%+v)", *p)
}

// Attributes:
//  - TicketIdWithTag
type TalkServiceFindContactByUserTicketArgs struct {
  // unused field # 1
  TicketIdWithTag string `thrift:"ticketIdWithTag,2" db:"ticketIdWithTag" json:"ticketIdWithTag"`
}

func NewTalkServiceFindContactByUserTicketArgs() *TalkServiceFindContactByUserTicketArgs {
  return &TalkServiceFindContactByUserTicketArgs{}
}


func (p *TalkServiceFindContactByUserTicketArgs) GetTicketIdWithTag() string {
  return p.TicketIdWithTag
}
func (p *TalkServiceFindContactByUserTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TicketIdWithTag = v
}
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketIdWithTag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ticketIdWithTag: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketIdWithTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketIdWithTag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ticketIdWithTag: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUserTicketResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUserTicketResult() *TalkServiceFindContactByUserTicketResult {
  return &TalkServiceFindContactByUserTicketResult{}
}

var TalkServiceFindContactByUserTicketResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUserTicketResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUserTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUserTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUserTicketResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceFinishUpdateVerificationArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceFinishUpdateVerificationArgs() *TalkServiceFinishUpdateVerificationArgs {
  return &TalkServiceFinishUpdateVerificationArgs{}
}


func (p *TalkServiceFinishUpdateVerificationArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceFinishUpdateVerificationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "finishUpdateVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceFinishUpdateVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFinishUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceFinishUpdateVerificationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFinishUpdateVerificationResult() *TalkServiceFinishUpdateVerificationResult {
  return &TalkServiceFinishUpdateVerificationResult{}
}

var TalkServiceFinishUpdateVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceFinishUpdateVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFinishUpdateVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFinishUpdateVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "finishUpdateVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFinishUpdateVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFinishUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetAcceptedProximityMatchesArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceGetAcceptedProximityMatchesArgs() *TalkServiceGetAcceptedProximityMatchesArgs {
  return &TalkServiceGetAcceptedProximityMatchesArgs{}
}


func (p *TalkServiceGetAcceptedProximityMatchesArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceGetAcceptedProximityMatchesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAcceptedProximityMatches_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAcceptedProximityMatchesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAcceptedProximityMatchesResult() *TalkServiceGetAcceptedProximityMatchesResult {
  return &TalkServiceGetAcceptedProximityMatchesResult{}
}

var TalkServiceGetAcceptedProximityMatchesResult_Success_DEFAULT []string

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAcceptedProximityMatchesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem607 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem607 = v
}
    p.Success = append(p.Success, _elem607)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAcceptedProximityMatches_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src string) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesResult(%+v)", *p)
}

type TalkServiceClearRingbackToneArgs struct {
}

func NewTalkServiceClearRingbackToneArgs() *TalkServiceClearRingbackToneArgs {
  return &TalkServiceClearRingbackToneArgs{}
}

func (p *TalkServiceClearRingbackToneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingbackToneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearRingbackTone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingbackToneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceClearRingbackToneResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceClearRingbackToneResult() *TalkServiceClearRingbackToneResult {
  return &TalkServiceClearRingbackToneResult{}
}

var TalkServiceClearRingbackToneResult_E_DEFAULT *TalkException
func (p *TalkServiceClearRingbackToneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceClearRingbackToneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceClearRingbackToneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceClearRingbackToneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingbackToneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceClearRingbackToneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearRingbackTone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingbackToneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceClearRingbackToneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingbackToneResult(%+v)", *p)
}

type TalkServiceUnregisterUserAndDeviceArgs struct {
}

func NewTalkServiceUnregisterUserAndDeviceArgs() *TalkServiceUnregisterUserAndDeviceArgs {
  return &TalkServiceUnregisterUserAndDeviceArgs{}
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unregisterUserAndDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUnregisterUserAndDeviceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnregisterUserAndDeviceResult() *TalkServiceUnregisterUserAndDeviceResult {
  return &TalkServiceUnregisterUserAndDeviceResult{}
}

var TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT string
func (p *TalkServiceUnregisterUserAndDeviceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT *TalkException
func (p *TalkServiceUnregisterUserAndDeviceResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unregisterUserAndDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceResult(%+v)", *p)
}


type ChannelService interface {
  // Parameters:
  //  - ChannelId
  IssueOTP(ctx context.Context, channelId string) (_r *OTPResult_, _err error)
  // Parameters:
  //  - ChannelId
  ApproveChannelAndIssueChannelToken(ctx context.Context, channelId string) (_r *ChannelToken, _err error)
  // Parameters:
  //  - ChannelId
  //  - OtpId
  ApproveChannelAndIssueRequestToken(ctx context.Context, channelId string, otpId string) (_r string, _err error)
  // Parameters:
  //  - LocalRev
  FetchNotificationItems(ctx context.Context, localRev int64) (_r *NotificationFetchResult_, _err error)
  // Parameters:
  //  - LastSynced
  //  - Locale
  GetApprovedChannels(ctx context.Context, lastSynced int64, locale string) (_r *ApprovedChannelInfos, _err error)
  // Parameters:
  //  - ChannelId
  //  - Locale
  GetChannelInfo(ctx context.Context, channelId string, locale string) (_r *ChannelInfo, _err error)
  // Parameters:
  //  - ChannelId
  //  - Locale
  GetChannelNotificationSetting(ctx context.Context, channelId string, locale string) (_r *ChannelNotificationSetting, _err error)
  // Parameters:
  //  - Locale
  GetChannelNotificationSettings(ctx context.Context, locale string) (_r []*ChannelNotificationSetting, _err error)
  // Parameters:
  //  - LastSynced
  //  - Locale
  GetChannels(ctx context.Context, lastSynced int64, locale string) (_r *ChannelInfos, _err error)
  // Parameters:
  //  - LastSynced
  GetDomains(ctx context.Context, lastSynced int64) (_r *ChannelDomains, _err error)
  // Parameters:
  //  - LastSynced
  GetCommonDomains(ctx context.Context, lastSynced int64) (_r *ChannelDomains, _err error)
  // Parameters:
  //  - ChannelId
  IssueChannelToken(ctx context.Context, channelId string) (_r *ChannelToken, _err error)
  // Parameters:
  //  - ChannelId
  //  - OtpId
  IssueRequestToken(ctx context.Context, channelId string, otpId string) (_r string, _err error)
  // Parameters:
  //  - ChannelId
  //  - OtpId
  //  - AuthScheme
  //  - ReturnUrl
  IssueRequestTokenWithAuthScheme(ctx context.Context, channelId string, otpId string, authScheme []string, returnUrl string) (_r *RequestTokenResponse, _err error)
  // Parameters:
  //  - ChannelId
  //  - OtpId
  //  - RedirectUrl
  IssueRequestTokenForAutoLogin(ctx context.Context, channelId string, otpId string, redirectUrl string) (_r string, _err error)
  // Parameters:
  //  - ChannelIds
  GetUpdatedChannelIds(ctx context.Context, channelIds []*ChannelIdWithLastUpdated) (_r []string, _err error)
  // Parameters:
  //  - ChannelId
  RevokeChannel(ctx context.Context, channelId string) (_err error)
  // Parameters:
  //  - LastSynced
  //  - Locale
  SyncChannelData(ctx context.Context, lastSynced int64, locale string) (_r *ChannelSyncDatas, _err error)
}

type ChannelServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewChannelServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ChannelServiceClient {
  return &ChannelServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewChannelServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ChannelServiceClient {
  return &ChannelServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewChannelServiceClient(c thrift.TClient) *ChannelServiceClient {
  return &ChannelServiceClient{
    c: c,
  }
}

func (p *ChannelServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *ChannelServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ChannelServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) IssueOTP(ctx context.Context, channelId string) (_r *OTPResult_, _err error) {
  var _args1157 ChannelServiceIssueOTPArgs
  _args1157.ChannelId = channelId
  var _result1159 ChannelServiceIssueOTPResult
  var _meta1158 thrift.ResponseMeta
  _meta1158, _err = p.Client_().Call(ctx, "issueOTP", &_args1157, &_result1159)
  p.SetLastResponseMeta_(_meta1158)
  if _err != nil {
    return
  }
  switch {
  case _result1159.E!= nil:
    return _r, _result1159.E
  }

  return _result1159.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) ApproveChannelAndIssueChannelToken(ctx context.Context, channelId string) (_r *ChannelToken, _err error) {
  var _args1160 ChannelServiceApproveChannelAndIssueChannelTokenArgs
  _args1160.ChannelId = channelId
  var _result1162 ChannelServiceApproveChannelAndIssueChannelTokenResult
  var _meta1161 thrift.ResponseMeta
  _meta1161, _err = p.Client_().Call(ctx, "approveChannelAndIssueChannelToken", &_args1160, &_result1162)
  p.SetLastResponseMeta_(_meta1161)
  if _err != nil {
    return
  }
  switch {
  case _result1162.E!= nil:
    return _r, _result1162.E
  }

  return _result1162.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - OtpId
func (p *ChannelServiceClient) ApproveChannelAndIssueRequestToken(ctx context.Context, channelId string, otpId string) (_r string, _err error) {
  var _args1163 ChannelServiceApproveChannelAndIssueRequestTokenArgs
  _args1163.ChannelId = channelId
  _args1163.OtpId = otpId
  var _result1165 ChannelServiceApproveChannelAndIssueRequestTokenResult
  var _meta1164 thrift.ResponseMeta
  _meta1164, _err = p.Client_().Call(ctx, "approveChannelAndIssueRequestToken", &_args1163, &_result1165)
  p.SetLastResponseMeta_(_meta1164)
  if _err != nil {
    return
  }
  switch {
  case _result1165.E!= nil:
    return _r, _result1165.E
  }

  return _result1165.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
func (p *ChannelServiceClient) FetchNotificationItems(ctx context.Context, localRev int64) (_r *NotificationFetchResult_, _err error) {
  var _args1166 ChannelServiceFetchNotificationItemsArgs
  _args1166.LocalRev = localRev
  var _result1168 ChannelServiceFetchNotificationItemsResult
  var _meta1167 thrift.ResponseMeta
  _meta1167, _err = p.Client_().Call(ctx, "fetchNotificationItems", &_args1166, &_result1168)
  p.SetLastResponseMeta_(_meta1167)
  if _err != nil {
    return
  }
  switch {
  case _result1168.E!= nil:
    return _r, _result1168.E
  }

  return _result1168.GetSuccess(), nil
}

// Parameters:
//  - LastSynced
//  - Locale
func (p *ChannelServiceClient) GetApprovedChannels(ctx context.Context, lastSynced int64, locale string) (_r *ApprovedChannelInfos, _err error) {
  var _args1169 ChannelServiceGetApprovedChannelsArgs
  _args1169.LastSynced = lastSynced
  _args1169.Locale = locale
  var _result1171 ChannelServiceGetApprovedChannelsResult
  var _meta1170 thrift.ResponseMeta
  _meta1170, _err = p.Client_().Call(ctx, "getApprovedChannels", &_args1169, &_result1171)
  p.SetLastResponseMeta_(_meta1170)
  if _err != nil {
    return
  }
  switch {
  case _result1171.E!= nil:
    return _r, _result1171.E
  }

  return _result1171.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - Locale
func (p *ChannelServiceClient) GetChannelInfo(ctx context.Context, channelId string, locale string) (_r *ChannelInfo, _err error) {
  var _args1172 ChannelServiceGetChannelInfoArgs
  _args1172.ChannelId = channelId
  _args1172.Locale = locale
  var _result1174 ChannelServiceGetChannelInfoResult
  var _meta1173 thrift.ResponseMeta
  _meta1173, _err = p.Client_().Call(ctx, "getChannelInfo", &_args1172, &_result1174)
  p.SetLastResponseMeta_(_meta1173)
  if _err != nil {
    return
  }
  switch {
  case _result1174.E!= nil:
    return _r, _result1174.E
  }

  return _result1174.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - Locale
func (p *ChannelServiceClient) GetChannelNotificationSetting(ctx context.Context, channelId string, locale string) (_r *ChannelNotificationSetting, _err error) {
  var _args1175 ChannelServiceGetChannelNotificationSettingArgs
  _args1175.ChannelId = channelId
  _args1175.Locale = locale
  var _result1177 ChannelServiceGetChannelNotificationSettingResult
  var _meta1176 thrift.ResponseMeta
  _meta1176, _err = p.Client_().Call(ctx, "getChannelNotificationSetting", &_args1175, &_result1177)
  p.SetLastResponseMeta_(_meta1176)
  if _err != nil {
    return
  }
  switch {
  case _result1177.E!= nil:
    return _r, _result1177.E
  }

  return _result1177.GetSuccess(), nil
}

// Parameters:
//  - Locale
func (p *ChannelServiceClient) GetChannelNotificationSettings(ctx context.Context, locale string) (_r []*ChannelNotificationSetting, _err error) {
  var _args1178 ChannelServiceGetChannelNotificationSettingsArgs
  _args1178.Locale = locale
  var _result1180 ChannelServiceGetChannelNotificationSettingsResult
  var _meta1179 thrift.ResponseMeta
  _meta1179, _err = p.Client_().Call(ctx, "getChannelNotificationSettings", &_args1178, &_result1180)
  p.SetLastResponseMeta_(_meta1179)
  if _err != nil {
    return
  }
  switch {
  case _result1180.E!= nil:
    return _r, _result1180.E
  }

  return _result1180.GetSuccess(), nil
}

// Parameters:
//  - LastSynced
//  - Locale
func (p *ChannelServiceClient) GetChannels(ctx context.Context, lastSynced int64, locale string) (_r *ChannelInfos, _err error) {
  var _args1181 ChannelServiceGetChannelsArgs
  _args1181.LastSynced = lastSynced
  _args1181.Locale = locale
  var _result1183 ChannelServiceGetChannelsResult
  var _meta1182 thrift.ResponseMeta
  _meta1182, _err = p.Client_().Call(ctx, "getChannels", &_args1181, &_result1183)
  p.SetLastResponseMeta_(_meta1182)
  if _err != nil {
    return
  }
  switch {
  case _result1183.E!= nil:
    return _r, _result1183.E
  }

  return _result1183.GetSuccess(), nil
}

// Parameters:
//  - LastSynced
func (p *ChannelServiceClient) GetDomains(ctx context.Context, lastSynced int64) (_r *ChannelDomains, _err error) {
  var _args1184 ChannelServiceGetDomainsArgs
  _args1184.LastSynced = lastSynced
  var _result1186 ChannelServiceGetDomainsResult
  var _meta1185 thrift.ResponseMeta
  _meta1185, _err = p.Client_().Call(ctx, "getDomains", &_args1184, &_result1186)
  p.SetLastResponseMeta_(_meta1185)
  if _err != nil {
    return
  }
  switch {
  case _result1186.E!= nil:
    return _r, _result1186.E
  }

  return _result1186.GetSuccess(), nil
}

// Parameters:
//  - LastSynced
func (p *ChannelServiceClient) GetCommonDomains(ctx context.Context, lastSynced int64) (_r *ChannelDomains, _err error) {
  var _args1187 ChannelServiceGetCommonDomainsArgs
  _args1187.LastSynced = lastSynced
  var _result1189 ChannelServiceGetCommonDomainsResult
  var _meta1188 thrift.ResponseMeta
  _meta1188, _err = p.Client_().Call(ctx, "getCommonDomains", &_args1187, &_result1189)
  p.SetLastResponseMeta_(_meta1188)
  if _err != nil {
    return
  }
  switch {
  case _result1189.E!= nil:
    return _r, _result1189.E
  }

  return _result1189.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) IssueChannelToken(ctx context.Context, channelId string) (_r *ChannelToken, _err error) {
  var _args1190 ChannelServiceIssueChannelTokenArgs
  _args1190.ChannelId = channelId
  var _result1192 ChannelServiceIssueChannelTokenResult
  var _meta1191 thrift.ResponseMeta
  _meta1191, _err = p.Client_().Call(ctx, "issueChannelToken", &_args1190, &_result1192)
  p.SetLastResponseMeta_(_meta1191)
  if _err != nil {
    return
  }
  switch {
  case _result1192.E!= nil:
    return _r, _result1192.E
  }

  return _result1192.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - OtpId
func (p *ChannelServiceClient) IssueRequestToken(ctx context.Context, channelId string, otpId string) (_r string, _err error) {
  var _args1193 ChannelServiceIssueRequestTokenArgs
  _args1193.ChannelId = channelId
  _args1193.OtpId = otpId
  var _result1195 ChannelServiceIssueRequestTokenResult
  var _meta1194 thrift.ResponseMeta
  _meta1194, _err = p.Client_().Call(ctx, "issueRequestToken", &_args1193, &_result1195)
  p.SetLastResponseMeta_(_meta1194)
  if _err != nil {
    return
  }
  switch {
  case _result1195.E!= nil:
    return _r, _result1195.E
  }

  return _result1195.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - OtpId
//  - AuthScheme
//  - ReturnUrl
func (p *ChannelServiceClient) IssueRequestTokenWithAuthScheme(ctx context.Context, channelId string, otpId string, authScheme []string, returnUrl string) (_r *RequestTokenResponse, _err error) {
  var _args1196 ChannelServiceIssueRequestTokenWithAuthSchemeArgs
  _args1196.ChannelId = channelId
  _args1196.OtpId = otpId
  _args1196.AuthScheme = authScheme
  _args1196.ReturnUrl = returnUrl
  var _result1198 ChannelServiceIssueRequestTokenWithAuthSchemeResult
  var _meta1197 thrift.ResponseMeta
  _meta1197, _err = p.Client_().Call(ctx, "issueRequestTokenWithAuthScheme", &_args1196, &_result1198)
  p.SetLastResponseMeta_(_meta1197)
  if _err != nil {
    return
  }
  switch {
  case _result1198.E!= nil:
    return _r, _result1198.E
  }

  return _result1198.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - OtpId
//  - RedirectUrl
func (p *ChannelServiceClient) IssueRequestTokenForAutoLogin(ctx context.Context, channelId string, otpId string, redirectUrl string) (_r string, _err error) {
  var _args1199 ChannelServiceIssueRequestTokenForAutoLoginArgs
  _args1199.ChannelId = channelId
  _args1199.OtpId = otpId
  _args1199.RedirectUrl = redirectUrl
  var _result1201 ChannelServiceIssueRequestTokenForAutoLoginResult
  var _meta1200 thrift.ResponseMeta
  _meta1200, _err = p.Client_().Call(ctx, "issueRequestTokenForAutoLogin", &_args1199, &_result1201)
  p.SetLastResponseMeta_(_meta1200)
  if _err != nil {
    return
  }
  switch {
  case _result1201.E!= nil:
    return _r, _result1201.E
  }

  return _result1201.GetSuccess(), nil
}

// Parameters:
//  - ChannelIds
func (p *ChannelServiceClient) GetUpdatedChannelIds(ctx context.Context, channelIds []*ChannelIdWithLastUpdated) (_r []string, _err error) {
  var _args1202 ChannelServiceGetUpdatedChannelIdsArgs
  _args1202.ChannelIds = channelIds
  var _result1204 ChannelServiceGetUpdatedChannelIdsResult
  var _meta1203 thrift.ResponseMeta
  _meta1203, _err = p.Client_().Call(ctx, "getUpdatedChannelIds", &_args1202, &_result1204)
  p.SetLastResponseMeta_(_meta1203)
  if _err != nil {
    return
  }
  switch {
  case _result1204.E!= nil:
    return _r, _result1204.E
  }

  return _result1204.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) RevokeChannel(ctx context.Context, channelId string) (_err error) {
  var _args1205 ChannelServiceRevokeChannelArgs
  _args1205.ChannelId = channelId
  var _result1207 ChannelServiceRevokeChannelResult
  var _meta1206 thrift.ResponseMeta
  _meta1206, _err = p.Client_().Call(ctx, "revokeChannel", &_args1205, &_result1207)
  p.SetLastResponseMeta_(_meta1206)
  if _err != nil {
    return
  }
  switch {
  case _result1207.E!= nil:
    return _result1207.E
  }

  return nil
}

// Parameters:
//  - LastSynced
//  - Locale
func (p *ChannelServiceClient) SyncChannelData(ctx context.Context, lastSynced int64, locale string) (_r *ChannelSyncDatas, _err error) {
  var _args1208 ChannelServiceSyncChannelDataArgs
  _args1208.LastSynced = lastSynced
  _args1208.Locale = locale
  var _result1210 ChannelServiceSyncChannelDataResult
  var _meta1209 thrift.ResponseMeta
  _meta1209, _err = p.Client_().Call(ctx, "syncChannelData", &_args1208, &_result1210)
  p.SetLastResponseMeta_(_meta1209)
  if _err != nil {
    return
  }
  switch {
  case _result1210.E!= nil:
    return _r, _result1210.E
  }

  return _result1210.GetSuccess(), nil
}

type ChannelServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ChannelService
}

func (p *ChannelServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ChannelServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ChannelServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewChannelServiceProcessor(handler ChannelService) *ChannelServiceProcessor {

  self1211 := &ChannelServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self1211.processorMap["issueOTP"] = &channelServiceProcessorIssueOTP{handler:handler}
  self1211.processorMap["approveChannelAndIssueChannelToken"] = &channelServiceProcessorApproveChannelAndIssueChannelToken{handler:handler}
  self1211.processorMap["approveChannelAndIssueRequestToken"] = &channelServiceProcessorApproveChannelAndIssueRequestToken{handler:handler}
  self1211.processorMap["fetchNotificationItems"] = &channelServiceProcessorFetchNotificationItems{handler:handler}
  self1211.processorMap["getApprovedChannels"] = &channelServiceProcessorGetApprovedChannels{handler:handler}
  self1211.processorMap["getChannelInfo"] = &channelServiceProcessorGetChannelInfo{handler:handler}
  self1211.processorMap["getChannelNotificationSetting"] = &channelServiceProcessorGetChannelNotificationSetting{handler:handler}
  self1211.processorMap["getChannelNotificationSettings"] = &channelServiceProcessorGetChannelNotificationSettings{handler:handler}
  self1211.processorMap["getChannels"] = &channelServiceProcessorGetChannels{handler:handler}
  self1211.processorMap["getDomains"] = &channelServiceProcessorGetDomains{handler:handler}
  self1211.processorMap["getCommonDomains"] = &channelServiceProcessorGetCommonDomains{handler:handler}
  self1211.processorMap["issueChannelToken"] = &channelServiceProcessorIssueChannelToken{handler:handler}
  self1211.processorMap["issueRequestToken"] = &channelServiceProcessorIssueRequestToken{handler:handler}
  self1211.processorMap["issueRequestTokenWithAuthScheme"] = &channelServiceProcessorIssueRequestTokenWithAuthScheme{handler:handler}
  self1211.processorMap["issueRequestTokenForAutoLogin"] = &channelServiceProcessorIssueRequestTokenForAutoLogin{handler:handler}
  self1211.processorMap["getUpdatedChannelIds"] = &channelServiceProcessorGetUpdatedChannelIds{handler:handler}
  self1211.processorMap["revokeChannel"] = &channelServiceProcessorRevokeChannel{handler:handler}
  self1211.processorMap["syncChannelData"] = &channelServiceProcessorSyncChannelData{handler:handler}
return self1211
}

func (p *ChannelServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x1212 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x1212.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x1212

}

type channelServiceProcessorIssueOTP struct {
  handler ChannelService
}

func (p *channelServiceProcessorIssueOTP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceIssueOTPArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueOTP", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceIssueOTPResult{}
  var retval *OTPResult_
  if retval, err2 = p.handler.IssueOTP(ctx, args.ChannelId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueOTP: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueOTP", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueOTP", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorApproveChannelAndIssueChannelToken struct {
  handler ChannelService
}

func (p *channelServiceProcessorApproveChannelAndIssueChannelToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceApproveChannelAndIssueChannelTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "approveChannelAndIssueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceApproveChannelAndIssueChannelTokenResult{}
  var retval *ChannelToken
  if retval, err2 = p.handler.ApproveChannelAndIssueChannelToken(ctx, args.ChannelId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing approveChannelAndIssueChannelToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "approveChannelAndIssueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "approveChannelAndIssueChannelToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorApproveChannelAndIssueRequestToken struct {
  handler ChannelService
}

func (p *channelServiceProcessorApproveChannelAndIssueRequestToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceApproveChannelAndIssueRequestTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "approveChannelAndIssueRequestToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceApproveChannelAndIssueRequestTokenResult{}
  var retval string
  if retval, err2 = p.handler.ApproveChannelAndIssueRequestToken(ctx, args.ChannelId, args.OtpId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing approveChannelAndIssueRequestToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "approveChannelAndIssueRequestToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "approveChannelAndIssueRequestToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorFetchNotificationItems struct {
  handler ChannelService
}

func (p *channelServiceProcessorFetchNotificationItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceFetchNotificationItemsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchNotificationItems", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceFetchNotificationItemsResult{}
  var retval *NotificationFetchResult_
  if retval, err2 = p.handler.FetchNotificationItems(ctx, args.LocalRev); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchNotificationItems: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchNotificationItems", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchNotificationItems", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetApprovedChannels struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetApprovedChannels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetApprovedChannelsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getApprovedChannels", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetApprovedChannelsResult{}
  var retval *ApprovedChannelInfos
  if retval, err2 = p.handler.GetApprovedChannels(ctx, args.LastSynced, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApprovedChannels: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getApprovedChannels", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getApprovedChannels", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetChannelInfo struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetChannelInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetChannelInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannelInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetChannelInfoResult{}
  var retval *ChannelInfo
  if retval, err2 = p.handler.GetChannelInfo(ctx, args.ChannelId, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannelInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChannelInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetChannelNotificationSetting struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetChannelNotificationSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetChannelNotificationSettingArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannelNotificationSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetChannelNotificationSettingResult{}
  var retval *ChannelNotificationSetting
  if retval, err2 = p.handler.GetChannelNotificationSetting(ctx, args.ChannelId, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelNotificationSetting: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannelNotificationSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChannelNotificationSetting", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetChannelNotificationSettings struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetChannelNotificationSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetChannelNotificationSettingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannelNotificationSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetChannelNotificationSettingsResult{}
  var retval []*ChannelNotificationSetting
  if retval, err2 = p.handler.GetChannelNotificationSettings(ctx, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelNotificationSettings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannelNotificationSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChannelNotificationSettings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetChannels struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetChannels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetChannelsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannels", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetChannelsResult{}
  var retval *ChannelInfos
  if retval, err2 = p.handler.GetChannels(ctx, args.LastSynced, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannels: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChannels", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChannels", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetDomains struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetDomains) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetDomainsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getDomains", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetDomainsResult{}
  var retval *ChannelDomains
  if retval, err2 = p.handler.GetDomains(ctx, args.LastSynced); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDomains: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getDomains", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getDomains", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetCommonDomains struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetCommonDomains) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetCommonDomainsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCommonDomains", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetCommonDomainsResult{}
  var retval *ChannelDomains
  if retval, err2 = p.handler.GetCommonDomains(ctx, args.LastSynced); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommonDomains: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCommonDomains", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCommonDomains", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorIssueChannelToken struct {
  handler ChannelService
}

func (p *channelServiceProcessorIssueChannelToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceIssueChannelTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceIssueChannelTokenResult{}
  var retval *ChannelToken
  if retval, err2 = p.handler.IssueChannelToken(ctx, args.ChannelId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueChannelToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueChannelToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorIssueRequestToken struct {
  handler ChannelService
}

func (p *channelServiceProcessorIssueRequestToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceIssueRequestTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueRequestToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceIssueRequestTokenResult{}
  var retval string
  if retval, err2 = p.handler.IssueRequestToken(ctx, args.ChannelId, args.OtpId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueRequestToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueRequestToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueRequestToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorIssueRequestTokenWithAuthScheme struct {
  handler ChannelService
}

func (p *channelServiceProcessorIssueRequestTokenWithAuthScheme) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceIssueRequestTokenWithAuthSchemeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueRequestTokenWithAuthScheme", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceIssueRequestTokenWithAuthSchemeResult{}
  var retval *RequestTokenResponse
  if retval, err2 = p.handler.IssueRequestTokenWithAuthScheme(ctx, args.ChannelId, args.OtpId, args.AuthScheme, args.ReturnUrl); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueRequestTokenWithAuthScheme: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueRequestTokenWithAuthScheme", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueRequestTokenWithAuthScheme", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorIssueRequestTokenForAutoLogin struct {
  handler ChannelService
}

func (p *channelServiceProcessorIssueRequestTokenForAutoLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceIssueRequestTokenForAutoLoginArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueRequestTokenForAutoLogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceIssueRequestTokenForAutoLoginResult{}
  var retval string
  if retval, err2 = p.handler.IssueRequestTokenForAutoLogin(ctx, args.ChannelId, args.OtpId, args.RedirectUrl); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueRequestTokenForAutoLogin: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueRequestTokenForAutoLogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueRequestTokenForAutoLogin", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetUpdatedChannelIds struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetUpdatedChannelIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetUpdatedChannelIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getUpdatedChannelIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetUpdatedChannelIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetUpdatedChannelIds(ctx, args.ChannelIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUpdatedChannelIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getUpdatedChannelIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getUpdatedChannelIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorRevokeChannel struct {
  handler ChannelService
}

func (p *channelServiceProcessorRevokeChannel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceRevokeChannelArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "revokeChannel", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceRevokeChannelResult{}
  if err2 = p.handler.RevokeChannel(ctx, args.ChannelId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeChannel: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "revokeChannel", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "revokeChannel", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorSyncChannelData struct {
  handler ChannelService
}

func (p *channelServiceProcessorSyncChannelData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceSyncChannelDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "syncChannelData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceSyncChannelDataResult{}
  var retval *ChannelSyncDatas
  if retval, err2 = p.handler.SyncChannelData(ctx, args.LastSynced, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncChannelData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "syncChannelData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "syncChannelData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ChannelId
type ChannelServiceIssueOTPArgs struct {
  // unused field # 1
  ChannelId string `thrift:"channelId,2" db:"channelId" json:"channelId"`
}

func NewChannelServiceIssueOTPArgs() *ChannelServiceIssueOTPArgs {
  return &ChannelServiceIssueOTPArgs{}
}


func (p *ChannelServiceIssueOTPArgs) GetChannelId() string {
  return p.ChannelId
}
func (p *ChannelServiceIssueOTPArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueOTPArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceIssueOTPArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueOTP_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueOTPArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueOTPArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueOTPArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueOTPResult struct {
  Success *OTPResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceIssueOTPResult() *ChannelServiceIssueOTPResult {
  return &ChannelServiceIssueOTPResult{}
}

var ChannelServiceIssueOTPResult_Success_DEFAULT *OTPResult_
func (p *ChannelServiceIssueOTPResult) GetSuccess() *OTPResult_ {
  if !p.IsSetSuccess() {
    return ChannelServiceIssueOTPResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceIssueOTPResult_E_DEFAULT *ChannelException
func (p *ChannelServiceIssueOTPResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceIssueOTPResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceIssueOTPResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceIssueOTPResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceIssueOTPResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueOTPResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &OTPResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceIssueOTPResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceIssueOTPResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueOTP_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueOTPResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueOTPResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueOTPResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueOTPResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
type ChannelServiceApproveChannelAndIssueChannelTokenArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
}

func NewChannelServiceApproveChannelAndIssueChannelTokenArgs() *ChannelServiceApproveChannelAndIssueChannelTokenArgs {
  return &ChannelServiceApproveChannelAndIssueChannelTokenArgs{}
}


func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) GetChannelId() string {
  return p.ChannelId
}
func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "approveChannelAndIssueChannelToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceApproveChannelAndIssueChannelTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceApproveChannelAndIssueChannelTokenResult struct {
  Success *ChannelToken `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceApproveChannelAndIssueChannelTokenResult() *ChannelServiceApproveChannelAndIssueChannelTokenResult {
  return &ChannelServiceApproveChannelAndIssueChannelTokenResult{}
}

var ChannelServiceApproveChannelAndIssueChannelTokenResult_Success_DEFAULT *ChannelToken
func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) GetSuccess() *ChannelToken {
  if !p.IsSetSuccess() {
    return ChannelServiceApproveChannelAndIssueChannelTokenResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceApproveChannelAndIssueChannelTokenResult_E_DEFAULT *ChannelException
func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceApproveChannelAndIssueChannelTokenResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelToken{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "approveChannelAndIssueChannelToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueChannelTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceApproveChannelAndIssueChannelTokenResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - OtpId
type ChannelServiceApproveChannelAndIssueRequestTokenArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  OtpId string `thrift:"otpId,2" db:"otpId" json:"otpId"`
}

func NewChannelServiceApproveChannelAndIssueRequestTokenArgs() *ChannelServiceApproveChannelAndIssueRequestTokenArgs {
  return &ChannelServiceApproveChannelAndIssueRequestTokenArgs{}
}


func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) GetOtpId() string {
  return p.OtpId
}
func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OtpId = v
}
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "approveChannelAndIssueRequestToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "otpId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otpId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OtpId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otpId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otpId: ", p), err) }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceApproveChannelAndIssueRequestTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceApproveChannelAndIssueRequestTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceApproveChannelAndIssueRequestTokenResult() *ChannelServiceApproveChannelAndIssueRequestTokenResult {
  return &ChannelServiceApproveChannelAndIssueRequestTokenResult{}
}

var ChannelServiceApproveChannelAndIssueRequestTokenResult_Success_DEFAULT string
func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ChannelServiceApproveChannelAndIssueRequestTokenResult_Success_DEFAULT
  }
return *p.Success
}
var ChannelServiceApproveChannelAndIssueRequestTokenResult_E_DEFAULT *ChannelException
func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceApproveChannelAndIssueRequestTokenResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "approveChannelAndIssueRequestToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceApproveChannelAndIssueRequestTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceApproveChannelAndIssueRequestTokenResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
type ChannelServiceFetchNotificationItemsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
}

func NewChannelServiceFetchNotificationItemsArgs() *ChannelServiceFetchNotificationItemsArgs {
  return &ChannelServiceFetchNotificationItemsArgs{}
}


func (p *ChannelServiceFetchNotificationItemsArgs) GetLocalRev() int64 {
  return p.LocalRev
}
func (p *ChannelServiceFetchNotificationItemsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceFetchNotificationItemsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *ChannelServiceFetchNotificationItemsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchNotificationItems_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceFetchNotificationItemsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *ChannelServiceFetchNotificationItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceFetchNotificationItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceFetchNotificationItemsResult struct {
  Success *NotificationFetchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceFetchNotificationItemsResult() *ChannelServiceFetchNotificationItemsResult {
  return &ChannelServiceFetchNotificationItemsResult{}
}

var ChannelServiceFetchNotificationItemsResult_Success_DEFAULT *NotificationFetchResult_
func (p *ChannelServiceFetchNotificationItemsResult) GetSuccess() *NotificationFetchResult_ {
  if !p.IsSetSuccess() {
    return ChannelServiceFetchNotificationItemsResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceFetchNotificationItemsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceFetchNotificationItemsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceFetchNotificationItemsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceFetchNotificationItemsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceFetchNotificationItemsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceFetchNotificationItemsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceFetchNotificationItemsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &NotificationFetchResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceFetchNotificationItemsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceFetchNotificationItemsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchNotificationItems_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceFetchNotificationItemsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceFetchNotificationItemsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceFetchNotificationItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceFetchNotificationItemsResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
//  - Locale
type ChannelServiceGetApprovedChannelsArgs struct {
  // unused field # 1
  LastSynced int64 `thrift:"lastSynced,2" db:"lastSynced" json:"lastSynced"`
  Locale string `thrift:"locale,3" db:"locale" json:"locale"`
}

func NewChannelServiceGetApprovedChannelsArgs() *ChannelServiceGetApprovedChannelsArgs {
  return &ChannelServiceGetApprovedChannelsArgs{}
}


func (p *ChannelServiceGetApprovedChannelsArgs) GetLastSynced() int64 {
  return p.LastSynced
}

func (p *ChannelServiceGetApprovedChannelsArgs) GetLocale() string {
  return p.Locale
}
func (p *ChannelServiceGetApprovedChannelsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSynced = v
}
  return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getApprovedChannels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetApprovedChannelsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSynced", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSynced: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSynced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSynced (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSynced: ", p), err) }
  return err
}

func (p *ChannelServiceGetApprovedChannelsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err) }
  return err
}

func (p *ChannelServiceGetApprovedChannelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetApprovedChannelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetApprovedChannelsResult struct {
  Success *ApprovedChannelInfos `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetApprovedChannelsResult() *ChannelServiceGetApprovedChannelsResult {
  return &ChannelServiceGetApprovedChannelsResult{}
}

var ChannelServiceGetApprovedChannelsResult_Success_DEFAULT *ApprovedChannelInfos
func (p *ChannelServiceGetApprovedChannelsResult) GetSuccess() *ApprovedChannelInfos {
  if !p.IsSetSuccess() {
    return ChannelServiceGetApprovedChannelsResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetApprovedChannelsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetApprovedChannelsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetApprovedChannelsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetApprovedChannelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetApprovedChannelsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetApprovedChannelsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetApprovedChannelsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ApprovedChannelInfos{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetApprovedChannelsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetApprovedChannelsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getApprovedChannels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetApprovedChannelsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetApprovedChannelsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetApprovedChannelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetApprovedChannelsResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Locale
type ChannelServiceGetChannelInfoArgs struct {
  // unused field # 1
  ChannelId string `thrift:"channelId,2" db:"channelId" json:"channelId"`
  Locale string `thrift:"locale,3" db:"locale" json:"locale"`
}

func NewChannelServiceGetChannelInfoArgs() *ChannelServiceGetChannelInfoArgs {
  return &ChannelServiceGetChannelInfoArgs{}
}


func (p *ChannelServiceGetChannelInfoArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelServiceGetChannelInfoArgs) GetLocale() string {
  return p.Locale
}
func (p *ChannelServiceGetChannelInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceGetChannelInfoArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *ChannelServiceGetChannelInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannelInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelInfoResult struct {
  Success *ChannelInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetChannelInfoResult() *ChannelServiceGetChannelInfoResult {
  return &ChannelServiceGetChannelInfoResult{}
}

var ChannelServiceGetChannelInfoResult_Success_DEFAULT *ChannelInfo
func (p *ChannelServiceGetChannelInfoResult) GetSuccess() *ChannelInfo {
  if !p.IsSetSuccess() {
    return ChannelServiceGetChannelInfoResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetChannelInfoResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetChannelInfoResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetChannelInfoResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetChannelInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetChannelInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetChannelInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelInfo{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannelInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelInfoResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Locale
type ChannelServiceGetChannelNotificationSettingArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  Locale string `thrift:"locale,2" db:"locale" json:"locale"`
}

func NewChannelServiceGetChannelNotificationSettingArgs() *ChannelServiceGetChannelNotificationSettingArgs {
  return &ChannelServiceGetChannelNotificationSettingArgs{}
}


func (p *ChannelServiceGetChannelNotificationSettingArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) GetLocale() string {
  return p.Locale
}
func (p *ChannelServiceGetChannelNotificationSettingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannelNotificationSetting_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:locale: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelNotificationSettingResult struct {
  Success *ChannelNotificationSetting `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetChannelNotificationSettingResult() *ChannelServiceGetChannelNotificationSettingResult {
  return &ChannelServiceGetChannelNotificationSettingResult{}
}

var ChannelServiceGetChannelNotificationSettingResult_Success_DEFAULT *ChannelNotificationSetting
func (p *ChannelServiceGetChannelNotificationSettingResult) GetSuccess() *ChannelNotificationSetting {
  if !p.IsSetSuccess() {
    return ChannelServiceGetChannelNotificationSettingResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetChannelNotificationSettingResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetChannelNotificationSettingResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetChannelNotificationSettingResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetChannelNotificationSettingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelNotificationSetting{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannelNotificationSetting_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingResult(%+v)", *p)
}

// Attributes:
//  - Locale
type ChannelServiceGetChannelNotificationSettingsArgs struct {
  Locale string `thrift:"locale,1" db:"locale" json:"locale"`
}

func NewChannelServiceGetChannelNotificationSettingsArgs() *ChannelServiceGetChannelNotificationSettingsArgs {
  return &ChannelServiceGetChannelNotificationSettingsArgs{}
}


func (p *ChannelServiceGetChannelNotificationSettingsArgs) GetLocale() string {
  return p.Locale
}
func (p *ChannelServiceGetChannelNotificationSettingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannelNotificationSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:locale: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelNotificationSettingsResult struct {
  Success []*ChannelNotificationSetting `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetChannelNotificationSettingsResult() *ChannelServiceGetChannelNotificationSettingsResult {
  return &ChannelServiceGetChannelNotificationSettingsResult{}
}

var ChannelServiceGetChannelNotificationSettingsResult_Success_DEFAULT []*ChannelNotificationSetting

func (p *ChannelServiceGetChannelNotificationSettingsResult) GetSuccess() []*ChannelNotificationSetting {
  return p.Success
}
var ChannelServiceGetChannelNotificationSettingsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetChannelNotificationSettingsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetChannelNotificationSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetChannelNotificationSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelNotificationSetting, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem1213 := &ChannelNotificationSetting{}
    if err := _elem1213.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1213), err)
    }
    p.Success = append(p.Success, _elem1213)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannelNotificationSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelNotificationSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelNotificationSettingsResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
//  - Locale
type ChannelServiceGetChannelsArgs struct {
  // unused field # 1
  LastSynced int64 `thrift:"lastSynced,2" db:"lastSynced" json:"lastSynced"`
  Locale string `thrift:"locale,3" db:"locale" json:"locale"`
}

func NewChannelServiceGetChannelsArgs() *ChannelServiceGetChannelsArgs {
  return &ChannelServiceGetChannelsArgs{}
}


func (p *ChannelServiceGetChannelsArgs) GetLastSynced() int64 {
  return p.LastSynced
}

func (p *ChannelServiceGetChannelsArgs) GetLocale() string {
  return p.Locale
}
func (p *ChannelServiceGetChannelsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSynced = v
}
  return nil
}

func (p *ChannelServiceGetChannelsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *ChannelServiceGetChannelsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSynced", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSynced: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSynced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSynced (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSynced: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err) }
  return err
}

func (p *ChannelServiceGetChannelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetChannelsResult struct {
  Success *ChannelInfos `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetChannelsResult() *ChannelServiceGetChannelsResult {
  return &ChannelServiceGetChannelsResult{}
}

var ChannelServiceGetChannelsResult_Success_DEFAULT *ChannelInfos
func (p *ChannelServiceGetChannelsResult) GetSuccess() *ChannelInfos {
  if !p.IsSetSuccess() {
    return ChannelServiceGetChannelsResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetChannelsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetChannelsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetChannelsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetChannelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetChannelsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetChannelsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelInfos{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetChannelsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChannels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetChannelsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetChannelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetChannelsResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
type ChannelServiceGetDomainsArgs struct {
  // unused field # 1
  LastSynced int64 `thrift:"lastSynced,2" db:"lastSynced" json:"lastSynced"`
}

func NewChannelServiceGetDomainsArgs() *ChannelServiceGetDomainsArgs {
  return &ChannelServiceGetDomainsArgs{}
}


func (p *ChannelServiceGetDomainsArgs) GetLastSynced() int64 {
  return p.LastSynced
}
func (p *ChannelServiceGetDomainsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetDomainsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSynced = v
}
  return nil
}

func (p *ChannelServiceGetDomainsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDomains_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetDomainsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSynced", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSynced: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSynced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSynced (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSynced: ", p), err) }
  return err
}

func (p *ChannelServiceGetDomainsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetDomainsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetDomainsResult struct {
  Success *ChannelDomains `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetDomainsResult() *ChannelServiceGetDomainsResult {
  return &ChannelServiceGetDomainsResult{}
}

var ChannelServiceGetDomainsResult_Success_DEFAULT *ChannelDomains
func (p *ChannelServiceGetDomainsResult) GetSuccess() *ChannelDomains {
  if !p.IsSetSuccess() {
    return ChannelServiceGetDomainsResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetDomainsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetDomainsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetDomainsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetDomainsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetDomainsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetDomainsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetDomainsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelDomains{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetDomainsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetDomainsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDomains_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetDomainsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetDomainsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetDomainsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetDomainsResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
type ChannelServiceGetCommonDomainsArgs struct {
  LastSynced int64 `thrift:"lastSynced,1" db:"lastSynced" json:"lastSynced"`
}

func NewChannelServiceGetCommonDomainsArgs() *ChannelServiceGetCommonDomainsArgs {
  return &ChannelServiceGetCommonDomainsArgs{}
}


func (p *ChannelServiceGetCommonDomainsArgs) GetLastSynced() int64 {
  return p.LastSynced
}
func (p *ChannelServiceGetCommonDomainsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetCommonDomainsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LastSynced = v
}
  return nil
}

func (p *ChannelServiceGetCommonDomainsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCommonDomains_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetCommonDomainsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSynced", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastSynced: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSynced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSynced (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastSynced: ", p), err) }
  return err
}

func (p *ChannelServiceGetCommonDomainsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetCommonDomainsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetCommonDomainsResult struct {
  Success *ChannelDomains `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetCommonDomainsResult() *ChannelServiceGetCommonDomainsResult {
  return &ChannelServiceGetCommonDomainsResult{}
}

var ChannelServiceGetCommonDomainsResult_Success_DEFAULT *ChannelDomains
func (p *ChannelServiceGetCommonDomainsResult) GetSuccess() *ChannelDomains {
  if !p.IsSetSuccess() {
    return ChannelServiceGetCommonDomainsResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetCommonDomainsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetCommonDomainsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetCommonDomainsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetCommonDomainsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetCommonDomainsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetCommonDomainsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetCommonDomainsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelDomains{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetCommonDomainsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetCommonDomainsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCommonDomains_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetCommonDomainsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetCommonDomainsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetCommonDomainsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetCommonDomainsResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
type ChannelServiceIssueChannelTokenArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
}

func NewChannelServiceIssueChannelTokenArgs() *ChannelServiceIssueChannelTokenArgs {
  return &ChannelServiceIssueChannelTokenArgs{}
}


func (p *ChannelServiceIssueChannelTokenArgs) GetChannelId() string {
  return p.ChannelId
}
func (p *ChannelServiceIssueChannelTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueChannelToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueChannelTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueChannelTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueChannelTokenResult struct {
  Success *ChannelToken `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceIssueChannelTokenResult() *ChannelServiceIssueChannelTokenResult {
  return &ChannelServiceIssueChannelTokenResult{}
}

var ChannelServiceIssueChannelTokenResult_Success_DEFAULT *ChannelToken
func (p *ChannelServiceIssueChannelTokenResult) GetSuccess() *ChannelToken {
  if !p.IsSetSuccess() {
    return ChannelServiceIssueChannelTokenResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceIssueChannelTokenResult_E_DEFAULT *ChannelException
func (p *ChannelServiceIssueChannelTokenResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceIssueChannelTokenResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceIssueChannelTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceIssueChannelTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceIssueChannelTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelToken{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueChannelToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueChannelTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueChannelTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueChannelTokenResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - OtpId
type ChannelServiceIssueRequestTokenArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  OtpId string `thrift:"otpId,2" db:"otpId" json:"otpId"`
}

func NewChannelServiceIssueRequestTokenArgs() *ChannelServiceIssueRequestTokenArgs {
  return &ChannelServiceIssueRequestTokenArgs{}
}


func (p *ChannelServiceIssueRequestTokenArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelServiceIssueRequestTokenArgs) GetOtpId() string {
  return p.OtpId
}
func (p *ChannelServiceIssueRequestTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OtpId = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueRequestToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueRequestTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "otpId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otpId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OtpId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otpId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otpId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueRequestTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueRequestTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceIssueRequestTokenResult() *ChannelServiceIssueRequestTokenResult {
  return &ChannelServiceIssueRequestTokenResult{}
}

var ChannelServiceIssueRequestTokenResult_Success_DEFAULT string
func (p *ChannelServiceIssueRequestTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ChannelServiceIssueRequestTokenResult_Success_DEFAULT
  }
return *p.Success
}
var ChannelServiceIssueRequestTokenResult_E_DEFAULT *ChannelException
func (p *ChannelServiceIssueRequestTokenResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceIssueRequestTokenResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceIssueRequestTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceIssueRequestTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceIssueRequestTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueRequestToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueRequestTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueRequestTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueRequestTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueRequestTokenResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - OtpId
//  - AuthScheme
//  - ReturnUrl
type ChannelServiceIssueRequestTokenWithAuthSchemeArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  OtpId string `thrift:"otpId,2" db:"otpId" json:"otpId"`
  AuthScheme []string `thrift:"authScheme,3" db:"authScheme" json:"authScheme"`
  ReturnUrl string `thrift:"returnUrl,4" db:"returnUrl" json:"returnUrl"`
}

func NewChannelServiceIssueRequestTokenWithAuthSchemeArgs() *ChannelServiceIssueRequestTokenWithAuthSchemeArgs {
  return &ChannelServiceIssueRequestTokenWithAuthSchemeArgs{}
}


func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetOtpId() string {
  return p.OtpId
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetAuthScheme() []string {
  return p.AuthScheme
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) GetReturnUrl() string {
  return p.ReturnUrl
}
func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OtpId = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AuthScheme =  tSlice
  for i := 0; i < size; i ++ {
var _elem1214 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1214 = v
}
    p.AuthScheme = append(p.AuthScheme, _elem1214)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReturnUrl = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueRequestTokenWithAuthScheme_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "otpId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otpId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OtpId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otpId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otpId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authScheme", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authScheme: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.AuthScheme)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AuthScheme {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authScheme: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "returnUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:returnUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:returnUrl: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueRequestTokenWithAuthSchemeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueRequestTokenWithAuthSchemeResult struct {
  Success *RequestTokenResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceIssueRequestTokenWithAuthSchemeResult() *ChannelServiceIssueRequestTokenWithAuthSchemeResult {
  return &ChannelServiceIssueRequestTokenWithAuthSchemeResult{}
}

var ChannelServiceIssueRequestTokenWithAuthSchemeResult_Success_DEFAULT *RequestTokenResponse
func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) GetSuccess() *RequestTokenResponse {
  if !p.IsSetSuccess() {
    return ChannelServiceIssueRequestTokenWithAuthSchemeResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceIssueRequestTokenWithAuthSchemeResult_E_DEFAULT *ChannelException
func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceIssueRequestTokenWithAuthSchemeResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RequestTokenResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueRequestTokenWithAuthScheme_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueRequestTokenWithAuthSchemeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueRequestTokenWithAuthSchemeResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - OtpId
//  - RedirectUrl
type ChannelServiceIssueRequestTokenForAutoLoginArgs struct {
  // unused field # 1
  ChannelId string `thrift:"channelId,2" db:"channelId" json:"channelId"`
  OtpId string `thrift:"otpId,3" db:"otpId" json:"otpId"`
  RedirectUrl string `thrift:"redirectUrl,4" db:"redirectUrl" json:"redirectUrl"`
}

func NewChannelServiceIssueRequestTokenForAutoLoginArgs() *ChannelServiceIssueRequestTokenForAutoLoginArgs {
  return &ChannelServiceIssueRequestTokenForAutoLoginArgs{}
}


func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) GetOtpId() string {
  return p.OtpId
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) GetRedirectUrl() string {
  return p.RedirectUrl
}
func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OtpId = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RedirectUrl = v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueRequestTokenForAutoLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "otpId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:otpId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OtpId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otpId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:otpId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "redirectUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:redirectUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RedirectUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redirectUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:redirectUrl: ", p), err) }
  return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueRequestTokenForAutoLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueRequestTokenForAutoLoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceIssueRequestTokenForAutoLoginResult() *ChannelServiceIssueRequestTokenForAutoLoginResult {
  return &ChannelServiceIssueRequestTokenForAutoLoginResult{}
}

var ChannelServiceIssueRequestTokenForAutoLoginResult_Success_DEFAULT string
func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ChannelServiceIssueRequestTokenForAutoLoginResult_Success_DEFAULT
  }
return *p.Success
}
var ChannelServiceIssueRequestTokenForAutoLoginResult_E_DEFAULT *ChannelException
func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceIssueRequestTokenForAutoLoginResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueRequestTokenForAutoLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueRequestTokenForAutoLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueRequestTokenForAutoLoginResult(%+v)", *p)
}

// Attributes:
//  - ChannelIds
type ChannelServiceGetUpdatedChannelIdsArgs struct {
  ChannelIds []*ChannelIdWithLastUpdated `thrift:"channelIds,1" db:"channelIds" json:"channelIds"`
}

func NewChannelServiceGetUpdatedChannelIdsArgs() *ChannelServiceGetUpdatedChannelIdsArgs {
  return &ChannelServiceGetUpdatedChannelIdsArgs{}
}


func (p *ChannelServiceGetUpdatedChannelIdsArgs) GetChannelIds() []*ChannelIdWithLastUpdated {
  return p.ChannelIds
}
func (p *ChannelServiceGetUpdatedChannelIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelIdWithLastUpdated, 0, size)
  p.ChannelIds =  tSlice
  for i := 0; i < size; i ++ {
    _elem1215 := &ChannelIdWithLastUpdated{}
    if err := _elem1215.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1215), err)
    }
    p.ChannelIds = append(p.ChannelIds, _elem1215)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUpdatedChannelIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ChannelIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelIds {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelIds: ", p), err) }
  return err
}

func (p *ChannelServiceGetUpdatedChannelIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetUpdatedChannelIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetUpdatedChannelIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetUpdatedChannelIdsResult() *ChannelServiceGetUpdatedChannelIdsResult {
  return &ChannelServiceGetUpdatedChannelIdsResult{}
}

var ChannelServiceGetUpdatedChannelIdsResult_Success_DEFAULT []string

func (p *ChannelServiceGetUpdatedChannelIdsResult) GetSuccess() []string {
  return p.Success
}
var ChannelServiceGetUpdatedChannelIdsResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetUpdatedChannelIdsResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetUpdatedChannelIdsResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetUpdatedChannelIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem1216 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1216 = v
}
    p.Success = append(p.Success, _elem1216)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUpdatedChannelIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetUpdatedChannelIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetUpdatedChannelIdsResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
type ChannelServiceRevokeChannelArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
}

func NewChannelServiceRevokeChannelArgs() *ChannelServiceRevokeChannelArgs {
  return &ChannelServiceRevokeChannelArgs{}
}


func (p *ChannelServiceRevokeChannelArgs) GetChannelId() string {
  return p.ChannelId
}
func (p *ChannelServiceRevokeChannelArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceRevokeChannelArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceRevokeChannelArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revokeChannel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceRevokeChannelArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceRevokeChannelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceRevokeChannelArgs(%+v)", *p)
}

// Attributes:
//  - E
type ChannelServiceRevokeChannelResult struct {
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceRevokeChannelResult() *ChannelServiceRevokeChannelResult {
  return &ChannelServiceRevokeChannelResult{}
}

var ChannelServiceRevokeChannelResult_E_DEFAULT *ChannelException
func (p *ChannelServiceRevokeChannelResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceRevokeChannelResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceRevokeChannelResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceRevokeChannelResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceRevokeChannelResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceRevokeChannelResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revokeChannel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceRevokeChannelResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceRevokeChannelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceRevokeChannelResult(%+v)", *p)
}

// Attributes:
//  - LastSynced
//  - Locale
type ChannelServiceSyncChannelDataArgs struct {
  // unused field # 1
  LastSynced int64 `thrift:"lastSynced,2" db:"lastSynced" json:"lastSynced"`
  Locale string `thrift:"locale,3" db:"locale" json:"locale"`
}

func NewChannelServiceSyncChannelDataArgs() *ChannelServiceSyncChannelDataArgs {
  return &ChannelServiceSyncChannelDataArgs{}
}


func (p *ChannelServiceSyncChannelDataArgs) GetLastSynced() int64 {
  return p.LastSynced
}

func (p *ChannelServiceSyncChannelDataArgs) GetLocale() string {
  return p.Locale
}
func (p *ChannelServiceSyncChannelDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceSyncChannelDataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSynced = v
}
  return nil
}

func (p *ChannelServiceSyncChannelDataArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *ChannelServiceSyncChannelDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "syncChannelData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceSyncChannelDataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSynced", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSynced: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSynced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSynced (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSynced: ", p), err) }
  return err
}

func (p *ChannelServiceSyncChannelDataArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err) }
  return err
}

func (p *ChannelServiceSyncChannelDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceSyncChannelDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceSyncChannelDataResult struct {
  Success *ChannelSyncDatas `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceSyncChannelDataResult() *ChannelServiceSyncChannelDataResult {
  return &ChannelServiceSyncChannelDataResult{}
}

var ChannelServiceSyncChannelDataResult_Success_DEFAULT *ChannelSyncDatas
func (p *ChannelServiceSyncChannelDataResult) GetSuccess() *ChannelSyncDatas {
  if !p.IsSetSuccess() {
    return ChannelServiceSyncChannelDataResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceSyncChannelDataResult_E_DEFAULT *ChannelException
func (p *ChannelServiceSyncChannelDataResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceSyncChannelDataResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceSyncChannelDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceSyncChannelDataResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceSyncChannelDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceSyncChannelDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelSyncDatas{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceSyncChannelDataResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceSyncChannelDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "syncChannelData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceSyncChannelDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceSyncChannelDataResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceSyncChannelDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceSyncChannelDataResult(%+v)", *p)
}


